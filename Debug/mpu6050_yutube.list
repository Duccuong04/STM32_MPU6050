
mpu6050_yutube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006194  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  080062a8  080062a8  000072a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006678  08006678  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006678  08006678  00007678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006680  08006680  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006680  08006680  00007680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006684  08006684  00007684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006688  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200001d8  0800685c  000081d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  0800685c  000084a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a21b  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f5  00000000  00000000  00012418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  00013e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000798  00000000  00000000  000147d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000301a  00000000  00000000  00014f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc26  00000000  00000000  00017f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cdc  00000000  00000000  00024ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab884  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000393c  00000000  00000000  000ab8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000af204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800628c 	.word	0x0800628c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800628c 	.word	0x0800628c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a8c:	b088      	sub	sp, #32
 8000a8e:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
	uint8_t i = 0, ret;
 8000a90:	2300      	movs	r3, #0
 8000a92:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a94:	f000 fc20 	bl	80012d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a98:	f000 f84c 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9c:	f000 f8e8 	bl	8000c70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000aa0:	f000 f88e 	bl	8000bc0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000aa4:	f000 f8ba 	bl	8000c1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000aa8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aac:	f000 fc76 	bl	800139c <HAL_Delay>
  MPU6050_Init(&hi2c1);
 8000ab0:	481b      	ldr	r0, [pc, #108]	@ (8000b20 <main+0x98>)
 8000ab2:	f000 f911 	bl	8000cd8 <MPU6050_Init>
  HAL_Delay(100);
 8000ab6:	2064      	movs	r0, #100	@ 0x64
 8000ab8:	f000 fc70 	bl	800139c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8000abc:	4919      	ldr	r1, [pc, #100]	@ (8000b24 <main+0x9c>)
 8000abe:	4818      	ldr	r0, [pc, #96]	@ (8000b20 <main+0x98>)
 8000ac0:	f000 f968 	bl	8000d94 <MPU6050_Read_Accel>
	 MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 8000ac4:	4917      	ldr	r1, [pc, #92]	@ (8000b24 <main+0x9c>)
 8000ac6:	4816      	ldr	r0, [pc, #88]	@ (8000b20 <main+0x98>)
 8000ac8:	f000 f9ca 	bl	8000e60 <MPU6050_Read_Gyro>
	 HAL_Delay(100);
 8000acc:	2064      	movs	r0, #100	@ 0x64
 8000ace:	f000 fc65 	bl	800139c <HAL_Delay>
	 sprintf(RX_buffer, "Gx = %0.3lf, Gy = %0.3lf, Ax = %0.3f, Ay = %0.3f \n\r ", MPU6050.Gx, MPU6050.Gy, MPU6050.Ax, MPU6050.Ay);
 8000ad2:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <main+0x9c>)
 8000ad4:	e9d3 890a 	ldrd	r8, r9, [r3, #40]	@ 0x28
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <main+0x9c>)
 8000ada:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8000ade:	4911      	ldr	r1, [pc, #68]	@ (8000b24 <main+0x9c>)
 8000ae0:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8000ae4:	4c0f      	ldr	r4, [pc, #60]	@ (8000b24 <main+0x9c>)
 8000ae6:	f104 0510 	add.w	r5, r4, #16
 8000aea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8000aee:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000af6:	e9cd 2300 	strd	r2, r3, [sp]
 8000afa:	4642      	mov	r2, r8
 8000afc:	464b      	mov	r3, r9
 8000afe:	490a      	ldr	r1, [pc, #40]	@ (8000b28 <main+0xa0>)
 8000b00:	480a      	ldr	r0, [pc, #40]	@ (8000b2c <main+0xa4>)
 8000b02:	f003 fa8f 	bl	8004024 <siprintf>
	//  sprintf(RX_buffer, "hello \r \n");
	 HAL_UART_Transmit(&huart2, RX_buffer, 100, 2000);
 8000b06:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b0a:	2264      	movs	r2, #100	@ 0x64
 8000b0c:	4907      	ldr	r1, [pc, #28]	@ (8000b2c <main+0xa4>)
 8000b0e:	4808      	ldr	r0, [pc, #32]	@ (8000b30 <main+0xa8>)
 8000b10:	f002 fb96 	bl	8003240 <HAL_UART_Transmit>
	 HAL_Delay(2000);
 8000b14:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b18:	f000 fc40 	bl	800139c <HAL_Delay>
	 MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8000b1c:	bf00      	nop
 8000b1e:	e7cd      	b.n	8000abc <main+0x34>
 8000b20:	200001f4 	.word	0x200001f4
 8000b24:	20000290 	.word	0x20000290
 8000b28:	080062a8 	.word	0x080062a8
 8000b2c:	200002f0 	.word	0x200002f0
 8000b30:	20000248 	.word	0x20000248

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b090      	sub	sp, #64	@ 0x40
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0318 	add.w	r3, r7, #24
 8000b3e:	2228      	movs	r2, #40	@ 0x28
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 fad1 	bl	80040ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b64:	2301      	movs	r3, #1
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b72:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 feff 	bl	8002980 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b88:	f000 f8a0 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 f96c 	bl	8002e84 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bb2:	f000 f88b 	bl	8000ccc <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3740      	adds	r7, #64	@ 0x40
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <MX_I2C1_Init+0x50>)
 8000bc6:	4a13      	ldr	r2, [pc, #76]	@ (8000c14 <MX_I2C1_Init+0x54>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_I2C1_Init+0x50>)
 8000bcc:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <MX_I2C1_Init+0x58>)
 8000bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <MX_I2C1_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_I2C1_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <MX_I2C1_Init+0x50>)
 8000bde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000be2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <MX_I2C1_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <MX_I2C1_Init+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <MX_I2C1_Init+0x50>)
 8000bfe:	f000 fe59 	bl	80018b4 <HAL_I2C_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c08:	f000 f860 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200001f4 	.word	0x200001f4
 8000c14:	40005400 	.word	0x40005400
 8000c18:	000186a0 	.word	0x000186a0

08000c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	@ (8000c6c <MX_USART2_UART_Init+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c54:	f002 faa4 	bl	80031a0 <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c5e:	f000 f835 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000248 	.word	0x20000248
 8000c6c:	40004400 	.word	0x40004400

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c76:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <MX_GPIO_Init+0x58>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	4a13      	ldr	r2, [pc, #76]	@ (8000cc8 <MX_GPIO_Init+0x58>)
 8000c7c:	f043 0320 	orr.w	r3, r3, #32
 8000c80:	6193      	str	r3, [r2, #24]
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <MX_GPIO_Init+0x58>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	f003 0320 	and.w	r3, r3, #32
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_GPIO_Init+0x58>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <MX_GPIO_Init+0x58>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6193      	str	r3, [r2, #24]
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <MX_GPIO_Init+0x58>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <MX_GPIO_Init+0x58>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	4a07      	ldr	r2, [pc, #28]	@ (8000cc8 <MX_GPIO_Init+0x58>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6193      	str	r3, [r2, #24]
 8000cb2:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <MX_GPIO_Init+0x58>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <Error_Handler+0x8>

08000cd8 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af04      	add	r7, sp, #16
 8000cde:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

   HAL_StatusTypeDef ErrorI2CInit =  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000ce0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce4:	9302      	str	r3, [sp, #8]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	9301      	str	r3, [sp, #4]
 8000cea:	f107 030e 	add.w	r3, r7, #14
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	2275      	movs	r2, #117	@ 0x75
 8000cf4:	21d0      	movs	r1, #208	@ 0xd0
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f001 f81a 	bl	8001d30 <HAL_I2C_Mem_Read>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	73fb      	strb	r3, [r7, #15]

    if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 8000d00:	7bbb      	ldrb	r3, [r7, #14]
 8000d02:	2b68      	cmp	r3, #104	@ 0x68
 8000d04:	d141      	bne.n	8000d8a <MPU6050_Init+0xb2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0e:	9302      	str	r3, [sp, #8]
 8000d10:	2301      	movs	r3, #1
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	f107 030d 	add.w	r3, r7, #13
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	226b      	movs	r2, #107	@ 0x6b
 8000d1e:	21d0      	movs	r1, #208	@ 0xd0
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 ff0b 	bl	8001b3c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000d26:	2307      	movs	r3, #7
 8000d28:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2e:	9302      	str	r3, [sp, #8]
 8000d30:	2301      	movs	r3, #1
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	f107 030d 	add.w	r3, r7, #13
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	2219      	movs	r2, #25
 8000d3e:	21d0      	movs	r1, #208	@ 0xd0
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 fefb 	bl	8001b3c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4e:	9302      	str	r3, [sp, #8]
 8000d50:	2301      	movs	r3, #1
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	f107 030d 	add.w	r3, r7, #13
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	221c      	movs	r2, #28
 8000d5e:	21d0      	movs	r1, #208	@ 0xd0
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f000 feeb 	bl	8001b3c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000d66:	2300      	movs	r3, #0
 8000d68:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	2301      	movs	r3, #1
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	f107 030d 	add.w	r3, r7, #13
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	221b      	movs	r2, #27
 8000d7e:	21d0      	movs	r1, #208	@ 0xd0
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 fedb 	bl	8001b3c <HAL_I2C_Mem_Write>
        return 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <MPU6050_Init+0xb4>
    }
    return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af04      	add	r7, sp, #16
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8000d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da2:	9302      	str	r3, [sp, #8]
 8000da4:	2306      	movs	r3, #6
 8000da6:	9301      	str	r3, [sp, #4]
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2301      	movs	r3, #1
 8000db0:	223b      	movs	r2, #59	@ 0x3b
 8000db2:	21d0      	movs	r1, #208	@ 0xd0
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f000 ffbb 	bl	8001d30 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8000dba:	7a3b      	ldrb	r3, [r7, #8]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	7a7b      	ldrb	r3, [r7, #9]
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b21a      	sxth	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8000dcc:	7abb      	ldrb	r3, [r7, #10]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8000dde:	7b3b      	ldrb	r3, [r7, #12]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	7b7b      	ldrb	r3, [r7, #13]
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fb04 	bl	8000404 <__aeabi_i2d>
 8000dfc:	f04f 0200 	mov.w	r2, #0
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MPU6050_Read_Accel+0xc4>)
 8000e02:	f7ff fc93 	bl	800072c <__aeabi_ddiv>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff faf4 	bl	8000404 <__aeabi_i2d>
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <MPU6050_Read_Accel+0xc4>)
 8000e22:	f7ff fc83 	bl	800072c <__aeabi_ddiv>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / 16384.0;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fae4 	bl	8000404 <__aeabi_i2d>
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <MPU6050_Read_Accel+0xc4>)
 8000e42:	f7ff fc73 	bl	800072c <__aeabi_ddiv>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40d00000 	.word	0x40d00000
 8000e5c:	00000000 	.word	0x00000000

08000e60 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af04      	add	r7, sp, #16
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8000e6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	2306      	movs	r3, #6
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	2243      	movs	r2, #67	@ 0x43
 8000e7e:	21d0      	movs	r1, #208	@ 0xd0
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 ff55 	bl	8001d30 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8000e86:	7a3b      	ldrb	r3, [r7, #8]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	7a7b      	ldrb	r3, [r7, #9]
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8000e98:	7abb      	ldrb	r3, [r7, #10]
 8000e9a:	021b      	lsls	r3, r3, #8
 8000e9c:	b21a      	sxth	r2, r3
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8000eaa:	7b3b      	ldrb	r3, [r7, #12]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	7b7b      	ldrb	r3, [r7, #13]
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	849a      	strh	r2, [r3, #36]	@ 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fa9e 	bl	8000404 <__aeabi_i2d>
 8000ec8:	a317      	add	r3, pc, #92	@ (adr r3, 8000f28 <MPU6050_Read_Gyro+0xc8>)
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	f7ff fc2d 	bl	800072c <__aeabi_ddiv>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	6839      	ldr	r1, [r7, #0]
 8000ed8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fa8e 	bl	8000404 <__aeabi_i2d>
 8000ee8:	a30f      	add	r3, pc, #60	@ (adr r3, 8000f28 <MPU6050_Read_Gyro+0xc8>)
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	f7ff fc1d 	bl	800072c <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fa7e 	bl	8000404 <__aeabi_i2d>
 8000f08:	a307      	add	r3, pc, #28	@ (adr r3, 8000f28 <MPU6050_Read_Gyro+0xc8>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff fc0d 	bl	800072c <__aeabi_ddiv>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	6839      	ldr	r1, [r7, #0]
 8000f18:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	f3af 8000 	nop.w
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	40606000 	.word	0x40606000

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_MspInit+0x5c>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	4a14      	ldr	r2, [pc, #80]	@ (8000f8c <HAL_MspInit+0x5c>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6193      	str	r3, [r2, #24]
 8000f42:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_MspInit+0x5c>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_MspInit+0x5c>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <HAL_MspInit+0x5c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <HAL_MspInit+0x5c>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_MspInit+0x60>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <HAL_MspInit+0x60>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000

08000f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a15      	ldr	r2, [pc, #84]	@ (8001004 <HAL_I2C_MspInit+0x70>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d123      	bne.n	8000ffc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <HAL_I2C_MspInit+0x74>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a13      	ldr	r2, [pc, #76]	@ (8001008 <HAL_I2C_MspInit+0x74>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <HAL_I2C_MspInit+0x74>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fcc:	23c0      	movs	r3, #192	@ 0xc0
 8000fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd0:	2312      	movs	r3, #18
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480b      	ldr	r0, [pc, #44]	@ (800100c <HAL_I2C_MspInit+0x78>)
 8000fe0:	f000 fae4 	bl	80015ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <HAL_I2C_MspInit+0x74>)
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	@ (8001008 <HAL_I2C_MspInit+0x74>)
 8000fea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fee:	61d3      	str	r3, [r2, #28]
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <HAL_I2C_MspInit+0x74>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40005400 	.word	0x40005400
 8001008:	40021000 	.word	0x40021000
 800100c:	40010c00 	.word	0x40010c00

08001010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <HAL_UART_MspInit+0x88>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d12f      	bne.n	8001090 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001030:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <HAL_UART_MspInit+0x8c>)
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	4a19      	ldr	r2, [pc, #100]	@ (800109c <HAL_UART_MspInit+0x8c>)
 8001036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103a:	61d3      	str	r3, [r2, #28]
 800103c:	4b17      	ldr	r3, [pc, #92]	@ (800109c <HAL_UART_MspInit+0x8c>)
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b14      	ldr	r3, [pc, #80]	@ (800109c <HAL_UART_MspInit+0x8c>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a13      	ldr	r2, [pc, #76]	@ (800109c <HAL_UART_MspInit+0x8c>)
 800104e:	f043 0304 	orr.w	r3, r3, #4
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b11      	ldr	r3, [pc, #68]	@ (800109c <HAL_UART_MspInit+0x8c>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001060:	2304      	movs	r3, #4
 8001062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <HAL_UART_MspInit+0x90>)
 8001074:	f000 fa9a 	bl	80015ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001078:	2308      	movs	r3, #8
 800107a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4619      	mov	r1, r3
 800108a:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <HAL_UART_MspInit+0x90>)
 800108c:	f000 fa8e 	bl	80015ac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40004400 	.word	0x40004400
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010800 	.word	0x40010800

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <NMI_Handler+0x4>

080010ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <HardFault_Handler+0x4>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <MemManage_Handler+0x4>

080010bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <UsageFault_Handler+0x4>

080010cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f4:	f000 f936 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return 1;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <_kill>:

int _kill(int pid, int sig)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001114:	f003 f83c 	bl	8004190 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	2216      	movs	r2, #22
 800111c:	601a      	str	r2, [r3, #0]
  return -1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_exit>:

void _exit (int status)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001132:	f04f 31ff 	mov.w	r1, #4294967295
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffe7 	bl	800110a <_kill>
  while (1) {}    /* Make sure we hang here */
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <_exit+0x12>

08001140 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	e00a      	b.n	8001168 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001152:	f3af 8000 	nop.w
 8001156:	4601      	mov	r1, r0
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	60ba      	str	r2, [r7, #8]
 800115e:	b2ca      	uxtb	r2, r1
 8001160:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3301      	adds	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	dbf0      	blt.n	8001152 <_read+0x12>
  }

  return len;
 8001170:	687b      	ldr	r3, [r7, #4]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	e009      	b.n	80011a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	60ba      	str	r2, [r7, #8]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dbf1      	blt.n	800118c <_write+0x12>
  }
  return len;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_close>:

int _close(int file)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011d8:	605a      	str	r2, [r3, #4]
  return 0;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <_isatty>:

int _isatty(int file)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b085      	sub	sp, #20
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
	...

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	@ (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f002 ffa4 	bl	8004190 <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	@ (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20005000 	.word	0x20005000
 8001274:	00000400 	.word	0x00000400
 8001278:	20000354 	.word	0x20000354
 800127c:	200004a8 	.word	0x200004a8

08001280 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800128c:	f7ff fff8 	bl	8001280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001290:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001292:	490c      	ldr	r1, [pc, #48]	@ (80012c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001294:	4a0c      	ldr	r2, [pc, #48]	@ (80012c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a09      	ldr	r2, [pc, #36]	@ (80012cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012a8:	4c09      	ldr	r4, [pc, #36]	@ (80012d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b6:	f002 ff71 	bl	800419c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ba:	f7ff fbe5 	bl	8000a88 <main>
  bx lr
 80012be:	4770      	bx	lr
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80012c8:	08006688 	.word	0x08006688
  ldr r2, =_sbss
 80012cc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80012d0:	200004a8 	.word	0x200004a8

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <HAL_Init+0x28>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <HAL_Init+0x28>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f92b 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	200f      	movs	r0, #15
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff fe1c 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f935 	bl	8001592 <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f90b 	bl	800155a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	@ (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	20000008 	.word	0x20000008
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_IncTick+0x1c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <HAL_IncTick+0x20>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a03      	ldr	r2, [pc, #12]	@ (8001384 <HAL_IncTick+0x20>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	20000008 	.word	0x20000008
 8001384:	20000358 	.word	0x20000358

08001388 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b02      	ldr	r3, [pc, #8]	@ (8001398 <HAL_GetTick+0x10>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	20000358 	.word	0x20000358

0800139c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff fff0 	bl	8001388 <HAL_GetTick>
 80013a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b4:	d005      	beq.n	80013c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_Delay+0x44>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c2:	bf00      	nop
 80013c4:	f7ff ffe0 	bl	8001388 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d8f7      	bhi.n	80013c4 <HAL_Delay+0x28>
  {
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000008 	.word	0x20000008

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	@ (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	@ (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	@ 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	@ 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	@ (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f7ff ff90 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff49 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff5e 	bl	800142c <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff90 	bl	800149c <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5f 	bl	8001448 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffb0 	bl	8001500 <SysTick_Config>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b08b      	sub	sp, #44	@ 0x2c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015be:	e169      	b.n	8001894 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015c0:	2201      	movs	r2, #1
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	429a      	cmp	r2, r3
 80015da:	f040 8158 	bne.w	800188e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4a9a      	ldr	r2, [pc, #616]	@ (800184c <HAL_GPIO_Init+0x2a0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d05e      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 80015e8:	4a98      	ldr	r2, [pc, #608]	@ (800184c <HAL_GPIO_Init+0x2a0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d875      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 80015ee:	4a98      	ldr	r2, [pc, #608]	@ (8001850 <HAL_GPIO_Init+0x2a4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d058      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 80015f4:	4a96      	ldr	r2, [pc, #600]	@ (8001850 <HAL_GPIO_Init+0x2a4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d86f      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 80015fa:	4a96      	ldr	r2, [pc, #600]	@ (8001854 <HAL_GPIO_Init+0x2a8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d052      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 8001600:	4a94      	ldr	r2, [pc, #592]	@ (8001854 <HAL_GPIO_Init+0x2a8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d869      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 8001606:	4a94      	ldr	r2, [pc, #592]	@ (8001858 <HAL_GPIO_Init+0x2ac>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d04c      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 800160c:	4a92      	ldr	r2, [pc, #584]	@ (8001858 <HAL_GPIO_Init+0x2ac>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d863      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 8001612:	4a92      	ldr	r2, [pc, #584]	@ (800185c <HAL_GPIO_Init+0x2b0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d046      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 8001618:	4a90      	ldr	r2, [pc, #576]	@ (800185c <HAL_GPIO_Init+0x2b0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d85d      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 800161e:	2b12      	cmp	r3, #18
 8001620:	d82a      	bhi.n	8001678 <HAL_GPIO_Init+0xcc>
 8001622:	2b12      	cmp	r3, #18
 8001624:	d859      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 8001626:	a201      	add	r2, pc, #4	@ (adr r2, 800162c <HAL_GPIO_Init+0x80>)
 8001628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162c:	080016a7 	.word	0x080016a7
 8001630:	08001681 	.word	0x08001681
 8001634:	08001693 	.word	0x08001693
 8001638:	080016d5 	.word	0x080016d5
 800163c:	080016db 	.word	0x080016db
 8001640:	080016db 	.word	0x080016db
 8001644:	080016db 	.word	0x080016db
 8001648:	080016db 	.word	0x080016db
 800164c:	080016db 	.word	0x080016db
 8001650:	080016db 	.word	0x080016db
 8001654:	080016db 	.word	0x080016db
 8001658:	080016db 	.word	0x080016db
 800165c:	080016db 	.word	0x080016db
 8001660:	080016db 	.word	0x080016db
 8001664:	080016db 	.word	0x080016db
 8001668:	080016db 	.word	0x080016db
 800166c:	080016db 	.word	0x080016db
 8001670:	08001689 	.word	0x08001689
 8001674:	0800169d 	.word	0x0800169d
 8001678:	4a79      	ldr	r2, [pc, #484]	@ (8001860 <HAL_GPIO_Init+0x2b4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800167e:	e02c      	b.n	80016da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	623b      	str	r3, [r7, #32]
          break;
 8001686:	e029      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	3304      	adds	r3, #4
 800168e:	623b      	str	r3, [r7, #32]
          break;
 8001690:	e024      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	3308      	adds	r3, #8
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e01f      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	330c      	adds	r3, #12
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	e01a      	b.n	80016dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ae:	2304      	movs	r3, #4
 80016b0:	623b      	str	r3, [r7, #32]
          break;
 80016b2:	e013      	b.n	80016dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d105      	bne.n	80016c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016bc:	2308      	movs	r3, #8
 80016be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	611a      	str	r2, [r3, #16]
          break;
 80016c6:	e009      	b.n	80016dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c8:	2308      	movs	r3, #8
 80016ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	615a      	str	r2, [r3, #20]
          break;
 80016d2:	e003      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
          break;
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x130>
          break;
 80016da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2bff      	cmp	r3, #255	@ 0xff
 80016e0:	d801      	bhi.n	80016e6 <HAL_GPIO_Init+0x13a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	e001      	b.n	80016ea <HAL_GPIO_Init+0x13e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2bff      	cmp	r3, #255	@ 0xff
 80016f0:	d802      	bhi.n	80016f8 <HAL_GPIO_Init+0x14c>
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	e002      	b.n	80016fe <HAL_GPIO_Init+0x152>
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	3b08      	subs	r3, #8
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	210f      	movs	r1, #15
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	401a      	ands	r2, r3
 8001710:	6a39      	ldr	r1, [r7, #32]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	431a      	orrs	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80b1 	beq.w	800188e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800172c:	4b4d      	ldr	r3, [pc, #308]	@ (8001864 <HAL_GPIO_Init+0x2b8>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a4c      	ldr	r2, [pc, #304]	@ (8001864 <HAL_GPIO_Init+0x2b8>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b4a      	ldr	r3, [pc, #296]	@ (8001864 <HAL_GPIO_Init+0x2b8>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001744:	4a48      	ldr	r2, [pc, #288]	@ (8001868 <HAL_GPIO_Init+0x2bc>)
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a40      	ldr	r2, [pc, #256]	@ (800186c <HAL_GPIO_Init+0x2c0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d013      	beq.n	8001798 <HAL_GPIO_Init+0x1ec>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a3f      	ldr	r2, [pc, #252]	@ (8001870 <HAL_GPIO_Init+0x2c4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00d      	beq.n	8001794 <HAL_GPIO_Init+0x1e8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a3e      	ldr	r2, [pc, #248]	@ (8001874 <HAL_GPIO_Init+0x2c8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d007      	beq.n	8001790 <HAL_GPIO_Init+0x1e4>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a3d      	ldr	r2, [pc, #244]	@ (8001878 <HAL_GPIO_Init+0x2cc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_GPIO_Init+0x1e0>
 8001788:	2303      	movs	r3, #3
 800178a:	e006      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 800178c:	2304      	movs	r3, #4
 800178e:	e004      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001790:	2302      	movs	r3, #2
 8001792:	e002      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001798:	2300      	movs	r3, #0
 800179a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179c:	f002 0203 	and.w	r2, r2, #3
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	4093      	lsls	r3, r2
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017aa:	492f      	ldr	r1, [pc, #188]	@ (8001868 <HAL_GPIO_Init+0x2bc>)
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017c4:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	492c      	ldr	r1, [pc, #176]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017d2:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	4928      	ldr	r1, [pc, #160]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ec:	4b23      	ldr	r3, [pc, #140]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	4922      	ldr	r1, [pc, #136]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60cb      	str	r3, [r1, #12]
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017fa:	4b20      	ldr	r3, [pc, #128]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	43db      	mvns	r3, r3
 8001802:	491e      	ldr	r1, [pc, #120]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 8001804:	4013      	ands	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4918      	ldr	r1, [pc, #96]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001822:	4b16      	ldr	r3, [pc, #88]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	43db      	mvns	r3, r3
 800182a:	4914      	ldr	r1, [pc, #80]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 800182c:	4013      	ands	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d021      	beq.n	8001880 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800183c:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	490e      	ldr	r1, [pc, #56]	@ (800187c <HAL_GPIO_Init+0x2d0>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e021      	b.n	800188e <HAL_GPIO_Init+0x2e2>
 800184a:	bf00      	nop
 800184c:	10320000 	.word	0x10320000
 8001850:	10310000 	.word	0x10310000
 8001854:	10220000 	.word	0x10220000
 8001858:	10210000 	.word	0x10210000
 800185c:	10120000 	.word	0x10120000
 8001860:	10110000 	.word	0x10110000
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000
 800186c:	40010800 	.word	0x40010800
 8001870:	40010c00 	.word	0x40010c00
 8001874:	40011000 	.word	0x40011000
 8001878:	40011400 	.word	0x40011400
 800187c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001880:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <HAL_GPIO_Init+0x304>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	43db      	mvns	r3, r3
 8001888:	4909      	ldr	r1, [pc, #36]	@ (80018b0 <HAL_GPIO_Init+0x304>)
 800188a:	4013      	ands	r3, r2
 800188c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	3301      	adds	r3, #1
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	fa22 f303 	lsr.w	r3, r2, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f47f ae8e 	bne.w	80015c0 <HAL_GPIO_Init+0x14>
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	372c      	adds	r7, #44	@ 0x2c
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e12b      	b.n	8001b1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fb5a 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2224      	movs	r2, #36	@ 0x24
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0201 	bic.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001906:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001916:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001918:	f001 fbfc 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 800191c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4a81      	ldr	r2, [pc, #516]	@ (8001b28 <HAL_I2C_Init+0x274>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d807      	bhi.n	8001938 <HAL_I2C_Init+0x84>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4a80      	ldr	r2, [pc, #512]	@ (8001b2c <HAL_I2C_Init+0x278>)
 800192c:	4293      	cmp	r3, r2
 800192e:	bf94      	ite	ls
 8001930:	2301      	movls	r3, #1
 8001932:	2300      	movhi	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	e006      	b.n	8001946 <HAL_I2C_Init+0x92>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4a7d      	ldr	r2, [pc, #500]	@ (8001b30 <HAL_I2C_Init+0x27c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	bf94      	ite	ls
 8001940:	2301      	movls	r3, #1
 8001942:	2300      	movhi	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e0e7      	b.n	8001b1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4a78      	ldr	r2, [pc, #480]	@ (8001b34 <HAL_I2C_Init+0x280>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	0c9b      	lsrs	r3, r3, #18
 8001958:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	430a      	orrs	r2, r1
 800196c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a6a      	ldr	r2, [pc, #424]	@ (8001b28 <HAL_I2C_Init+0x274>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d802      	bhi.n	8001988 <HAL_I2C_Init+0xd4>
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3301      	adds	r3, #1
 8001986:	e009      	b.n	800199c <HAL_I2C_Init+0xe8>
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	4a69      	ldr	r2, [pc, #420]	@ (8001b38 <HAL_I2C_Init+0x284>)
 8001994:	fba2 2303 	umull	r2, r3, r2, r3
 8001998:	099b      	lsrs	r3, r3, #6
 800199a:	3301      	adds	r3, #1
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	495c      	ldr	r1, [pc, #368]	@ (8001b28 <HAL_I2C_Init+0x274>)
 80019b8:	428b      	cmp	r3, r1
 80019ba:	d819      	bhi.n	80019f0 <HAL_I2C_Init+0x13c>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1e59      	subs	r1, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ca:	1c59      	adds	r1, r3, #1
 80019cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019d0:	400b      	ands	r3, r1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <HAL_I2C_Init+0x138>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1e59      	subs	r1, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ea:	e051      	b.n	8001a90 <HAL_I2C_Init+0x1dc>
 80019ec:	2304      	movs	r3, #4
 80019ee:	e04f      	b.n	8001a90 <HAL_I2C_Init+0x1dc>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d111      	bne.n	8001a1c <HAL_I2C_Init+0x168>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1e58      	subs	r0, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	440b      	add	r3, r1
 8001a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	e012      	b.n	8001a42 <HAL_I2C_Init+0x18e>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1e58      	subs	r0, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	0099      	lsls	r1, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_Init+0x196>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e022      	b.n	8001a90 <HAL_I2C_Init+0x1dc>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10e      	bne.n	8001a70 <HAL_I2C_Init+0x1bc>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1e58      	subs	r0, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6859      	ldr	r1, [r3, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	440b      	add	r3, r1
 8001a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a6e:	e00f      	b.n	8001a90 <HAL_I2C_Init+0x1dc>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1e58      	subs	r0, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	0099      	lsls	r1, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a86:	3301      	adds	r3, #1
 8001a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	6809      	ldr	r1, [r1, #0]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69da      	ldr	r2, [r3, #28]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001abe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6911      	ldr	r1, [r2, #16]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68d2      	ldr	r2, [r2, #12]
 8001aca:	4311      	orrs	r1, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	000186a0 	.word	0x000186a0
 8001b2c:	001e847f 	.word	0x001e847f
 8001b30:	003d08ff 	.word	0x003d08ff
 8001b34:	431bde83 	.word	0x431bde83
 8001b38:	10624dd3 	.word	0x10624dd3

08001b3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	4608      	mov	r0, r1
 8001b46:	4611      	mov	r1, r2
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	817b      	strh	r3, [r7, #10]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	813b      	strh	r3, [r7, #8]
 8001b52:	4613      	mov	r3, r2
 8001b54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b56:	f7ff fc17 	bl	8001388 <HAL_GetTick>
 8001b5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b20      	cmp	r3, #32
 8001b66:	f040 80d9 	bne.w	8001d1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2319      	movs	r3, #25
 8001b70:	2201      	movs	r2, #1
 8001b72:	496d      	ldr	r1, [pc, #436]	@ (8001d28 <HAL_I2C_Mem_Write+0x1ec>)
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 fccd 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b80:	2302      	movs	r3, #2
 8001b82:	e0cc      	b.n	8001d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_I2C_Mem_Write+0x56>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e0c5      	b.n	8001d1e <HAL_I2C_Mem_Write+0x1e2>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d007      	beq.n	8001bb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2221      	movs	r2, #33	@ 0x21
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2240      	movs	r2, #64	@ 0x40
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a3a      	ldr	r2, [r7, #32]
 8001be2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4a4d      	ldr	r2, [pc, #308]	@ (8001d2c <HAL_I2C_Mem_Write+0x1f0>)
 8001bf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bfa:	88f8      	ldrh	r0, [r7, #6]
 8001bfc:	893a      	ldrh	r2, [r7, #8]
 8001bfe:	8979      	ldrh	r1, [r7, #10]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	4603      	mov	r3, r0
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fb04 	bl	8002218 <I2C_RequestMemoryWrite>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d052      	beq.n	8001cbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e081      	b.n	8001d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 fd92 	bl	8002748 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00d      	beq.n	8001c46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d107      	bne.n	8001c42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e06b      	b.n	8001d1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d11b      	bne.n	8001cbc <HAL_I2C_Mem_Write+0x180>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d017      	beq.n	8001cbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1aa      	bne.n	8001c1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 fd85 	bl	80027d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d107      	bne.n	8001cec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e016      	b.n	8001d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e000      	b.n	8001d1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
  }
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	00100002 	.word	0x00100002
 8001d2c:	ffff0000 	.word	0xffff0000

08001d30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	@ 0x30
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	4608      	mov	r0, r1
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4603      	mov	r3, r0
 8001d40:	817b      	strh	r3, [r7, #10]
 8001d42:	460b      	mov	r3, r1
 8001d44:	813b      	strh	r3, [r7, #8]
 8001d46:	4613      	mov	r3, r2
 8001d48:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d4e:	f7ff fb1b 	bl	8001388 <HAL_GetTick>
 8001d52:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b20      	cmp	r3, #32
 8001d5e:	f040 8250 	bne.w	8002202 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2319      	movs	r3, #25
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4982      	ldr	r1, [pc, #520]	@ (8001f74 <HAL_I2C_Mem_Read+0x244>)
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fbd1 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e243      	b.n	8002204 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_I2C_Mem_Read+0x5a>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e23c      	b.n	8002204 <HAL_I2C_Mem_Read+0x4d4>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d007      	beq.n	8001db0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2222      	movs	r2, #34	@ 0x22
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2240      	movs	r2, #64	@ 0x40
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4a62      	ldr	r2, [pc, #392]	@ (8001f78 <HAL_I2C_Mem_Read+0x248>)
 8001df0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001df2:	88f8      	ldrh	r0, [r7, #6]
 8001df4:	893a      	ldrh	r2, [r7, #8]
 8001df6:	8979      	ldrh	r1, [r7, #10]
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4603      	mov	r3, r0
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fa9e 	bl	8002344 <I2C_RequestMemoryRead>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e1f8      	b.n	8002204 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d113      	bne.n	8001e42 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e1cc      	b.n	80021dc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d11e      	bne.n	8001e88 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5a:	b672      	cpsid	i
}
 8001e5c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e84:	b662      	cpsie	i
}
 8001e86:	e035      	b.n	8001ef4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d11e      	bne.n	8001ece <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ec8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001eca:	b662      	cpsie	i
}
 8001ecc:	e012      	b.n	8001ef4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001edc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001ef4:	e172      	b.n	80021dc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	f200 811f 	bhi.w	800213e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d123      	bne.n	8001f50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 fcab 	bl	8002868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e173      	b.n	8002204 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f4e:	e145      	b.n	80021dc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d152      	bne.n	8001ffe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f5e:	2200      	movs	r2, #0
 8001f60:	4906      	ldr	r1, [pc, #24]	@ (8001f7c <HAL_I2C_Mem_Read+0x24c>)
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 fad6 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e148      	b.n	8002204 <HAL_I2C_Mem_Read+0x4d4>
 8001f72:	bf00      	nop
 8001f74:	00100002 	.word	0x00100002
 8001f78:	ffff0000 	.word	0xffff0000
 8001f7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001f80:	b672      	cpsid	i
}
 8001f82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001fc6:	b662      	cpsie	i
}
 8001fc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ffc:	e0ee      	b.n	80021dc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002004:	2200      	movs	r2, #0
 8002006:	4981      	ldr	r1, [pc, #516]	@ (800220c <HAL_I2C_Mem_Read+0x4dc>)
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 fa83 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0f5      	b.n	8002204 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002026:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002028:	b672      	cpsid	i
}
 800202a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800205e:	4b6c      	ldr	r3, [pc, #432]	@ (8002210 <HAL_I2C_Mem_Read+0x4e0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	08db      	lsrs	r3, r3, #3
 8002064:	4a6b      	ldr	r2, [pc, #428]	@ (8002214 <HAL_I2C_Mem_Read+0x4e4>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0a1a      	lsrs	r2, r3, #8
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00da      	lsls	r2, r3, #3
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	3b01      	subs	r3, #1
 800207c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d118      	bne.n	80020b6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f043 0220 	orr.w	r2, r3, #32
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80020a6:	b662      	cpsie	i
}
 80020a8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0a6      	b.n	8002204 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d1d9      	bne.n	8002078 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002106:	b662      	cpsie	i
}
 8002108:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800213c:	e04e      	b.n	80021dc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002140:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fb90 	bl	8002868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e058      	b.n	8002204 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b04      	cmp	r3, #4
 8002190:	d124      	bne.n	80021dc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002196:	2b03      	cmp	r3, #3
 8002198:	d107      	bne.n	80021aa <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021a8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f47f ae88 	bne.w	8001ef6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002202:	2302      	movs	r3, #2
  }
}
 8002204:	4618      	mov	r0, r3
 8002206:	3728      	adds	r7, #40	@ 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	00010004 	.word	0x00010004
 8002210:	20000000 	.word	0x20000000
 8002214:	14f8b589 	.word	0x14f8b589

08002218 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af02      	add	r7, sp, #8
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	4608      	mov	r0, r1
 8002222:	4611      	mov	r1, r2
 8002224:	461a      	mov	r2, r3
 8002226:	4603      	mov	r3, r0
 8002228:	817b      	strh	r3, [r7, #10]
 800222a:	460b      	mov	r3, r1
 800222c:	813b      	strh	r3, [r7, #8]
 800222e:	4613      	mov	r3, r2
 8002230:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002240:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	2200      	movs	r2, #0
 800224a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f960 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00d      	beq.n	8002276 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002268:	d103      	bne.n	8002272 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002270:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e05f      	b.n	8002336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002276:	897b      	ldrh	r3, [r7, #10]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002284:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	6a3a      	ldr	r2, [r7, #32]
 800228a:	492d      	ldr	r1, [pc, #180]	@ (8002340 <I2C_RequestMemoryWrite+0x128>)
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f9bb 	bl	8002608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e04c      	b.n	8002336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b4:	6a39      	ldr	r1, [r7, #32]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fa46 	bl	8002748 <I2C_WaitOnTXEFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00d      	beq.n	80022de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d107      	bne.n	80022da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e02b      	b.n	8002336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022e4:	893b      	ldrh	r3, [r7, #8]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	611a      	str	r2, [r3, #16]
 80022ee:	e021      	b.n	8002334 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022f0:	893b      	ldrh	r3, [r7, #8]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002300:	6a39      	ldr	r1, [r7, #32]
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fa20 	bl	8002748 <I2C_WaitOnTXEFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00d      	beq.n	800232a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	2b04      	cmp	r3, #4
 8002314:	d107      	bne.n	8002326 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002324:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e005      	b.n	8002336 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800232a:	893b      	ldrh	r3, [r7, #8]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	00010002 	.word	0x00010002

08002344 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	4608      	mov	r0, r1
 800234e:	4611      	mov	r1, r2
 8002350:	461a      	mov	r2, r3
 8002352:	4603      	mov	r3, r0
 8002354:	817b      	strh	r3, [r7, #10]
 8002356:	460b      	mov	r3, r1
 8002358:	813b      	strh	r3, [r7, #8]
 800235a:	4613      	mov	r3, r2
 800235c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800236c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800237c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	2200      	movs	r2, #0
 8002386:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f8c2 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00d      	beq.n	80023b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023a4:	d103      	bne.n	80023ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0aa      	b.n	8002508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023b2:	897b      	ldrh	r3, [r7, #10]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	4952      	ldr	r1, [pc, #328]	@ (8002510 <I2C_RequestMemoryRead+0x1cc>)
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f91d 	bl	8002608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e097      	b.n	8002508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f0:	6a39      	ldr	r1, [r7, #32]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f9a8 	bl	8002748 <I2C_WaitOnTXEFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00d      	beq.n	800241a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	2b04      	cmp	r3, #4
 8002404:	d107      	bne.n	8002416 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002414:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e076      	b.n	8002508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002420:	893b      	ldrh	r3, [r7, #8]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	e021      	b.n	8002470 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800242c:	893b      	ldrh	r3, [r7, #8]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	b29b      	uxth	r3, r3
 8002432:	b2da      	uxtb	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800243a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243c:	6a39      	ldr	r1, [r7, #32]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f982 	bl	8002748 <I2C_WaitOnTXEFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00d      	beq.n	8002466 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	2b04      	cmp	r3, #4
 8002450:	d107      	bne.n	8002462 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002460:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e050      	b.n	8002508 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002466:	893b      	ldrh	r3, [r7, #8]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002472:	6a39      	ldr	r1, [r7, #32]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f967 	bl	8002748 <I2C_WaitOnTXEFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00d      	beq.n	800249c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	2b04      	cmp	r3, #4
 8002486:	d107      	bne.n	8002498 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002496:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e035      	b.n	8002508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f82b 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024d2:	d103      	bne.n	80024dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e013      	b.n	8002508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024e0:	897b      	ldrh	r3, [r7, #10]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	6a3a      	ldr	r2, [r7, #32]
 80024f4:	4906      	ldr	r1, [pc, #24]	@ (8002510 <I2C_RequestMemoryRead+0x1cc>)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f886 	bl	8002608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	00010002 	.word	0x00010002

08002514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002524:	e048      	b.n	80025b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d044      	beq.n	80025b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252e:	f7fe ff2b 	bl	8001388 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <I2C_WaitOnFlagUntilTimeout+0x30>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d139      	bne.n	80025b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	0c1b      	lsrs	r3, r3, #16
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d10d      	bne.n	800256a <I2C_WaitOnFlagUntilTimeout+0x56>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	43da      	mvns	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4013      	ands	r3, r2
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	e00c      	b.n	8002584 <I2C_WaitOnFlagUntilTimeout+0x70>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	43da      	mvns	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4013      	ands	r3, r2
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	429a      	cmp	r2, r3
 8002588:	d116      	bne.n	80025b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	f043 0220 	orr.w	r2, r3, #32
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e023      	b.n	8002600 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	0c1b      	lsrs	r3, r3, #16
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d10d      	bne.n	80025de <I2C_WaitOnFlagUntilTimeout+0xca>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	43da      	mvns	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4013      	ands	r3, r2
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	e00c      	b.n	80025f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	43da      	mvns	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	4013      	ands	r3, r2
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d093      	beq.n	8002526 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002616:	e071      	b.n	80026fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002626:	d123      	bne.n	8002670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002636:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002640:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f043 0204 	orr.w	r2, r3, #4
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e067      	b.n	8002740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002676:	d041      	beq.n	80026fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002678:	f7fe fe86 	bl	8001388 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	429a      	cmp	r2, r3
 8002686:	d302      	bcc.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d136      	bne.n	80026fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10c      	bne.n	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4013      	ands	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e00b      	b.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	43da      	mvns	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4013      	ands	r3, r2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e021      	b.n	8002740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	0c1b      	lsrs	r3, r3, #16
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10c      	bne.n	8002720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	43da      	mvns	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4013      	ands	r3, r2
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	e00b      	b.n	8002738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4013      	ands	r3, r2
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	bf14      	ite	ne
 8002732:	2301      	movne	r3, #1
 8002734:	2300      	moveq	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	f47f af6d 	bne.w	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002754:	e034      	b.n	80027c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f8e3 	bl	8002922 <I2C_IsAcknowledgeFailed>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e034      	b.n	80027d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d028      	beq.n	80027c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276e:	f7fe fe0b 	bl	8001388 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d11d      	bne.n	80027c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800278e:	2b80      	cmp	r3, #128	@ 0x80
 8002790:	d016      	beq.n	80027c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	f043 0220 	orr.w	r2, r3, #32
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e007      	b.n	80027d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ca:	2b80      	cmp	r3, #128	@ 0x80
 80027cc:	d1c3      	bne.n	8002756 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027e4:	e034      	b.n	8002850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f89b 	bl	8002922 <I2C_IsAcknowledgeFailed>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e034      	b.n	8002860 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d028      	beq.n	8002850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fe:	f7fe fdc3 	bl	8001388 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	429a      	cmp	r2, r3
 800280c:	d302      	bcc.n	8002814 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d11d      	bne.n	8002850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b04      	cmp	r3, #4
 8002820:	d016      	beq.n	8002850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	f043 0220 	orr.w	r2, r3, #32
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e007      	b.n	8002860 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b04      	cmp	r3, #4
 800285c:	d1c3      	bne.n	80027e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002874:	e049      	b.n	800290a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b10      	cmp	r3, #16
 8002882:	d119      	bne.n	80028b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0210 	mvn.w	r2, #16
 800288c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e030      	b.n	800291a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b8:	f7fe fd66 	bl	8001388 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d302      	bcc.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d11d      	bne.n	800290a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d8:	2b40      	cmp	r3, #64	@ 0x40
 80028da:	d016      	beq.n	800290a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f043 0220 	orr.w	r2, r3, #32
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e007      	b.n	800291a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002914:	2b40      	cmp	r3, #64	@ 0x40
 8002916:	d1ae      	bne.n	8002876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002938:	d11b      	bne.n	8002972 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002942:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f043 0204 	orr.w	r2, r3, #4
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
	...

08002980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e272      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8087 	beq.w	8002aae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a0:	4b92      	ldr	r3, [pc, #584]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d00c      	beq.n	80029c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029ac:	4b8f      	ldr	r3, [pc, #572]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d112      	bne.n	80029de <HAL_RCC_OscConfig+0x5e>
 80029b8:	4b8c      	ldr	r3, [pc, #560]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c4:	d10b      	bne.n	80029de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c6:	4b89      	ldr	r3, [pc, #548]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d06c      	beq.n	8002aac <HAL_RCC_OscConfig+0x12c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d168      	bne.n	8002aac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e24c      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x76>
 80029e8:	4b80      	ldr	r3, [pc, #512]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a7f      	ldr	r2, [pc, #508]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e02e      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x98>
 80029fe:	4b7b      	ldr	r3, [pc, #492]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a7a      	ldr	r2, [pc, #488]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b78      	ldr	r3, [pc, #480]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a77      	ldr	r2, [pc, #476]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e01d      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0xbc>
 8002a22:	4b72      	ldr	r3, [pc, #456]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a71      	ldr	r2, [pc, #452]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b6f      	ldr	r3, [pc, #444]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a6e      	ldr	r2, [pc, #440]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 8002a3c:	4b6b      	ldr	r3, [pc, #428]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a6a      	ldr	r2, [pc, #424]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b68      	ldr	r3, [pc, #416]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a67      	ldr	r2, [pc, #412]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fc94 	bl	8001388 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe fc90 	bl	8001388 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	@ 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e200      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	4b5d      	ldr	r3, [pc, #372]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0xe4>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fc80 	bl	8001388 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fc7c 	bl	8001388 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	@ 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1ec      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	4b53      	ldr	r3, [pc, #332]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x10c>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d063      	beq.n	8002b82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aba:	4b4c      	ldr	r3, [pc, #304]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ac6:	4b49      	ldr	r3, [pc, #292]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x18c>
 8002ad2:	4b46      	ldr	r3, [pc, #280]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	4b43      	ldr	r3, [pc, #268]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x176>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e1c0      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4939      	ldr	r1, [pc, #228]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	e03a      	b.n	8002b82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b14:	4b36      	ldr	r3, [pc, #216]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fc35 	bl	8001388 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b22:	f7fe fc31 	bl	8001388 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1a1      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	4b2d      	ldr	r3, [pc, #180]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b2a      	ldr	r3, [pc, #168]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4927      	ldr	r1, [pc, #156]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b26      	ldr	r3, [pc, #152]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fc14 	bl	8001388 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b64:	f7fe fc10 	bl	8001388 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e180      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d03a      	beq.n	8002c04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d019      	beq.n	8002bca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b96:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <HAL_RCC_OscConfig+0x274>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9c:	f7fe fbf4 	bl	8001388 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7fe fbf0 	bl	8001388 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e160      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	f000 face 	bl	8003164 <RCC_Delay>
 8002bc8:	e01c      	b.n	8002c04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bca:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd0:	f7fe fbda 	bl	8001388 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd6:	e00f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd8:	f7fe fbd6 	bl	8001388 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d908      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e146      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	42420000 	.word	0x42420000
 8002bf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	4b92      	ldr	r3, [pc, #584]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e9      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a6 	beq.w	8002d5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c16:	4b8b      	ldr	r3, [pc, #556]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10d      	bne.n	8002c3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	4b88      	ldr	r3, [pc, #544]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	4a87      	ldr	r2, [pc, #540]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	61d3      	str	r3, [r2, #28]
 8002c2e:	4b85      	ldr	r3, [pc, #532]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b82      	ldr	r3, [pc, #520]	@ (8002e48 <HAL_RCC_OscConfig+0x4c8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d118      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e48 <HAL_RCC_OscConfig+0x4c8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e48 <HAL_RCC_OscConfig+0x4c8>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c56:	f7fe fb97 	bl	8001388 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7fe fb93 	bl	8001388 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b64      	cmp	r3, #100	@ 0x64
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e103      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b75      	ldr	r3, [pc, #468]	@ (8002e48 <HAL_RCC_OscConfig+0x4c8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x312>
 8002c84:	4b6f      	ldr	r3, [pc, #444]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a6e      	ldr	r2, [pc, #440]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6213      	str	r3, [r2, #32]
 8002c90:	e02d      	b.n	8002cee <HAL_RCC_OscConfig+0x36e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x334>
 8002c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4a69      	ldr	r2, [pc, #420]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	6213      	str	r3, [r2, #32]
 8002ca6:	4b67      	ldr	r3, [pc, #412]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4a66      	ldr	r2, [pc, #408]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	f023 0304 	bic.w	r3, r3, #4
 8002cb0:	6213      	str	r3, [r2, #32]
 8002cb2:	e01c      	b.n	8002cee <HAL_RCC_OscConfig+0x36e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d10c      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x356>
 8002cbc:	4b61      	ldr	r3, [pc, #388]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4a60      	ldr	r2, [pc, #384]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	6213      	str	r3, [r2, #32]
 8002cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6213      	str	r3, [r2, #32]
 8002cd4:	e00b      	b.n	8002cee <HAL_RCC_OscConfig+0x36e>
 8002cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4a5a      	ldr	r2, [pc, #360]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	6213      	str	r3, [r2, #32]
 8002ce2:	4b58      	ldr	r3, [pc, #352]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a57      	ldr	r2, [pc, #348]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	f023 0304 	bic.w	r3, r3, #4
 8002cec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d015      	beq.n	8002d22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf6:	f7fe fb47 	bl	8001388 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7fe fb43 	bl	8001388 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e0b1      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	4b4b      	ldr	r3, [pc, #300]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ee      	beq.n	8002cfe <HAL_RCC_OscConfig+0x37e>
 8002d20:	e014      	b.n	8002d4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fb31 	bl	8001388 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe fb2d 	bl	8001388 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e09b      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d40:	4b40      	ldr	r3, [pc, #256]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ee      	bne.n	8002d2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d105      	bne.n	8002d5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d52:	4b3c      	ldr	r3, [pc, #240]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	4a3b      	ldr	r2, [pc, #236]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8087 	beq.w	8002e76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d68:	4b36      	ldr	r3, [pc, #216]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 030c 	and.w	r3, r3, #12
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d061      	beq.n	8002e38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d146      	bne.n	8002e0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7c:	4b33      	ldr	r3, [pc, #204]	@ (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7fe fb01 	bl	8001388 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe fafd 	bl	8001388 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e06d      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9c:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f0      	bne.n	8002d8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db0:	d108      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002db2:	4b24      	ldr	r3, [pc, #144]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4921      	ldr	r1, [pc, #132]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a19      	ldr	r1, [r3, #32]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	491b      	ldr	r1, [pc, #108]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7fe fad1 	bl	8001388 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dea:	f7fe facd 	bl	8001388 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e03d      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x46a>
 8002e08:	e035      	b.n	8002e76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0a:	4b10      	ldr	r3, [pc, #64]	@ (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe faba 	bl	8001388 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fe fab6 	bl	8001388 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e026      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x498>
 8002e36:	e01e      	b.n	8002e76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e019      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e50:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <HAL_RCC_OscConfig+0x500>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000

08002e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0d0      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b6a      	ldr	r3, [pc, #424]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d910      	bls.n	8002ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b67      	ldr	r3, [pc, #412]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 0207 	bic.w	r2, r3, #7
 8002eae:	4965      	ldr	r1, [pc, #404]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b63      	ldr	r3, [pc, #396]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0b8      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d020      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee0:	4b59      	ldr	r3, [pc, #356]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a58      	ldr	r2, [pc, #352]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef8:	4b53      	ldr	r3, [pc, #332]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a52      	ldr	r2, [pc, #328]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f04:	4b50      	ldr	r3, [pc, #320]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	494d      	ldr	r1, [pc, #308]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d040      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d107      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	4b47      	ldr	r3, [pc, #284]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d115      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e07f      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f42:	4b41      	ldr	r3, [pc, #260]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e073      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f52:	4b3d      	ldr	r3, [pc, #244]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06b      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f62:	4b39      	ldr	r3, [pc, #228]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f023 0203 	bic.w	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4936      	ldr	r1, [pc, #216]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f74:	f7fe fa08 	bl	8001388 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7c:	f7fe fa04 	bl	8001388 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e053      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	4b2d      	ldr	r3, [pc, #180]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 020c 	and.w	r2, r3, #12
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1eb      	bne.n	8002f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b27      	ldr	r3, [pc, #156]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d210      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b24      	ldr	r3, [pc, #144]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	4922      	ldr	r1, [pc, #136]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e032      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe0:	4b19      	ldr	r3, [pc, #100]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4916      	ldr	r1, [pc, #88]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ffe:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	490e      	ldr	r1, [pc, #56]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003012:	f000 f821 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8003016:	4602      	mov	r2, r0
 8003018:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	490a      	ldr	r1, [pc, #40]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	5ccb      	ldrb	r3, [r1, r3]
 8003026:	fa22 f303 	lsr.w	r3, r2, r3
 800302a:	4a09      	ldr	r2, [pc, #36]	@ (8003050 <HAL_RCC_ClockConfig+0x1cc>)
 800302c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800302e:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <HAL_RCC_ClockConfig+0x1d0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe f966 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40022000 	.word	0x40022000
 8003048:	40021000 	.word	0x40021000
 800304c:	080062e0 	.word	0x080062e0
 8003050:	20000000 	.word	0x20000000
 8003054:	20000004 	.word	0x20000004

08003058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003072:	4b1e      	ldr	r3, [pc, #120]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b04      	cmp	r3, #4
 8003080:	d002      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x30>
 8003082:	2b08      	cmp	r3, #8
 8003084:	d003      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0x36>
 8003086:	e027      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003088:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800308a:	613b      	str	r3, [r7, #16]
      break;
 800308c:	e027      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	0c9b      	lsrs	r3, r3, #18
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	4a17      	ldr	r2, [pc, #92]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003098:	5cd3      	ldrb	r3, [r2, r3]
 800309a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030a6:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x94>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	0c5b      	lsrs	r3, r3, #17
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	4a11      	ldr	r2, [pc, #68]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a0d      	ldr	r2, [pc, #52]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ba:	fb03 f202 	mul.w	r2, r3, r2
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e004      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a0c      	ldr	r2, [pc, #48]	@ (80030fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80030cc:	fb02 f303 	mul.w	r3, r2, r3
 80030d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	613b      	str	r3, [r7, #16]
      break;
 80030d6:	e002      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80030da:	613b      	str	r3, [r7, #16]
      break;
 80030dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030de:	693b      	ldr	r3, [r7, #16]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	007a1200 	.word	0x007a1200
 80030f4:	080062f8 	.word	0x080062f8
 80030f8:	08006308 	.word	0x08006308
 80030fc:	003d0900 	.word	0x003d0900

08003100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003104:	4b02      	ldr	r3, [pc, #8]	@ (8003110 <HAL_RCC_GetHCLKFreq+0x10>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	20000000 	.word	0x20000000

08003114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003118:	f7ff fff2 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4903      	ldr	r1, [pc, #12]	@ (8003138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000
 8003138:	080062f0 	.word	0x080062f0

0800313c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003140:	f7ff ffde 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	@ (800315c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0adb      	lsrs	r3, r3, #11
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4903      	ldr	r1, [pc, #12]	@ (8003160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	080062f0 	.word	0x080062f0

08003164 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800316c:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <RCC_Delay+0x34>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <RCC_Delay+0x38>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0a5b      	lsrs	r3, r3, #9
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003180:	bf00      	nop
  }
  while (Delay --);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1e5a      	subs	r2, r3, #1
 8003186:	60fa      	str	r2, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f9      	bne.n	8003180 <RCC_Delay+0x1c>
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	20000000 	.word	0x20000000
 800319c:	10624dd3 	.word	0x10624dd3

080031a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e042      	b.n	8003238 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fd ff22 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2224      	movs	r2, #36	@ 0x24
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f971 	bl	80034cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003208:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003218:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	@ 0x28
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b20      	cmp	r3, #32
 800325e:	d175      	bne.n	800334c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_UART_Transmit+0x2c>
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e06e      	b.n	800334e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2221      	movs	r2, #33	@ 0x21
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800327e:	f7fe f883 	bl	8001388 <HAL_GetTick>
 8003282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	88fa      	ldrh	r2, [r7, #6]
 800328e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003298:	d108      	bne.n	80032ac <HAL_UART_Transmit+0x6c>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d104      	bne.n	80032ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	e003      	b.n	80032b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032b4:	e02e      	b.n	8003314 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	2180      	movs	r1, #128	@ 0x80
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f848 	bl	8003356 <UART_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e03a      	b.n	800334e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10b      	bne.n	80032f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	3302      	adds	r3, #2
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	e007      	b.n	8003306 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	3301      	adds	r3, #1
 8003304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1cb      	bne.n	80032b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2200      	movs	r2, #0
 8003326:	2140      	movs	r1, #64	@ 0x40
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f814 	bl	8003356 <UART_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e006      	b.n	800334e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	e000      	b.n	800334e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	4613      	mov	r3, r2
 8003364:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003366:	e03b      	b.n	80033e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d037      	beq.n	80033e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003370:	f7fe f80a 	bl	8001388 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	6a3a      	ldr	r2, [r7, #32]
 800337c:	429a      	cmp	r2, r3
 800337e:	d302      	bcc.n	8003386 <UART_WaitOnFlagUntilTimeout+0x30>
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e03a      	b.n	8003400 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d023      	beq.n	80033e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b80      	cmp	r3, #128	@ 0x80
 800339c:	d020      	beq.n	80033e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b40      	cmp	r3, #64	@ 0x40
 80033a2:	d01d      	beq.n	80033e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d116      	bne.n	80033e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f81d 	bl	8003408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2208      	movs	r2, #8
 80033d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e00f      	b.n	8003400 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4013      	ands	r3, r2
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d0b4      	beq.n	8003368 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003408:	b480      	push	{r7}
 800340a:	b095      	sub	sp, #84	@ 0x54
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003422:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003430:	643a      	str	r2, [r7, #64]	@ 0x40
 8003432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003434:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003436:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e5      	bne.n	8003410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3314      	adds	r3, #20
 800344a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	61fb      	str	r3, [r7, #28]
   return(result);
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3314      	adds	r3, #20
 8003462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003464:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003466:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800346a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e5      	bne.n	8003444 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347c:	2b01      	cmp	r3, #1
 800347e:	d119      	bne.n	80034b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f023 0310 	bic.w	r3, r3, #16
 8003496:	647b      	str	r3, [r7, #68]	@ 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034a0:	61ba      	str	r2, [r7, #24]
 80034a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a4:	6979      	ldr	r1, [r7, #20]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	e841 2300 	strex	r3, r2, [r1]
 80034ac:	613b      	str	r3, [r7, #16]
   return(result);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e5      	bne.n	8003480 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034c2:	bf00      	nop
 80034c4:	3754      	adds	r7, #84	@ 0x54
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003506:	f023 030c 	bic.w	r3, r3, #12
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	430b      	orrs	r3, r1
 8003512:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a2c      	ldr	r2, [pc, #176]	@ (80035e0 <UART_SetConfig+0x114>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d103      	bne.n	800353c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003534:	f7ff fe02 	bl	800313c <HAL_RCC_GetPCLK2Freq>
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	e002      	b.n	8003542 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800353c:	f7ff fdea 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 8003540:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	009a      	lsls	r2, r3, #2
 800354c:	441a      	add	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	4a22      	ldr	r2, [pc, #136]	@ (80035e4 <UART_SetConfig+0x118>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	0119      	lsls	r1, r3, #4
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009a      	lsls	r2, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	fbb2 f2f3 	udiv	r2, r2, r3
 8003578:	4b1a      	ldr	r3, [pc, #104]	@ (80035e4 <UART_SetConfig+0x118>)
 800357a:	fba3 0302 	umull	r0, r3, r3, r2
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2064      	movs	r0, #100	@ 0x64
 8003582:	fb00 f303 	mul.w	r3, r0, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	3332      	adds	r3, #50	@ 0x32
 800358c:	4a15      	ldr	r2, [pc, #84]	@ (80035e4 <UART_SetConfig+0x118>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003598:	4419      	add	r1, r3
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	009a      	lsls	r2, r3, #2
 80035a4:	441a      	add	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b0:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <UART_SetConfig+0x118>)
 80035b2:	fba3 0302 	umull	r0, r3, r3, r2
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2064      	movs	r0, #100	@ 0x64
 80035ba:	fb00 f303 	mul.w	r3, r0, r3
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	3332      	adds	r3, #50	@ 0x32
 80035c4:	4a07      	ldr	r2, [pc, #28]	@ (80035e4 <UART_SetConfig+0x118>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	440a      	add	r2, r1
 80035d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40013800 	.word	0x40013800
 80035e4:	51eb851f 	.word	0x51eb851f

080035e8 <__cvt>:
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ee:	461d      	mov	r5, r3
 80035f0:	bfbb      	ittet	lt
 80035f2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80035f6:	461d      	movlt	r5, r3
 80035f8:	2300      	movge	r3, #0
 80035fa:	232d      	movlt	r3, #45	@ 0x2d
 80035fc:	b088      	sub	sp, #32
 80035fe:	4614      	mov	r4, r2
 8003600:	bfb8      	it	lt
 8003602:	4614      	movlt	r4, r2
 8003604:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003606:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003608:	7013      	strb	r3, [r2, #0]
 800360a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800360c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003610:	f023 0820 	bic.w	r8, r3, #32
 8003614:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003618:	d005      	beq.n	8003626 <__cvt+0x3e>
 800361a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800361e:	d100      	bne.n	8003622 <__cvt+0x3a>
 8003620:	3601      	adds	r6, #1
 8003622:	2302      	movs	r3, #2
 8003624:	e000      	b.n	8003628 <__cvt+0x40>
 8003626:	2303      	movs	r3, #3
 8003628:	aa07      	add	r2, sp, #28
 800362a:	9204      	str	r2, [sp, #16]
 800362c:	aa06      	add	r2, sp, #24
 800362e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003632:	e9cd 3600 	strd	r3, r6, [sp]
 8003636:	4622      	mov	r2, r4
 8003638:	462b      	mov	r3, r5
 800363a:	f000 fe6d 	bl	8004318 <_dtoa_r>
 800363e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003642:	4607      	mov	r7, r0
 8003644:	d119      	bne.n	800367a <__cvt+0x92>
 8003646:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003648:	07db      	lsls	r3, r3, #31
 800364a:	d50e      	bpl.n	800366a <__cvt+0x82>
 800364c:	eb00 0906 	add.w	r9, r0, r6
 8003650:	2200      	movs	r2, #0
 8003652:	2300      	movs	r3, #0
 8003654:	4620      	mov	r0, r4
 8003656:	4629      	mov	r1, r5
 8003658:	f7fd f9a6 	bl	80009a8 <__aeabi_dcmpeq>
 800365c:	b108      	cbz	r0, 8003662 <__cvt+0x7a>
 800365e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003662:	2230      	movs	r2, #48	@ 0x30
 8003664:	9b07      	ldr	r3, [sp, #28]
 8003666:	454b      	cmp	r3, r9
 8003668:	d31e      	bcc.n	80036a8 <__cvt+0xc0>
 800366a:	4638      	mov	r0, r7
 800366c:	9b07      	ldr	r3, [sp, #28]
 800366e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003670:	1bdb      	subs	r3, r3, r7
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	b008      	add	sp, #32
 8003676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800367a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800367e:	eb00 0906 	add.w	r9, r0, r6
 8003682:	d1e5      	bne.n	8003650 <__cvt+0x68>
 8003684:	7803      	ldrb	r3, [r0, #0]
 8003686:	2b30      	cmp	r3, #48	@ 0x30
 8003688:	d10a      	bne.n	80036a0 <__cvt+0xb8>
 800368a:	2200      	movs	r2, #0
 800368c:	2300      	movs	r3, #0
 800368e:	4620      	mov	r0, r4
 8003690:	4629      	mov	r1, r5
 8003692:	f7fd f989 	bl	80009a8 <__aeabi_dcmpeq>
 8003696:	b918      	cbnz	r0, 80036a0 <__cvt+0xb8>
 8003698:	f1c6 0601 	rsb	r6, r6, #1
 800369c:	f8ca 6000 	str.w	r6, [sl]
 80036a0:	f8da 3000 	ldr.w	r3, [sl]
 80036a4:	4499      	add	r9, r3
 80036a6:	e7d3      	b.n	8003650 <__cvt+0x68>
 80036a8:	1c59      	adds	r1, r3, #1
 80036aa:	9107      	str	r1, [sp, #28]
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	e7d9      	b.n	8003664 <__cvt+0x7c>

080036b0 <__exponent>:
 80036b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036b2:	2900      	cmp	r1, #0
 80036b4:	bfb6      	itet	lt
 80036b6:	232d      	movlt	r3, #45	@ 0x2d
 80036b8:	232b      	movge	r3, #43	@ 0x2b
 80036ba:	4249      	neglt	r1, r1
 80036bc:	2909      	cmp	r1, #9
 80036be:	7002      	strb	r2, [r0, #0]
 80036c0:	7043      	strb	r3, [r0, #1]
 80036c2:	dd29      	ble.n	8003718 <__exponent+0x68>
 80036c4:	f10d 0307 	add.w	r3, sp, #7
 80036c8:	461d      	mov	r5, r3
 80036ca:	270a      	movs	r7, #10
 80036cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80036d0:	461a      	mov	r2, r3
 80036d2:	fb07 1416 	mls	r4, r7, r6, r1
 80036d6:	3430      	adds	r4, #48	@ 0x30
 80036d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80036dc:	460c      	mov	r4, r1
 80036de:	2c63      	cmp	r4, #99	@ 0x63
 80036e0:	4631      	mov	r1, r6
 80036e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80036e6:	dcf1      	bgt.n	80036cc <__exponent+0x1c>
 80036e8:	3130      	adds	r1, #48	@ 0x30
 80036ea:	1e94      	subs	r4, r2, #2
 80036ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80036f0:	4623      	mov	r3, r4
 80036f2:	1c41      	adds	r1, r0, #1
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	d30a      	bcc.n	800370e <__exponent+0x5e>
 80036f8:	f10d 0309 	add.w	r3, sp, #9
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	42ac      	cmp	r4, r5
 8003700:	bf88      	it	hi
 8003702:	2300      	movhi	r3, #0
 8003704:	3302      	adds	r3, #2
 8003706:	4403      	add	r3, r0
 8003708:	1a18      	subs	r0, r3, r0
 800370a:	b003      	add	sp, #12
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800370e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003712:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003716:	e7ed      	b.n	80036f4 <__exponent+0x44>
 8003718:	2330      	movs	r3, #48	@ 0x30
 800371a:	3130      	adds	r1, #48	@ 0x30
 800371c:	7083      	strb	r3, [r0, #2]
 800371e:	70c1      	strb	r1, [r0, #3]
 8003720:	1d03      	adds	r3, r0, #4
 8003722:	e7f1      	b.n	8003708 <__exponent+0x58>

08003724 <_printf_float>:
 8003724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003728:	b091      	sub	sp, #68	@ 0x44
 800372a:	460c      	mov	r4, r1
 800372c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003730:	4616      	mov	r6, r2
 8003732:	461f      	mov	r7, r3
 8003734:	4605      	mov	r5, r0
 8003736:	f000 fce1 	bl	80040fc <_localeconv_r>
 800373a:	6803      	ldr	r3, [r0, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	9308      	str	r3, [sp, #32]
 8003740:	f7fc fd06 	bl	8000150 <strlen>
 8003744:	2300      	movs	r3, #0
 8003746:	930e      	str	r3, [sp, #56]	@ 0x38
 8003748:	f8d8 3000 	ldr.w	r3, [r8]
 800374c:	9009      	str	r0, [sp, #36]	@ 0x24
 800374e:	3307      	adds	r3, #7
 8003750:	f023 0307 	bic.w	r3, r3, #7
 8003754:	f103 0208 	add.w	r2, r3, #8
 8003758:	f894 a018 	ldrb.w	sl, [r4, #24]
 800375c:	f8d4 b000 	ldr.w	fp, [r4]
 8003760:	f8c8 2000 	str.w	r2, [r8]
 8003764:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003768:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800376c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800376e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003772:	f04f 32ff 	mov.w	r2, #4294967295
 8003776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800377a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800377e:	4b9c      	ldr	r3, [pc, #624]	@ (80039f0 <_printf_float+0x2cc>)
 8003780:	f7fd f944 	bl	8000a0c <__aeabi_dcmpun>
 8003784:	bb70      	cbnz	r0, 80037e4 <_printf_float+0xc0>
 8003786:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800378a:	f04f 32ff 	mov.w	r2, #4294967295
 800378e:	4b98      	ldr	r3, [pc, #608]	@ (80039f0 <_printf_float+0x2cc>)
 8003790:	f7fd f91e 	bl	80009d0 <__aeabi_dcmple>
 8003794:	bb30      	cbnz	r0, 80037e4 <_printf_float+0xc0>
 8003796:	2200      	movs	r2, #0
 8003798:	2300      	movs	r3, #0
 800379a:	4640      	mov	r0, r8
 800379c:	4649      	mov	r1, r9
 800379e:	f7fd f90d 	bl	80009bc <__aeabi_dcmplt>
 80037a2:	b110      	cbz	r0, 80037aa <_printf_float+0x86>
 80037a4:	232d      	movs	r3, #45	@ 0x2d
 80037a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037aa:	4a92      	ldr	r2, [pc, #584]	@ (80039f4 <_printf_float+0x2d0>)
 80037ac:	4b92      	ldr	r3, [pc, #584]	@ (80039f8 <_printf_float+0x2d4>)
 80037ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80037b2:	bf94      	ite	ls
 80037b4:	4690      	movls	r8, r2
 80037b6:	4698      	movhi	r8, r3
 80037b8:	2303      	movs	r3, #3
 80037ba:	f04f 0900 	mov.w	r9, #0
 80037be:	6123      	str	r3, [r4, #16]
 80037c0:	f02b 0304 	bic.w	r3, fp, #4
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	4633      	mov	r3, r6
 80037c8:	4621      	mov	r1, r4
 80037ca:	4628      	mov	r0, r5
 80037cc:	9700      	str	r7, [sp, #0]
 80037ce:	aa0f      	add	r2, sp, #60	@ 0x3c
 80037d0:	f000 f9d4 	bl	8003b7c <_printf_common>
 80037d4:	3001      	adds	r0, #1
 80037d6:	f040 8090 	bne.w	80038fa <_printf_float+0x1d6>
 80037da:	f04f 30ff 	mov.w	r0, #4294967295
 80037de:	b011      	add	sp, #68	@ 0x44
 80037e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e4:	4642      	mov	r2, r8
 80037e6:	464b      	mov	r3, r9
 80037e8:	4640      	mov	r0, r8
 80037ea:	4649      	mov	r1, r9
 80037ec:	f7fd f90e 	bl	8000a0c <__aeabi_dcmpun>
 80037f0:	b148      	cbz	r0, 8003806 <_printf_float+0xe2>
 80037f2:	464b      	mov	r3, r9
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bfb8      	it	lt
 80037f8:	232d      	movlt	r3, #45	@ 0x2d
 80037fa:	4a80      	ldr	r2, [pc, #512]	@ (80039fc <_printf_float+0x2d8>)
 80037fc:	bfb8      	it	lt
 80037fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003802:	4b7f      	ldr	r3, [pc, #508]	@ (8003a00 <_printf_float+0x2dc>)
 8003804:	e7d3      	b.n	80037ae <_printf_float+0x8a>
 8003806:	6863      	ldr	r3, [r4, #4]
 8003808:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	d13f      	bne.n	8003890 <_printf_float+0x16c>
 8003810:	2306      	movs	r3, #6
 8003812:	6063      	str	r3, [r4, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800381a:	6023      	str	r3, [r4, #0]
 800381c:	9206      	str	r2, [sp, #24]
 800381e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003820:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003824:	aa0d      	add	r2, sp, #52	@ 0x34
 8003826:	9203      	str	r2, [sp, #12]
 8003828:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800382c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003830:	6863      	ldr	r3, [r4, #4]
 8003832:	4642      	mov	r2, r8
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	4628      	mov	r0, r5
 8003838:	464b      	mov	r3, r9
 800383a:	910a      	str	r1, [sp, #40]	@ 0x28
 800383c:	f7ff fed4 	bl	80035e8 <__cvt>
 8003840:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003842:	4680      	mov	r8, r0
 8003844:	2947      	cmp	r1, #71	@ 0x47
 8003846:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003848:	d128      	bne.n	800389c <_printf_float+0x178>
 800384a:	1cc8      	adds	r0, r1, #3
 800384c:	db02      	blt.n	8003854 <_printf_float+0x130>
 800384e:	6863      	ldr	r3, [r4, #4]
 8003850:	4299      	cmp	r1, r3
 8003852:	dd40      	ble.n	80038d6 <_printf_float+0x1b2>
 8003854:	f1aa 0a02 	sub.w	sl, sl, #2
 8003858:	fa5f fa8a 	uxtb.w	sl, sl
 800385c:	4652      	mov	r2, sl
 800385e:	3901      	subs	r1, #1
 8003860:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003864:	910d      	str	r1, [sp, #52]	@ 0x34
 8003866:	f7ff ff23 	bl	80036b0 <__exponent>
 800386a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800386c:	4681      	mov	r9, r0
 800386e:	1813      	adds	r3, r2, r0
 8003870:	2a01      	cmp	r2, #1
 8003872:	6123      	str	r3, [r4, #16]
 8003874:	dc02      	bgt.n	800387c <_printf_float+0x158>
 8003876:	6822      	ldr	r2, [r4, #0]
 8003878:	07d2      	lsls	r2, r2, #31
 800387a:	d501      	bpl.n	8003880 <_printf_float+0x15c>
 800387c:	3301      	adds	r3, #1
 800387e:	6123      	str	r3, [r4, #16]
 8003880:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003884:	2b00      	cmp	r3, #0
 8003886:	d09e      	beq.n	80037c6 <_printf_float+0xa2>
 8003888:	232d      	movs	r3, #45	@ 0x2d
 800388a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800388e:	e79a      	b.n	80037c6 <_printf_float+0xa2>
 8003890:	2947      	cmp	r1, #71	@ 0x47
 8003892:	d1bf      	bne.n	8003814 <_printf_float+0xf0>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1bd      	bne.n	8003814 <_printf_float+0xf0>
 8003898:	2301      	movs	r3, #1
 800389a:	e7ba      	b.n	8003812 <_printf_float+0xee>
 800389c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80038a0:	d9dc      	bls.n	800385c <_printf_float+0x138>
 80038a2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80038a6:	d118      	bne.n	80038da <_printf_float+0x1b6>
 80038a8:	2900      	cmp	r1, #0
 80038aa:	6863      	ldr	r3, [r4, #4]
 80038ac:	dd0b      	ble.n	80038c6 <_printf_float+0x1a2>
 80038ae:	6121      	str	r1, [r4, #16]
 80038b0:	b913      	cbnz	r3, 80038b8 <_printf_float+0x194>
 80038b2:	6822      	ldr	r2, [r4, #0]
 80038b4:	07d0      	lsls	r0, r2, #31
 80038b6:	d502      	bpl.n	80038be <_printf_float+0x19a>
 80038b8:	3301      	adds	r3, #1
 80038ba:	440b      	add	r3, r1
 80038bc:	6123      	str	r3, [r4, #16]
 80038be:	f04f 0900 	mov.w	r9, #0
 80038c2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80038c4:	e7dc      	b.n	8003880 <_printf_float+0x15c>
 80038c6:	b913      	cbnz	r3, 80038ce <_printf_float+0x1aa>
 80038c8:	6822      	ldr	r2, [r4, #0]
 80038ca:	07d2      	lsls	r2, r2, #31
 80038cc:	d501      	bpl.n	80038d2 <_printf_float+0x1ae>
 80038ce:	3302      	adds	r3, #2
 80038d0:	e7f4      	b.n	80038bc <_printf_float+0x198>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e7f2      	b.n	80038bc <_printf_float+0x198>
 80038d6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80038da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80038dc:	4299      	cmp	r1, r3
 80038de:	db05      	blt.n	80038ec <_printf_float+0x1c8>
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	6121      	str	r1, [r4, #16]
 80038e4:	07d8      	lsls	r0, r3, #31
 80038e6:	d5ea      	bpl.n	80038be <_printf_float+0x19a>
 80038e8:	1c4b      	adds	r3, r1, #1
 80038ea:	e7e7      	b.n	80038bc <_printf_float+0x198>
 80038ec:	2900      	cmp	r1, #0
 80038ee:	bfcc      	ite	gt
 80038f0:	2201      	movgt	r2, #1
 80038f2:	f1c1 0202 	rsble	r2, r1, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	e7e0      	b.n	80038bc <_printf_float+0x198>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	055a      	lsls	r2, r3, #21
 80038fe:	d407      	bmi.n	8003910 <_printf_float+0x1ec>
 8003900:	6923      	ldr	r3, [r4, #16]
 8003902:	4642      	mov	r2, r8
 8003904:	4631      	mov	r1, r6
 8003906:	4628      	mov	r0, r5
 8003908:	47b8      	blx	r7
 800390a:	3001      	adds	r0, #1
 800390c:	d12b      	bne.n	8003966 <_printf_float+0x242>
 800390e:	e764      	b.n	80037da <_printf_float+0xb6>
 8003910:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003914:	f240 80dc 	bls.w	8003ad0 <_printf_float+0x3ac>
 8003918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800391c:	2200      	movs	r2, #0
 800391e:	2300      	movs	r3, #0
 8003920:	f7fd f842 	bl	80009a8 <__aeabi_dcmpeq>
 8003924:	2800      	cmp	r0, #0
 8003926:	d033      	beq.n	8003990 <_printf_float+0x26c>
 8003928:	2301      	movs	r3, #1
 800392a:	4631      	mov	r1, r6
 800392c:	4628      	mov	r0, r5
 800392e:	4a35      	ldr	r2, [pc, #212]	@ (8003a04 <_printf_float+0x2e0>)
 8003930:	47b8      	blx	r7
 8003932:	3001      	adds	r0, #1
 8003934:	f43f af51 	beq.w	80037da <_printf_float+0xb6>
 8003938:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800393c:	4543      	cmp	r3, r8
 800393e:	db02      	blt.n	8003946 <_printf_float+0x222>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	07d8      	lsls	r0, r3, #31
 8003944:	d50f      	bpl.n	8003966 <_printf_float+0x242>
 8003946:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800394a:	4631      	mov	r1, r6
 800394c:	4628      	mov	r0, r5
 800394e:	47b8      	blx	r7
 8003950:	3001      	adds	r0, #1
 8003952:	f43f af42 	beq.w	80037da <_printf_float+0xb6>
 8003956:	f04f 0900 	mov.w	r9, #0
 800395a:	f108 38ff 	add.w	r8, r8, #4294967295
 800395e:	f104 0a1a 	add.w	sl, r4, #26
 8003962:	45c8      	cmp	r8, r9
 8003964:	dc09      	bgt.n	800397a <_printf_float+0x256>
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	079b      	lsls	r3, r3, #30
 800396a:	f100 8102 	bmi.w	8003b72 <_printf_float+0x44e>
 800396e:	68e0      	ldr	r0, [r4, #12]
 8003970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003972:	4298      	cmp	r0, r3
 8003974:	bfb8      	it	lt
 8003976:	4618      	movlt	r0, r3
 8003978:	e731      	b.n	80037de <_printf_float+0xba>
 800397a:	2301      	movs	r3, #1
 800397c:	4652      	mov	r2, sl
 800397e:	4631      	mov	r1, r6
 8003980:	4628      	mov	r0, r5
 8003982:	47b8      	blx	r7
 8003984:	3001      	adds	r0, #1
 8003986:	f43f af28 	beq.w	80037da <_printf_float+0xb6>
 800398a:	f109 0901 	add.w	r9, r9, #1
 800398e:	e7e8      	b.n	8003962 <_printf_float+0x23e>
 8003990:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003992:	2b00      	cmp	r3, #0
 8003994:	dc38      	bgt.n	8003a08 <_printf_float+0x2e4>
 8003996:	2301      	movs	r3, #1
 8003998:	4631      	mov	r1, r6
 800399a:	4628      	mov	r0, r5
 800399c:	4a19      	ldr	r2, [pc, #100]	@ (8003a04 <_printf_float+0x2e0>)
 800399e:	47b8      	blx	r7
 80039a0:	3001      	adds	r0, #1
 80039a2:	f43f af1a 	beq.w	80037da <_printf_float+0xb6>
 80039a6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80039aa:	ea59 0303 	orrs.w	r3, r9, r3
 80039ae:	d102      	bne.n	80039b6 <_printf_float+0x292>
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	07d9      	lsls	r1, r3, #31
 80039b4:	d5d7      	bpl.n	8003966 <_printf_float+0x242>
 80039b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80039ba:	4631      	mov	r1, r6
 80039bc:	4628      	mov	r0, r5
 80039be:	47b8      	blx	r7
 80039c0:	3001      	adds	r0, #1
 80039c2:	f43f af0a 	beq.w	80037da <_printf_float+0xb6>
 80039c6:	f04f 0a00 	mov.w	sl, #0
 80039ca:	f104 0b1a 	add.w	fp, r4, #26
 80039ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039d0:	425b      	negs	r3, r3
 80039d2:	4553      	cmp	r3, sl
 80039d4:	dc01      	bgt.n	80039da <_printf_float+0x2b6>
 80039d6:	464b      	mov	r3, r9
 80039d8:	e793      	b.n	8003902 <_printf_float+0x1de>
 80039da:	2301      	movs	r3, #1
 80039dc:	465a      	mov	r2, fp
 80039de:	4631      	mov	r1, r6
 80039e0:	4628      	mov	r0, r5
 80039e2:	47b8      	blx	r7
 80039e4:	3001      	adds	r0, #1
 80039e6:	f43f aef8 	beq.w	80037da <_printf_float+0xb6>
 80039ea:	f10a 0a01 	add.w	sl, sl, #1
 80039ee:	e7ee      	b.n	80039ce <_printf_float+0x2aa>
 80039f0:	7fefffff 	.word	0x7fefffff
 80039f4:	0800630a 	.word	0x0800630a
 80039f8:	0800630e 	.word	0x0800630e
 80039fc:	08006312 	.word	0x08006312
 8003a00:	08006316 	.word	0x08006316
 8003a04:	0800631a 	.word	0x0800631a
 8003a08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a0a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003a0e:	4553      	cmp	r3, sl
 8003a10:	bfa8      	it	ge
 8003a12:	4653      	movge	r3, sl
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	4699      	mov	r9, r3
 8003a18:	dc36      	bgt.n	8003a88 <_printf_float+0x364>
 8003a1a:	f04f 0b00 	mov.w	fp, #0
 8003a1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a22:	f104 021a 	add.w	r2, r4, #26
 8003a26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a28:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a2a:	eba3 0309 	sub.w	r3, r3, r9
 8003a2e:	455b      	cmp	r3, fp
 8003a30:	dc31      	bgt.n	8003a96 <_printf_float+0x372>
 8003a32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a34:	459a      	cmp	sl, r3
 8003a36:	dc3a      	bgt.n	8003aae <_printf_float+0x38a>
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	07da      	lsls	r2, r3, #31
 8003a3c:	d437      	bmi.n	8003aae <_printf_float+0x38a>
 8003a3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a40:	ebaa 0903 	sub.w	r9, sl, r3
 8003a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a46:	ebaa 0303 	sub.w	r3, sl, r3
 8003a4a:	4599      	cmp	r9, r3
 8003a4c:	bfa8      	it	ge
 8003a4e:	4699      	movge	r9, r3
 8003a50:	f1b9 0f00 	cmp.w	r9, #0
 8003a54:	dc33      	bgt.n	8003abe <_printf_float+0x39a>
 8003a56:	f04f 0800 	mov.w	r8, #0
 8003a5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a5e:	f104 0b1a 	add.w	fp, r4, #26
 8003a62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a64:	ebaa 0303 	sub.w	r3, sl, r3
 8003a68:	eba3 0309 	sub.w	r3, r3, r9
 8003a6c:	4543      	cmp	r3, r8
 8003a6e:	f77f af7a 	ble.w	8003966 <_printf_float+0x242>
 8003a72:	2301      	movs	r3, #1
 8003a74:	465a      	mov	r2, fp
 8003a76:	4631      	mov	r1, r6
 8003a78:	4628      	mov	r0, r5
 8003a7a:	47b8      	blx	r7
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	f43f aeac 	beq.w	80037da <_printf_float+0xb6>
 8003a82:	f108 0801 	add.w	r8, r8, #1
 8003a86:	e7ec      	b.n	8003a62 <_printf_float+0x33e>
 8003a88:	4642      	mov	r2, r8
 8003a8a:	4631      	mov	r1, r6
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	47b8      	blx	r7
 8003a90:	3001      	adds	r0, #1
 8003a92:	d1c2      	bne.n	8003a1a <_printf_float+0x2f6>
 8003a94:	e6a1      	b.n	80037da <_printf_float+0xb6>
 8003a96:	2301      	movs	r3, #1
 8003a98:	4631      	mov	r1, r6
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	920a      	str	r2, [sp, #40]	@ 0x28
 8003a9e:	47b8      	blx	r7
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	f43f ae9a 	beq.w	80037da <_printf_float+0xb6>
 8003aa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003aa8:	f10b 0b01 	add.w	fp, fp, #1
 8003aac:	e7bb      	b.n	8003a26 <_printf_float+0x302>
 8003aae:	4631      	mov	r1, r6
 8003ab0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	47b8      	blx	r7
 8003ab8:	3001      	adds	r0, #1
 8003aba:	d1c0      	bne.n	8003a3e <_printf_float+0x31a>
 8003abc:	e68d      	b.n	80037da <_printf_float+0xb6>
 8003abe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	4631      	mov	r1, r6
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	4442      	add	r2, r8
 8003ac8:	47b8      	blx	r7
 8003aca:	3001      	adds	r0, #1
 8003acc:	d1c3      	bne.n	8003a56 <_printf_float+0x332>
 8003ace:	e684      	b.n	80037da <_printf_float+0xb6>
 8003ad0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003ad4:	f1ba 0f01 	cmp.w	sl, #1
 8003ad8:	dc01      	bgt.n	8003ade <_printf_float+0x3ba>
 8003ada:	07db      	lsls	r3, r3, #31
 8003adc:	d536      	bpl.n	8003b4c <_printf_float+0x428>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	4631      	mov	r1, r6
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	47b8      	blx	r7
 8003ae8:	3001      	adds	r0, #1
 8003aea:	f43f ae76 	beq.w	80037da <_printf_float+0xb6>
 8003aee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003af2:	4631      	mov	r1, r6
 8003af4:	4628      	mov	r0, r5
 8003af6:	47b8      	blx	r7
 8003af8:	3001      	adds	r0, #1
 8003afa:	f43f ae6e 	beq.w	80037da <_printf_float+0xb6>
 8003afe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b02:	2200      	movs	r2, #0
 8003b04:	2300      	movs	r3, #0
 8003b06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b0a:	f7fc ff4d 	bl	80009a8 <__aeabi_dcmpeq>
 8003b0e:	b9c0      	cbnz	r0, 8003b42 <_printf_float+0x41e>
 8003b10:	4653      	mov	r3, sl
 8003b12:	f108 0201 	add.w	r2, r8, #1
 8003b16:	4631      	mov	r1, r6
 8003b18:	4628      	mov	r0, r5
 8003b1a:	47b8      	blx	r7
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d10c      	bne.n	8003b3a <_printf_float+0x416>
 8003b20:	e65b      	b.n	80037da <_printf_float+0xb6>
 8003b22:	2301      	movs	r3, #1
 8003b24:	465a      	mov	r2, fp
 8003b26:	4631      	mov	r1, r6
 8003b28:	4628      	mov	r0, r5
 8003b2a:	47b8      	blx	r7
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	f43f ae54 	beq.w	80037da <_printf_float+0xb6>
 8003b32:	f108 0801 	add.w	r8, r8, #1
 8003b36:	45d0      	cmp	r8, sl
 8003b38:	dbf3      	blt.n	8003b22 <_printf_float+0x3fe>
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003b40:	e6e0      	b.n	8003904 <_printf_float+0x1e0>
 8003b42:	f04f 0800 	mov.w	r8, #0
 8003b46:	f104 0b1a 	add.w	fp, r4, #26
 8003b4a:	e7f4      	b.n	8003b36 <_printf_float+0x412>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4642      	mov	r2, r8
 8003b50:	e7e1      	b.n	8003b16 <_printf_float+0x3f2>
 8003b52:	2301      	movs	r3, #1
 8003b54:	464a      	mov	r2, r9
 8003b56:	4631      	mov	r1, r6
 8003b58:	4628      	mov	r0, r5
 8003b5a:	47b8      	blx	r7
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	f43f ae3c 	beq.w	80037da <_printf_float+0xb6>
 8003b62:	f108 0801 	add.w	r8, r8, #1
 8003b66:	68e3      	ldr	r3, [r4, #12]
 8003b68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003b6a:	1a5b      	subs	r3, r3, r1
 8003b6c:	4543      	cmp	r3, r8
 8003b6e:	dcf0      	bgt.n	8003b52 <_printf_float+0x42e>
 8003b70:	e6fd      	b.n	800396e <_printf_float+0x24a>
 8003b72:	f04f 0800 	mov.w	r8, #0
 8003b76:	f104 0919 	add.w	r9, r4, #25
 8003b7a:	e7f4      	b.n	8003b66 <_printf_float+0x442>

08003b7c <_printf_common>:
 8003b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	4616      	mov	r6, r2
 8003b82:	4698      	mov	r8, r3
 8003b84:	688a      	ldr	r2, [r1, #8]
 8003b86:	690b      	ldr	r3, [r1, #16]
 8003b88:	4607      	mov	r7, r0
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	bfb8      	it	lt
 8003b8e:	4613      	movlt	r3, r2
 8003b90:	6033      	str	r3, [r6, #0]
 8003b92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b96:	460c      	mov	r4, r1
 8003b98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b9c:	b10a      	cbz	r2, 8003ba2 <_printf_common+0x26>
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	6033      	str	r3, [r6, #0]
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	0699      	lsls	r1, r3, #26
 8003ba6:	bf42      	ittt	mi
 8003ba8:	6833      	ldrmi	r3, [r6, #0]
 8003baa:	3302      	addmi	r3, #2
 8003bac:	6033      	strmi	r3, [r6, #0]
 8003bae:	6825      	ldr	r5, [r4, #0]
 8003bb0:	f015 0506 	ands.w	r5, r5, #6
 8003bb4:	d106      	bne.n	8003bc4 <_printf_common+0x48>
 8003bb6:	f104 0a19 	add.w	sl, r4, #25
 8003bba:	68e3      	ldr	r3, [r4, #12]
 8003bbc:	6832      	ldr	r2, [r6, #0]
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	42ab      	cmp	r3, r5
 8003bc2:	dc2b      	bgt.n	8003c1c <_printf_common+0xa0>
 8003bc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bc8:	6822      	ldr	r2, [r4, #0]
 8003bca:	3b00      	subs	r3, #0
 8003bcc:	bf18      	it	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	0692      	lsls	r2, r2, #26
 8003bd2:	d430      	bmi.n	8003c36 <_printf_common+0xba>
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bdc:	47c8      	blx	r9
 8003bde:	3001      	adds	r0, #1
 8003be0:	d023      	beq.n	8003c2a <_printf_common+0xae>
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	6922      	ldr	r2, [r4, #16]
 8003be6:	f003 0306 	and.w	r3, r3, #6
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	bf14      	ite	ne
 8003bee:	2500      	movne	r5, #0
 8003bf0:	6833      	ldreq	r3, [r6, #0]
 8003bf2:	f04f 0600 	mov.w	r6, #0
 8003bf6:	bf08      	it	eq
 8003bf8:	68e5      	ldreq	r5, [r4, #12]
 8003bfa:	f104 041a 	add.w	r4, r4, #26
 8003bfe:	bf08      	it	eq
 8003c00:	1aed      	subeq	r5, r5, r3
 8003c02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003c06:	bf08      	it	eq
 8003c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	bfc4      	itt	gt
 8003c10:	1a9b      	subgt	r3, r3, r2
 8003c12:	18ed      	addgt	r5, r5, r3
 8003c14:	42b5      	cmp	r5, r6
 8003c16:	d11a      	bne.n	8003c4e <_printf_common+0xd2>
 8003c18:	2000      	movs	r0, #0
 8003c1a:	e008      	b.n	8003c2e <_printf_common+0xb2>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	4652      	mov	r2, sl
 8003c20:	4641      	mov	r1, r8
 8003c22:	4638      	mov	r0, r7
 8003c24:	47c8      	blx	r9
 8003c26:	3001      	adds	r0, #1
 8003c28:	d103      	bne.n	8003c32 <_printf_common+0xb6>
 8003c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c32:	3501      	adds	r5, #1
 8003c34:	e7c1      	b.n	8003bba <_printf_common+0x3e>
 8003c36:	2030      	movs	r0, #48	@ 0x30
 8003c38:	18e1      	adds	r1, r4, r3
 8003c3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c44:	4422      	add	r2, r4
 8003c46:	3302      	adds	r3, #2
 8003c48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c4c:	e7c2      	b.n	8003bd4 <_printf_common+0x58>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	4622      	mov	r2, r4
 8003c52:	4641      	mov	r1, r8
 8003c54:	4638      	mov	r0, r7
 8003c56:	47c8      	blx	r9
 8003c58:	3001      	adds	r0, #1
 8003c5a:	d0e6      	beq.n	8003c2a <_printf_common+0xae>
 8003c5c:	3601      	adds	r6, #1
 8003c5e:	e7d9      	b.n	8003c14 <_printf_common+0x98>

08003c60 <_printf_i>:
 8003c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	7e0f      	ldrb	r7, [r1, #24]
 8003c66:	4691      	mov	r9, r2
 8003c68:	2f78      	cmp	r7, #120	@ 0x78
 8003c6a:	4680      	mov	r8, r0
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	469a      	mov	sl, r3
 8003c70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c76:	d807      	bhi.n	8003c88 <_printf_i+0x28>
 8003c78:	2f62      	cmp	r7, #98	@ 0x62
 8003c7a:	d80a      	bhi.n	8003c92 <_printf_i+0x32>
 8003c7c:	2f00      	cmp	r7, #0
 8003c7e:	f000 80d3 	beq.w	8003e28 <_printf_i+0x1c8>
 8003c82:	2f58      	cmp	r7, #88	@ 0x58
 8003c84:	f000 80ba 	beq.w	8003dfc <_printf_i+0x19c>
 8003c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c90:	e03a      	b.n	8003d08 <_printf_i+0xa8>
 8003c92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c96:	2b15      	cmp	r3, #21
 8003c98:	d8f6      	bhi.n	8003c88 <_printf_i+0x28>
 8003c9a:	a101      	add	r1, pc, #4	@ (adr r1, 8003ca0 <_printf_i+0x40>)
 8003c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ca0:	08003cf9 	.word	0x08003cf9
 8003ca4:	08003d0d 	.word	0x08003d0d
 8003ca8:	08003c89 	.word	0x08003c89
 8003cac:	08003c89 	.word	0x08003c89
 8003cb0:	08003c89 	.word	0x08003c89
 8003cb4:	08003c89 	.word	0x08003c89
 8003cb8:	08003d0d 	.word	0x08003d0d
 8003cbc:	08003c89 	.word	0x08003c89
 8003cc0:	08003c89 	.word	0x08003c89
 8003cc4:	08003c89 	.word	0x08003c89
 8003cc8:	08003c89 	.word	0x08003c89
 8003ccc:	08003e0f 	.word	0x08003e0f
 8003cd0:	08003d37 	.word	0x08003d37
 8003cd4:	08003dc9 	.word	0x08003dc9
 8003cd8:	08003c89 	.word	0x08003c89
 8003cdc:	08003c89 	.word	0x08003c89
 8003ce0:	08003e31 	.word	0x08003e31
 8003ce4:	08003c89 	.word	0x08003c89
 8003ce8:	08003d37 	.word	0x08003d37
 8003cec:	08003c89 	.word	0x08003c89
 8003cf0:	08003c89 	.word	0x08003c89
 8003cf4:	08003dd1 	.word	0x08003dd1
 8003cf8:	6833      	ldr	r3, [r6, #0]
 8003cfa:	1d1a      	adds	r2, r3, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6032      	str	r2, [r6, #0]
 8003d00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e09e      	b.n	8003e4a <_printf_i+0x1ea>
 8003d0c:	6833      	ldr	r3, [r6, #0]
 8003d0e:	6820      	ldr	r0, [r4, #0]
 8003d10:	1d19      	adds	r1, r3, #4
 8003d12:	6031      	str	r1, [r6, #0]
 8003d14:	0606      	lsls	r6, r0, #24
 8003d16:	d501      	bpl.n	8003d1c <_printf_i+0xbc>
 8003d18:	681d      	ldr	r5, [r3, #0]
 8003d1a:	e003      	b.n	8003d24 <_printf_i+0xc4>
 8003d1c:	0645      	lsls	r5, r0, #25
 8003d1e:	d5fb      	bpl.n	8003d18 <_printf_i+0xb8>
 8003d20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d24:	2d00      	cmp	r5, #0
 8003d26:	da03      	bge.n	8003d30 <_printf_i+0xd0>
 8003d28:	232d      	movs	r3, #45	@ 0x2d
 8003d2a:	426d      	negs	r5, r5
 8003d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d30:	230a      	movs	r3, #10
 8003d32:	4859      	ldr	r0, [pc, #356]	@ (8003e98 <_printf_i+0x238>)
 8003d34:	e011      	b.n	8003d5a <_printf_i+0xfa>
 8003d36:	6821      	ldr	r1, [r4, #0]
 8003d38:	6833      	ldr	r3, [r6, #0]
 8003d3a:	0608      	lsls	r0, r1, #24
 8003d3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d40:	d402      	bmi.n	8003d48 <_printf_i+0xe8>
 8003d42:	0649      	lsls	r1, r1, #25
 8003d44:	bf48      	it	mi
 8003d46:	b2ad      	uxthmi	r5, r5
 8003d48:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d4a:	6033      	str	r3, [r6, #0]
 8003d4c:	bf14      	ite	ne
 8003d4e:	230a      	movne	r3, #10
 8003d50:	2308      	moveq	r3, #8
 8003d52:	4851      	ldr	r0, [pc, #324]	@ (8003e98 <_printf_i+0x238>)
 8003d54:	2100      	movs	r1, #0
 8003d56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d5a:	6866      	ldr	r6, [r4, #4]
 8003d5c:	2e00      	cmp	r6, #0
 8003d5e:	bfa8      	it	ge
 8003d60:	6821      	ldrge	r1, [r4, #0]
 8003d62:	60a6      	str	r6, [r4, #8]
 8003d64:	bfa4      	itt	ge
 8003d66:	f021 0104 	bicge.w	r1, r1, #4
 8003d6a:	6021      	strge	r1, [r4, #0]
 8003d6c:	b90d      	cbnz	r5, 8003d72 <_printf_i+0x112>
 8003d6e:	2e00      	cmp	r6, #0
 8003d70:	d04b      	beq.n	8003e0a <_printf_i+0x1aa>
 8003d72:	4616      	mov	r6, r2
 8003d74:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d78:	fb03 5711 	mls	r7, r3, r1, r5
 8003d7c:	5dc7      	ldrb	r7, [r0, r7]
 8003d7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d82:	462f      	mov	r7, r5
 8003d84:	42bb      	cmp	r3, r7
 8003d86:	460d      	mov	r5, r1
 8003d88:	d9f4      	bls.n	8003d74 <_printf_i+0x114>
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d10b      	bne.n	8003da6 <_printf_i+0x146>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	07df      	lsls	r7, r3, #31
 8003d92:	d508      	bpl.n	8003da6 <_printf_i+0x146>
 8003d94:	6923      	ldr	r3, [r4, #16]
 8003d96:	6861      	ldr	r1, [r4, #4]
 8003d98:	4299      	cmp	r1, r3
 8003d9a:	bfde      	ittt	le
 8003d9c:	2330      	movle	r3, #48	@ 0x30
 8003d9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003da2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003da6:	1b92      	subs	r2, r2, r6
 8003da8:	6122      	str	r2, [r4, #16]
 8003daa:	464b      	mov	r3, r9
 8003dac:	4621      	mov	r1, r4
 8003dae:	4640      	mov	r0, r8
 8003db0:	f8cd a000 	str.w	sl, [sp]
 8003db4:	aa03      	add	r2, sp, #12
 8003db6:	f7ff fee1 	bl	8003b7c <_printf_common>
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d14a      	bne.n	8003e54 <_printf_i+0x1f4>
 8003dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc2:	b004      	add	sp, #16
 8003dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	f043 0320 	orr.w	r3, r3, #32
 8003dce:	6023      	str	r3, [r4, #0]
 8003dd0:	2778      	movs	r7, #120	@ 0x78
 8003dd2:	4832      	ldr	r0, [pc, #200]	@ (8003e9c <_printf_i+0x23c>)
 8003dd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	6831      	ldr	r1, [r6, #0]
 8003ddc:	061f      	lsls	r7, r3, #24
 8003dde:	f851 5b04 	ldr.w	r5, [r1], #4
 8003de2:	d402      	bmi.n	8003dea <_printf_i+0x18a>
 8003de4:	065f      	lsls	r7, r3, #25
 8003de6:	bf48      	it	mi
 8003de8:	b2ad      	uxthmi	r5, r5
 8003dea:	6031      	str	r1, [r6, #0]
 8003dec:	07d9      	lsls	r1, r3, #31
 8003dee:	bf44      	itt	mi
 8003df0:	f043 0320 	orrmi.w	r3, r3, #32
 8003df4:	6023      	strmi	r3, [r4, #0]
 8003df6:	b11d      	cbz	r5, 8003e00 <_printf_i+0x1a0>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	e7ab      	b.n	8003d54 <_printf_i+0xf4>
 8003dfc:	4826      	ldr	r0, [pc, #152]	@ (8003e98 <_printf_i+0x238>)
 8003dfe:	e7e9      	b.n	8003dd4 <_printf_i+0x174>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	f023 0320 	bic.w	r3, r3, #32
 8003e06:	6023      	str	r3, [r4, #0]
 8003e08:	e7f6      	b.n	8003df8 <_printf_i+0x198>
 8003e0a:	4616      	mov	r6, r2
 8003e0c:	e7bd      	b.n	8003d8a <_printf_i+0x12a>
 8003e0e:	6833      	ldr	r3, [r6, #0]
 8003e10:	6825      	ldr	r5, [r4, #0]
 8003e12:	1d18      	adds	r0, r3, #4
 8003e14:	6961      	ldr	r1, [r4, #20]
 8003e16:	6030      	str	r0, [r6, #0]
 8003e18:	062e      	lsls	r6, r5, #24
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	d501      	bpl.n	8003e22 <_printf_i+0x1c2>
 8003e1e:	6019      	str	r1, [r3, #0]
 8003e20:	e002      	b.n	8003e28 <_printf_i+0x1c8>
 8003e22:	0668      	lsls	r0, r5, #25
 8003e24:	d5fb      	bpl.n	8003e1e <_printf_i+0x1be>
 8003e26:	8019      	strh	r1, [r3, #0]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4616      	mov	r6, r2
 8003e2c:	6123      	str	r3, [r4, #16]
 8003e2e:	e7bc      	b.n	8003daa <_printf_i+0x14a>
 8003e30:	6833      	ldr	r3, [r6, #0]
 8003e32:	2100      	movs	r1, #0
 8003e34:	1d1a      	adds	r2, r3, #4
 8003e36:	6032      	str	r2, [r6, #0]
 8003e38:	681e      	ldr	r6, [r3, #0]
 8003e3a:	6862      	ldr	r2, [r4, #4]
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	f000 f9d4 	bl	80041ea <memchr>
 8003e42:	b108      	cbz	r0, 8003e48 <_printf_i+0x1e8>
 8003e44:	1b80      	subs	r0, r0, r6
 8003e46:	6060      	str	r0, [r4, #4]
 8003e48:	6863      	ldr	r3, [r4, #4]
 8003e4a:	6123      	str	r3, [r4, #16]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e52:	e7aa      	b.n	8003daa <_printf_i+0x14a>
 8003e54:	4632      	mov	r2, r6
 8003e56:	4649      	mov	r1, r9
 8003e58:	4640      	mov	r0, r8
 8003e5a:	6923      	ldr	r3, [r4, #16]
 8003e5c:	47d0      	blx	sl
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d0ad      	beq.n	8003dbe <_printf_i+0x15e>
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	079b      	lsls	r3, r3, #30
 8003e66:	d413      	bmi.n	8003e90 <_printf_i+0x230>
 8003e68:	68e0      	ldr	r0, [r4, #12]
 8003e6a:	9b03      	ldr	r3, [sp, #12]
 8003e6c:	4298      	cmp	r0, r3
 8003e6e:	bfb8      	it	lt
 8003e70:	4618      	movlt	r0, r3
 8003e72:	e7a6      	b.n	8003dc2 <_printf_i+0x162>
 8003e74:	2301      	movs	r3, #1
 8003e76:	4632      	mov	r2, r6
 8003e78:	4649      	mov	r1, r9
 8003e7a:	4640      	mov	r0, r8
 8003e7c:	47d0      	blx	sl
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d09d      	beq.n	8003dbe <_printf_i+0x15e>
 8003e82:	3501      	adds	r5, #1
 8003e84:	68e3      	ldr	r3, [r4, #12]
 8003e86:	9903      	ldr	r1, [sp, #12]
 8003e88:	1a5b      	subs	r3, r3, r1
 8003e8a:	42ab      	cmp	r3, r5
 8003e8c:	dcf2      	bgt.n	8003e74 <_printf_i+0x214>
 8003e8e:	e7eb      	b.n	8003e68 <_printf_i+0x208>
 8003e90:	2500      	movs	r5, #0
 8003e92:	f104 0619 	add.w	r6, r4, #25
 8003e96:	e7f5      	b.n	8003e84 <_printf_i+0x224>
 8003e98:	0800631c 	.word	0x0800631c
 8003e9c:	0800632d 	.word	0x0800632d

08003ea0 <std>:
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	b510      	push	{r4, lr}
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8003eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eae:	6083      	str	r3, [r0, #8]
 8003eb0:	8181      	strh	r1, [r0, #12]
 8003eb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003eb4:	81c2      	strh	r2, [r0, #14]
 8003eb6:	6183      	str	r3, [r0, #24]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	2208      	movs	r2, #8
 8003ebc:	305c      	adds	r0, #92	@ 0x5c
 8003ebe:	f000 f914 	bl	80040ea <memset>
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <std+0x58>)
 8003ec4:	6224      	str	r4, [r4, #32]
 8003ec6:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <std+0x5c>)
 8003eca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f00 <std+0x60>)
 8003ece:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f04 <std+0x64>)
 8003ed2:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <std+0x68>)
 8003ed6:	429c      	cmp	r4, r3
 8003ed8:	d006      	beq.n	8003ee8 <std+0x48>
 8003eda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ede:	4294      	cmp	r4, r2
 8003ee0:	d002      	beq.n	8003ee8 <std+0x48>
 8003ee2:	33d0      	adds	r3, #208	@ 0xd0
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	d105      	bne.n	8003ef4 <std+0x54>
 8003ee8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef0:	f000 b978 	b.w	80041e4 <__retarget_lock_init_recursive>
 8003ef4:	bd10      	pop	{r4, pc}
 8003ef6:	bf00      	nop
 8003ef8:	08004065 	.word	0x08004065
 8003efc:	08004087 	.word	0x08004087
 8003f00:	080040bf 	.word	0x080040bf
 8003f04:	080040e3 	.word	0x080040e3
 8003f08:	2000035c 	.word	0x2000035c

08003f0c <stdio_exit_handler>:
 8003f0c:	4a02      	ldr	r2, [pc, #8]	@ (8003f18 <stdio_exit_handler+0xc>)
 8003f0e:	4903      	ldr	r1, [pc, #12]	@ (8003f1c <stdio_exit_handler+0x10>)
 8003f10:	4803      	ldr	r0, [pc, #12]	@ (8003f20 <stdio_exit_handler+0x14>)
 8003f12:	f000 b869 	b.w	8003fe8 <_fwalk_sglue>
 8003f16:	bf00      	nop
 8003f18:	2000000c 	.word	0x2000000c
 8003f1c:	08005b55 	.word	0x08005b55
 8003f20:	2000001c 	.word	0x2000001c

08003f24 <cleanup_stdio>:
 8003f24:	6841      	ldr	r1, [r0, #4]
 8003f26:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <cleanup_stdio+0x34>)
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	4299      	cmp	r1, r3
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	d001      	beq.n	8003f34 <cleanup_stdio+0x10>
 8003f30:	f001 fe10 	bl	8005b54 <_fflush_r>
 8003f34:	68a1      	ldr	r1, [r4, #8]
 8003f36:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <cleanup_stdio+0x38>)
 8003f38:	4299      	cmp	r1, r3
 8003f3a:	d002      	beq.n	8003f42 <cleanup_stdio+0x1e>
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f001 fe09 	bl	8005b54 <_fflush_r>
 8003f42:	68e1      	ldr	r1, [r4, #12]
 8003f44:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <cleanup_stdio+0x3c>)
 8003f46:	4299      	cmp	r1, r3
 8003f48:	d004      	beq.n	8003f54 <cleanup_stdio+0x30>
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f50:	f001 be00 	b.w	8005b54 <_fflush_r>
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	bf00      	nop
 8003f58:	2000035c 	.word	0x2000035c
 8003f5c:	200003c4 	.word	0x200003c4
 8003f60:	2000042c 	.word	0x2000042c

08003f64 <global_stdio_init.part.0>:
 8003f64:	b510      	push	{r4, lr}
 8003f66:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <global_stdio_init.part.0+0x30>)
 8003f68:	4c0b      	ldr	r4, [pc, #44]	@ (8003f98 <global_stdio_init.part.0+0x34>)
 8003f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f9c <global_stdio_init.part.0+0x38>)
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	2104      	movs	r1, #4
 8003f72:	2200      	movs	r2, #0
 8003f74:	f7ff ff94 	bl	8003ea0 <std>
 8003f78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	2109      	movs	r1, #9
 8003f80:	f7ff ff8e 	bl	8003ea0 <std>
 8003f84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f88:	2202      	movs	r2, #2
 8003f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8e:	2112      	movs	r1, #18
 8003f90:	f7ff bf86 	b.w	8003ea0 <std>
 8003f94:	20000494 	.word	0x20000494
 8003f98:	2000035c 	.word	0x2000035c
 8003f9c:	08003f0d 	.word	0x08003f0d

08003fa0 <__sfp_lock_acquire>:
 8003fa0:	4801      	ldr	r0, [pc, #4]	@ (8003fa8 <__sfp_lock_acquire+0x8>)
 8003fa2:	f000 b920 	b.w	80041e6 <__retarget_lock_acquire_recursive>
 8003fa6:	bf00      	nop
 8003fa8:	2000049d 	.word	0x2000049d

08003fac <__sfp_lock_release>:
 8003fac:	4801      	ldr	r0, [pc, #4]	@ (8003fb4 <__sfp_lock_release+0x8>)
 8003fae:	f000 b91b 	b.w	80041e8 <__retarget_lock_release_recursive>
 8003fb2:	bf00      	nop
 8003fb4:	2000049d 	.word	0x2000049d

08003fb8 <__sinit>:
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	4604      	mov	r4, r0
 8003fbc:	f7ff fff0 	bl	8003fa0 <__sfp_lock_acquire>
 8003fc0:	6a23      	ldr	r3, [r4, #32]
 8003fc2:	b11b      	cbz	r3, 8003fcc <__sinit+0x14>
 8003fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fc8:	f7ff bff0 	b.w	8003fac <__sfp_lock_release>
 8003fcc:	4b04      	ldr	r3, [pc, #16]	@ (8003fe0 <__sinit+0x28>)
 8003fce:	6223      	str	r3, [r4, #32]
 8003fd0:	4b04      	ldr	r3, [pc, #16]	@ (8003fe4 <__sinit+0x2c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f5      	bne.n	8003fc4 <__sinit+0xc>
 8003fd8:	f7ff ffc4 	bl	8003f64 <global_stdio_init.part.0>
 8003fdc:	e7f2      	b.n	8003fc4 <__sinit+0xc>
 8003fde:	bf00      	nop
 8003fe0:	08003f25 	.word	0x08003f25
 8003fe4:	20000494 	.word	0x20000494

08003fe8 <_fwalk_sglue>:
 8003fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fec:	4607      	mov	r7, r0
 8003fee:	4688      	mov	r8, r1
 8003ff0:	4614      	mov	r4, r2
 8003ff2:	2600      	movs	r6, #0
 8003ff4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ff8:	f1b9 0901 	subs.w	r9, r9, #1
 8003ffc:	d505      	bpl.n	800400a <_fwalk_sglue+0x22>
 8003ffe:	6824      	ldr	r4, [r4, #0]
 8004000:	2c00      	cmp	r4, #0
 8004002:	d1f7      	bne.n	8003ff4 <_fwalk_sglue+0xc>
 8004004:	4630      	mov	r0, r6
 8004006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800400a:	89ab      	ldrh	r3, [r5, #12]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d907      	bls.n	8004020 <_fwalk_sglue+0x38>
 8004010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004014:	3301      	adds	r3, #1
 8004016:	d003      	beq.n	8004020 <_fwalk_sglue+0x38>
 8004018:	4629      	mov	r1, r5
 800401a:	4638      	mov	r0, r7
 800401c:	47c0      	blx	r8
 800401e:	4306      	orrs	r6, r0
 8004020:	3568      	adds	r5, #104	@ 0x68
 8004022:	e7e9      	b.n	8003ff8 <_fwalk_sglue+0x10>

08004024 <siprintf>:
 8004024:	b40e      	push	{r1, r2, r3}
 8004026:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800402a:	b500      	push	{lr}
 800402c:	b09c      	sub	sp, #112	@ 0x70
 800402e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004030:	9002      	str	r0, [sp, #8]
 8004032:	9006      	str	r0, [sp, #24]
 8004034:	9107      	str	r1, [sp, #28]
 8004036:	9104      	str	r1, [sp, #16]
 8004038:	4808      	ldr	r0, [pc, #32]	@ (800405c <siprintf+0x38>)
 800403a:	4909      	ldr	r1, [pc, #36]	@ (8004060 <siprintf+0x3c>)
 800403c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004040:	9105      	str	r1, [sp, #20]
 8004042:	6800      	ldr	r0, [r0, #0]
 8004044:	a902      	add	r1, sp, #8
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	f001 fc08 	bl	800585c <_svfiprintf_r>
 800404c:	2200      	movs	r2, #0
 800404e:	9b02      	ldr	r3, [sp, #8]
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	b01c      	add	sp, #112	@ 0x70
 8004054:	f85d eb04 	ldr.w	lr, [sp], #4
 8004058:	b003      	add	sp, #12
 800405a:	4770      	bx	lr
 800405c:	20000018 	.word	0x20000018
 8004060:	ffff0208 	.word	0xffff0208

08004064 <__sread>:
 8004064:	b510      	push	{r4, lr}
 8004066:	460c      	mov	r4, r1
 8004068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800406c:	f000 f86c 	bl	8004148 <_read_r>
 8004070:	2800      	cmp	r0, #0
 8004072:	bfab      	itete	ge
 8004074:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004076:	89a3      	ldrhlt	r3, [r4, #12]
 8004078:	181b      	addge	r3, r3, r0
 800407a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800407e:	bfac      	ite	ge
 8004080:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004082:	81a3      	strhlt	r3, [r4, #12]
 8004084:	bd10      	pop	{r4, pc}

08004086 <__swrite>:
 8004086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800408a:	461f      	mov	r7, r3
 800408c:	898b      	ldrh	r3, [r1, #12]
 800408e:	4605      	mov	r5, r0
 8004090:	05db      	lsls	r3, r3, #23
 8004092:	460c      	mov	r4, r1
 8004094:	4616      	mov	r6, r2
 8004096:	d505      	bpl.n	80040a4 <__swrite+0x1e>
 8004098:	2302      	movs	r3, #2
 800409a:	2200      	movs	r2, #0
 800409c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a0:	f000 f840 	bl	8004124 <_lseek_r>
 80040a4:	89a3      	ldrh	r3, [r4, #12]
 80040a6:	4632      	mov	r2, r6
 80040a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040ac:	81a3      	strh	r3, [r4, #12]
 80040ae:	4628      	mov	r0, r5
 80040b0:	463b      	mov	r3, r7
 80040b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ba:	f000 b857 	b.w	800416c <_write_r>

080040be <__sseek>:
 80040be:	b510      	push	{r4, lr}
 80040c0:	460c      	mov	r4, r1
 80040c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040c6:	f000 f82d 	bl	8004124 <_lseek_r>
 80040ca:	1c43      	adds	r3, r0, #1
 80040cc:	89a3      	ldrh	r3, [r4, #12]
 80040ce:	bf15      	itete	ne
 80040d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80040d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80040d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80040da:	81a3      	strheq	r3, [r4, #12]
 80040dc:	bf18      	it	ne
 80040de:	81a3      	strhne	r3, [r4, #12]
 80040e0:	bd10      	pop	{r4, pc}

080040e2 <__sclose>:
 80040e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e6:	f000 b80d 	b.w	8004104 <_close_r>

080040ea <memset>:
 80040ea:	4603      	mov	r3, r0
 80040ec:	4402      	add	r2, r0
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d100      	bne.n	80040f4 <memset+0xa>
 80040f2:	4770      	bx	lr
 80040f4:	f803 1b01 	strb.w	r1, [r3], #1
 80040f8:	e7f9      	b.n	80040ee <memset+0x4>
	...

080040fc <_localeconv_r>:
 80040fc:	4800      	ldr	r0, [pc, #0]	@ (8004100 <_localeconv_r+0x4>)
 80040fe:	4770      	bx	lr
 8004100:	20000158 	.word	0x20000158

08004104 <_close_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	2300      	movs	r3, #0
 8004108:	4d05      	ldr	r5, [pc, #20]	@ (8004120 <_close_r+0x1c>)
 800410a:	4604      	mov	r4, r0
 800410c:	4608      	mov	r0, r1
 800410e:	602b      	str	r3, [r5, #0]
 8004110:	f7fd f84f 	bl	80011b2 <_close>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_close_r+0x1a>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_close_r+0x1a>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	20000498 	.word	0x20000498

08004124 <_lseek_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4604      	mov	r4, r0
 8004128:	4608      	mov	r0, r1
 800412a:	4611      	mov	r1, r2
 800412c:	2200      	movs	r2, #0
 800412e:	4d05      	ldr	r5, [pc, #20]	@ (8004144 <_lseek_r+0x20>)
 8004130:	602a      	str	r2, [r5, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7fd f861 	bl	80011fa <_lseek>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_lseek_r+0x1e>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_lseek_r+0x1e>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	20000498 	.word	0x20000498

08004148 <_read_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	4604      	mov	r4, r0
 800414c:	4608      	mov	r0, r1
 800414e:	4611      	mov	r1, r2
 8004150:	2200      	movs	r2, #0
 8004152:	4d05      	ldr	r5, [pc, #20]	@ (8004168 <_read_r+0x20>)
 8004154:	602a      	str	r2, [r5, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	f7fc fff2 	bl	8001140 <_read>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_read_r+0x1e>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_read_r+0x1e>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	20000498 	.word	0x20000498

0800416c <_write_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4604      	mov	r4, r0
 8004170:	4608      	mov	r0, r1
 8004172:	4611      	mov	r1, r2
 8004174:	2200      	movs	r2, #0
 8004176:	4d05      	ldr	r5, [pc, #20]	@ (800418c <_write_r+0x20>)
 8004178:	602a      	str	r2, [r5, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	f7fc fffd 	bl	800117a <_write>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_write_r+0x1e>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_write_r+0x1e>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20000498 	.word	0x20000498

08004190 <__errno>:
 8004190:	4b01      	ldr	r3, [pc, #4]	@ (8004198 <__errno+0x8>)
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000018 	.word	0x20000018

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	2600      	movs	r6, #0
 80041a0:	4d0c      	ldr	r5, [pc, #48]	@ (80041d4 <__libc_init_array+0x38>)
 80041a2:	4c0d      	ldr	r4, [pc, #52]	@ (80041d8 <__libc_init_array+0x3c>)
 80041a4:	1b64      	subs	r4, r4, r5
 80041a6:	10a4      	asrs	r4, r4, #2
 80041a8:	42a6      	cmp	r6, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	f002 f86e 	bl	800628c <_init>
 80041b0:	2600      	movs	r6, #0
 80041b2:	4d0a      	ldr	r5, [pc, #40]	@ (80041dc <__libc_init_array+0x40>)
 80041b4:	4c0a      	ldr	r4, [pc, #40]	@ (80041e0 <__libc_init_array+0x44>)
 80041b6:	1b64      	subs	r4, r4, r5
 80041b8:	10a4      	asrs	r4, r4, #2
 80041ba:	42a6      	cmp	r6, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c4:	4798      	blx	r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ce:	4798      	blx	r3
 80041d0:	3601      	adds	r6, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	08006680 	.word	0x08006680
 80041d8:	08006680 	.word	0x08006680
 80041dc:	08006680 	.word	0x08006680
 80041e0:	08006684 	.word	0x08006684

080041e4 <__retarget_lock_init_recursive>:
 80041e4:	4770      	bx	lr

080041e6 <__retarget_lock_acquire_recursive>:
 80041e6:	4770      	bx	lr

080041e8 <__retarget_lock_release_recursive>:
 80041e8:	4770      	bx	lr

080041ea <memchr>:
 80041ea:	4603      	mov	r3, r0
 80041ec:	b510      	push	{r4, lr}
 80041ee:	b2c9      	uxtb	r1, r1
 80041f0:	4402      	add	r2, r0
 80041f2:	4293      	cmp	r3, r2
 80041f4:	4618      	mov	r0, r3
 80041f6:	d101      	bne.n	80041fc <memchr+0x12>
 80041f8:	2000      	movs	r0, #0
 80041fa:	e003      	b.n	8004204 <memchr+0x1a>
 80041fc:	7804      	ldrb	r4, [r0, #0]
 80041fe:	3301      	adds	r3, #1
 8004200:	428c      	cmp	r4, r1
 8004202:	d1f6      	bne.n	80041f2 <memchr+0x8>
 8004204:	bd10      	pop	{r4, pc}

08004206 <quorem>:
 8004206:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420a:	6903      	ldr	r3, [r0, #16]
 800420c:	690c      	ldr	r4, [r1, #16]
 800420e:	4607      	mov	r7, r0
 8004210:	42a3      	cmp	r3, r4
 8004212:	db7e      	blt.n	8004312 <quorem+0x10c>
 8004214:	3c01      	subs	r4, #1
 8004216:	00a3      	lsls	r3, r4, #2
 8004218:	f100 0514 	add.w	r5, r0, #20
 800421c:	f101 0814 	add.w	r8, r1, #20
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800422c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004230:	3301      	adds	r3, #1
 8004232:	429a      	cmp	r2, r3
 8004234:	fbb2 f6f3 	udiv	r6, r2, r3
 8004238:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800423c:	d32e      	bcc.n	800429c <quorem+0x96>
 800423e:	f04f 0a00 	mov.w	sl, #0
 8004242:	46c4      	mov	ip, r8
 8004244:	46ae      	mov	lr, r5
 8004246:	46d3      	mov	fp, sl
 8004248:	f85c 3b04 	ldr.w	r3, [ip], #4
 800424c:	b298      	uxth	r0, r3
 800424e:	fb06 a000 	mla	r0, r6, r0, sl
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	0c02      	lsrs	r2, r0, #16
 8004256:	fb06 2303 	mla	r3, r6, r3, r2
 800425a:	f8de 2000 	ldr.w	r2, [lr]
 800425e:	b280      	uxth	r0, r0
 8004260:	b292      	uxth	r2, r2
 8004262:	1a12      	subs	r2, r2, r0
 8004264:	445a      	add	r2, fp
 8004266:	f8de 0000 	ldr.w	r0, [lr]
 800426a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800426e:	b29b      	uxth	r3, r3
 8004270:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004274:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004278:	b292      	uxth	r2, r2
 800427a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800427e:	45e1      	cmp	r9, ip
 8004280:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004284:	f84e 2b04 	str.w	r2, [lr], #4
 8004288:	d2de      	bcs.n	8004248 <quorem+0x42>
 800428a:	9b00      	ldr	r3, [sp, #0]
 800428c:	58eb      	ldr	r3, [r5, r3]
 800428e:	b92b      	cbnz	r3, 800429c <quorem+0x96>
 8004290:	9b01      	ldr	r3, [sp, #4]
 8004292:	3b04      	subs	r3, #4
 8004294:	429d      	cmp	r5, r3
 8004296:	461a      	mov	r2, r3
 8004298:	d32f      	bcc.n	80042fa <quorem+0xf4>
 800429a:	613c      	str	r4, [r7, #16]
 800429c:	4638      	mov	r0, r7
 800429e:	f001 f979 	bl	8005594 <__mcmp>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	db25      	blt.n	80042f2 <quorem+0xec>
 80042a6:	4629      	mov	r1, r5
 80042a8:	2000      	movs	r0, #0
 80042aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80042ae:	f8d1 c000 	ldr.w	ip, [r1]
 80042b2:	fa1f fe82 	uxth.w	lr, r2
 80042b6:	fa1f f38c 	uxth.w	r3, ip
 80042ba:	eba3 030e 	sub.w	r3, r3, lr
 80042be:	4403      	add	r3, r0
 80042c0:	0c12      	lsrs	r2, r2, #16
 80042c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80042c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042d0:	45c1      	cmp	r9, r8
 80042d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80042d6:	f841 3b04 	str.w	r3, [r1], #4
 80042da:	d2e6      	bcs.n	80042aa <quorem+0xa4>
 80042dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042e4:	b922      	cbnz	r2, 80042f0 <quorem+0xea>
 80042e6:	3b04      	subs	r3, #4
 80042e8:	429d      	cmp	r5, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	d30b      	bcc.n	8004306 <quorem+0x100>
 80042ee:	613c      	str	r4, [r7, #16]
 80042f0:	3601      	adds	r6, #1
 80042f2:	4630      	mov	r0, r6
 80042f4:	b003      	add	sp, #12
 80042f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	3b04      	subs	r3, #4
 80042fe:	2a00      	cmp	r2, #0
 8004300:	d1cb      	bne.n	800429a <quorem+0x94>
 8004302:	3c01      	subs	r4, #1
 8004304:	e7c6      	b.n	8004294 <quorem+0x8e>
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	3b04      	subs	r3, #4
 800430a:	2a00      	cmp	r2, #0
 800430c:	d1ef      	bne.n	80042ee <quorem+0xe8>
 800430e:	3c01      	subs	r4, #1
 8004310:	e7ea      	b.n	80042e8 <quorem+0xe2>
 8004312:	2000      	movs	r0, #0
 8004314:	e7ee      	b.n	80042f4 <quorem+0xee>
	...

08004318 <_dtoa_r>:
 8004318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431c:	4614      	mov	r4, r2
 800431e:	461d      	mov	r5, r3
 8004320:	69c7      	ldr	r7, [r0, #28]
 8004322:	b097      	sub	sp, #92	@ 0x5c
 8004324:	4683      	mov	fp, r0
 8004326:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800432a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800432c:	b97f      	cbnz	r7, 800434e <_dtoa_r+0x36>
 800432e:	2010      	movs	r0, #16
 8004330:	f000 fe02 	bl	8004f38 <malloc>
 8004334:	4602      	mov	r2, r0
 8004336:	f8cb 001c 	str.w	r0, [fp, #28]
 800433a:	b920      	cbnz	r0, 8004346 <_dtoa_r+0x2e>
 800433c:	21ef      	movs	r1, #239	@ 0xef
 800433e:	4ba8      	ldr	r3, [pc, #672]	@ (80045e0 <_dtoa_r+0x2c8>)
 8004340:	48a8      	ldr	r0, [pc, #672]	@ (80045e4 <_dtoa_r+0x2cc>)
 8004342:	f001 fc67 	bl	8005c14 <__assert_func>
 8004346:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800434a:	6007      	str	r7, [r0, #0]
 800434c:	60c7      	str	r7, [r0, #12]
 800434e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004352:	6819      	ldr	r1, [r3, #0]
 8004354:	b159      	cbz	r1, 800436e <_dtoa_r+0x56>
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	2301      	movs	r3, #1
 800435a:	4093      	lsls	r3, r2
 800435c:	604a      	str	r2, [r1, #4]
 800435e:	608b      	str	r3, [r1, #8]
 8004360:	4658      	mov	r0, fp
 8004362:	f000 fedf 	bl	8005124 <_Bfree>
 8004366:	2200      	movs	r2, #0
 8004368:	f8db 301c 	ldr.w	r3, [fp, #28]
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	1e2b      	subs	r3, r5, #0
 8004370:	bfaf      	iteee	ge
 8004372:	2300      	movge	r3, #0
 8004374:	2201      	movlt	r2, #1
 8004376:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800437a:	9303      	strlt	r3, [sp, #12]
 800437c:	bfa8      	it	ge
 800437e:	6033      	strge	r3, [r6, #0]
 8004380:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004384:	4b98      	ldr	r3, [pc, #608]	@ (80045e8 <_dtoa_r+0x2d0>)
 8004386:	bfb8      	it	lt
 8004388:	6032      	strlt	r2, [r6, #0]
 800438a:	ea33 0308 	bics.w	r3, r3, r8
 800438e:	d112      	bne.n	80043b6 <_dtoa_r+0x9e>
 8004390:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004394:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800439c:	4323      	orrs	r3, r4
 800439e:	f000 8550 	beq.w	8004e42 <_dtoa_r+0xb2a>
 80043a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80043a4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80045ec <_dtoa_r+0x2d4>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 8552 	beq.w	8004e52 <_dtoa_r+0xb3a>
 80043ae:	f10a 0303 	add.w	r3, sl, #3
 80043b2:	f000 bd4c 	b.w	8004e4e <_dtoa_r+0xb36>
 80043b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80043be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043c2:	2200      	movs	r2, #0
 80043c4:	2300      	movs	r3, #0
 80043c6:	f7fc faef 	bl	80009a8 <__aeabi_dcmpeq>
 80043ca:	4607      	mov	r7, r0
 80043cc:	b158      	cbz	r0, 80043e6 <_dtoa_r+0xce>
 80043ce:	2301      	movs	r3, #1
 80043d0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80043d6:	b113      	cbz	r3, 80043de <_dtoa_r+0xc6>
 80043d8:	4b85      	ldr	r3, [pc, #532]	@ (80045f0 <_dtoa_r+0x2d8>)
 80043da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80045f4 <_dtoa_r+0x2dc>
 80043e2:	f000 bd36 	b.w	8004e52 <_dtoa_r+0xb3a>
 80043e6:	ab14      	add	r3, sp, #80	@ 0x50
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	ab15      	add	r3, sp, #84	@ 0x54
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	4658      	mov	r0, fp
 80043f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80043f4:	f001 f97e 	bl	80056f4 <__d2b>
 80043f8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80043fc:	4681      	mov	r9, r0
 80043fe:	2e00      	cmp	r6, #0
 8004400:	d077      	beq.n	80044f2 <_dtoa_r+0x1da>
 8004402:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004408:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800440c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004410:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004414:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004418:	9712      	str	r7, [sp, #72]	@ 0x48
 800441a:	4619      	mov	r1, r3
 800441c:	2200      	movs	r2, #0
 800441e:	4b76      	ldr	r3, [pc, #472]	@ (80045f8 <_dtoa_r+0x2e0>)
 8004420:	f7fb fea2 	bl	8000168 <__aeabi_dsub>
 8004424:	a368      	add	r3, pc, #416	@ (adr r3, 80045c8 <_dtoa_r+0x2b0>)
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f7fc f855 	bl	80004d8 <__aeabi_dmul>
 800442e:	a368      	add	r3, pc, #416	@ (adr r3, 80045d0 <_dtoa_r+0x2b8>)
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f7fb fe9a 	bl	800016c <__adddf3>
 8004438:	4604      	mov	r4, r0
 800443a:	4630      	mov	r0, r6
 800443c:	460d      	mov	r5, r1
 800443e:	f7fb ffe1 	bl	8000404 <__aeabi_i2d>
 8004442:	a365      	add	r3, pc, #404	@ (adr r3, 80045d8 <_dtoa_r+0x2c0>)
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f7fc f846 	bl	80004d8 <__aeabi_dmul>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4620      	mov	r0, r4
 8004452:	4629      	mov	r1, r5
 8004454:	f7fb fe8a 	bl	800016c <__adddf3>
 8004458:	4604      	mov	r4, r0
 800445a:	460d      	mov	r5, r1
 800445c:	f7fc faec 	bl	8000a38 <__aeabi_d2iz>
 8004460:	2200      	movs	r2, #0
 8004462:	4607      	mov	r7, r0
 8004464:	2300      	movs	r3, #0
 8004466:	4620      	mov	r0, r4
 8004468:	4629      	mov	r1, r5
 800446a:	f7fc faa7 	bl	80009bc <__aeabi_dcmplt>
 800446e:	b140      	cbz	r0, 8004482 <_dtoa_r+0x16a>
 8004470:	4638      	mov	r0, r7
 8004472:	f7fb ffc7 	bl	8000404 <__aeabi_i2d>
 8004476:	4622      	mov	r2, r4
 8004478:	462b      	mov	r3, r5
 800447a:	f7fc fa95 	bl	80009a8 <__aeabi_dcmpeq>
 800447e:	b900      	cbnz	r0, 8004482 <_dtoa_r+0x16a>
 8004480:	3f01      	subs	r7, #1
 8004482:	2f16      	cmp	r7, #22
 8004484:	d853      	bhi.n	800452e <_dtoa_r+0x216>
 8004486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800448a:	4b5c      	ldr	r3, [pc, #368]	@ (80045fc <_dtoa_r+0x2e4>)
 800448c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f7fc fa92 	bl	80009bc <__aeabi_dcmplt>
 8004498:	2800      	cmp	r0, #0
 800449a:	d04a      	beq.n	8004532 <_dtoa_r+0x21a>
 800449c:	2300      	movs	r3, #0
 800449e:	3f01      	subs	r7, #1
 80044a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80044a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80044a4:	1b9b      	subs	r3, r3, r6
 80044a6:	1e5a      	subs	r2, r3, #1
 80044a8:	bf46      	itte	mi
 80044aa:	f1c3 0801 	rsbmi	r8, r3, #1
 80044ae:	2300      	movmi	r3, #0
 80044b0:	f04f 0800 	movpl.w	r8, #0
 80044b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80044b6:	bf48      	it	mi
 80044b8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80044ba:	2f00      	cmp	r7, #0
 80044bc:	db3b      	blt.n	8004536 <_dtoa_r+0x21e>
 80044be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044c0:	970e      	str	r7, [sp, #56]	@ 0x38
 80044c2:	443b      	add	r3, r7
 80044c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80044c6:	2300      	movs	r3, #0
 80044c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80044ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80044cc:	2b09      	cmp	r3, #9
 80044ce:	d866      	bhi.n	800459e <_dtoa_r+0x286>
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	bfc4      	itt	gt
 80044d4:	3b04      	subgt	r3, #4
 80044d6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80044d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80044da:	bfc8      	it	gt
 80044dc:	2400      	movgt	r4, #0
 80044de:	f1a3 0302 	sub.w	r3, r3, #2
 80044e2:	bfd8      	it	le
 80044e4:	2401      	movle	r4, #1
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d864      	bhi.n	80045b4 <_dtoa_r+0x29c>
 80044ea:	e8df f003 	tbb	[pc, r3]
 80044ee:	382b      	.short	0x382b
 80044f0:	5636      	.short	0x5636
 80044f2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80044f6:	441e      	add	r6, r3
 80044f8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	bfc1      	itttt	gt
 8004500:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004504:	fa08 f803 	lslgt.w	r8, r8, r3
 8004508:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800450c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004510:	bfd6      	itet	le
 8004512:	f1c3 0320 	rsble	r3, r3, #32
 8004516:	ea48 0003 	orrgt.w	r0, r8, r3
 800451a:	fa04 f003 	lslle.w	r0, r4, r3
 800451e:	f7fb ff61 	bl	80003e4 <__aeabi_ui2d>
 8004522:	2201      	movs	r2, #1
 8004524:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004528:	3e01      	subs	r6, #1
 800452a:	9212      	str	r2, [sp, #72]	@ 0x48
 800452c:	e775      	b.n	800441a <_dtoa_r+0x102>
 800452e:	2301      	movs	r3, #1
 8004530:	e7b6      	b.n	80044a0 <_dtoa_r+0x188>
 8004532:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004534:	e7b5      	b.n	80044a2 <_dtoa_r+0x18a>
 8004536:	427b      	negs	r3, r7
 8004538:	930a      	str	r3, [sp, #40]	@ 0x28
 800453a:	2300      	movs	r3, #0
 800453c:	eba8 0807 	sub.w	r8, r8, r7
 8004540:	930e      	str	r3, [sp, #56]	@ 0x38
 8004542:	e7c2      	b.n	80044ca <_dtoa_r+0x1b2>
 8004544:	2300      	movs	r3, #0
 8004546:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004548:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800454a:	2b00      	cmp	r3, #0
 800454c:	dc35      	bgt.n	80045ba <_dtoa_r+0x2a2>
 800454e:	2301      	movs	r3, #1
 8004550:	461a      	mov	r2, r3
 8004552:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004556:	9221      	str	r2, [sp, #132]	@ 0x84
 8004558:	e00b      	b.n	8004572 <_dtoa_r+0x25a>
 800455a:	2301      	movs	r3, #1
 800455c:	e7f3      	b.n	8004546 <_dtoa_r+0x22e>
 800455e:	2300      	movs	r3, #0
 8004560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004562:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	9308      	str	r3, [sp, #32]
 8004568:	3301      	adds	r3, #1
 800456a:	2b01      	cmp	r3, #1
 800456c:	9307      	str	r3, [sp, #28]
 800456e:	bfb8      	it	lt
 8004570:	2301      	movlt	r3, #1
 8004572:	2100      	movs	r1, #0
 8004574:	2204      	movs	r2, #4
 8004576:	f8db 001c 	ldr.w	r0, [fp, #28]
 800457a:	f102 0514 	add.w	r5, r2, #20
 800457e:	429d      	cmp	r5, r3
 8004580:	d91f      	bls.n	80045c2 <_dtoa_r+0x2aa>
 8004582:	6041      	str	r1, [r0, #4]
 8004584:	4658      	mov	r0, fp
 8004586:	f000 fd8d 	bl	80050a4 <_Balloc>
 800458a:	4682      	mov	sl, r0
 800458c:	2800      	cmp	r0, #0
 800458e:	d139      	bne.n	8004604 <_dtoa_r+0x2ec>
 8004590:	4602      	mov	r2, r0
 8004592:	f240 11af 	movw	r1, #431	@ 0x1af
 8004596:	4b1a      	ldr	r3, [pc, #104]	@ (8004600 <_dtoa_r+0x2e8>)
 8004598:	e6d2      	b.n	8004340 <_dtoa_r+0x28>
 800459a:	2301      	movs	r3, #1
 800459c:	e7e0      	b.n	8004560 <_dtoa_r+0x248>
 800459e:	2401      	movs	r4, #1
 80045a0:	2300      	movs	r3, #0
 80045a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80045a4:	9320      	str	r3, [sp, #128]	@ 0x80
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295
 80045aa:	2200      	movs	r2, #0
 80045ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80045b0:	2312      	movs	r3, #18
 80045b2:	e7d0      	b.n	8004556 <_dtoa_r+0x23e>
 80045b4:	2301      	movs	r3, #1
 80045b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045b8:	e7f5      	b.n	80045a6 <_dtoa_r+0x28e>
 80045ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80045c0:	e7d7      	b.n	8004572 <_dtoa_r+0x25a>
 80045c2:	3101      	adds	r1, #1
 80045c4:	0052      	lsls	r2, r2, #1
 80045c6:	e7d8      	b.n	800457a <_dtoa_r+0x262>
 80045c8:	636f4361 	.word	0x636f4361
 80045cc:	3fd287a7 	.word	0x3fd287a7
 80045d0:	8b60c8b3 	.word	0x8b60c8b3
 80045d4:	3fc68a28 	.word	0x3fc68a28
 80045d8:	509f79fb 	.word	0x509f79fb
 80045dc:	3fd34413 	.word	0x3fd34413
 80045e0:	0800634b 	.word	0x0800634b
 80045e4:	08006362 	.word	0x08006362
 80045e8:	7ff00000 	.word	0x7ff00000
 80045ec:	08006347 	.word	0x08006347
 80045f0:	0800631b 	.word	0x0800631b
 80045f4:	0800631a 	.word	0x0800631a
 80045f8:	3ff80000 	.word	0x3ff80000
 80045fc:	08006458 	.word	0x08006458
 8004600:	080063ba 	.word	0x080063ba
 8004604:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004608:	6018      	str	r0, [r3, #0]
 800460a:	9b07      	ldr	r3, [sp, #28]
 800460c:	2b0e      	cmp	r3, #14
 800460e:	f200 80a4 	bhi.w	800475a <_dtoa_r+0x442>
 8004612:	2c00      	cmp	r4, #0
 8004614:	f000 80a1 	beq.w	800475a <_dtoa_r+0x442>
 8004618:	2f00      	cmp	r7, #0
 800461a:	dd33      	ble.n	8004684 <_dtoa_r+0x36c>
 800461c:	4b86      	ldr	r3, [pc, #536]	@ (8004838 <_dtoa_r+0x520>)
 800461e:	f007 020f 	and.w	r2, r7, #15
 8004622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004626:	05f8      	lsls	r0, r7, #23
 8004628:	e9d3 3400 	ldrd	r3, r4, [r3]
 800462c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004630:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004634:	d516      	bpl.n	8004664 <_dtoa_r+0x34c>
 8004636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800463a:	4b80      	ldr	r3, [pc, #512]	@ (800483c <_dtoa_r+0x524>)
 800463c:	2603      	movs	r6, #3
 800463e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004642:	f7fc f873 	bl	800072c <__aeabi_ddiv>
 8004646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800464a:	f004 040f 	and.w	r4, r4, #15
 800464e:	4d7b      	ldr	r5, [pc, #492]	@ (800483c <_dtoa_r+0x524>)
 8004650:	b954      	cbnz	r4, 8004668 <_dtoa_r+0x350>
 8004652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800465a:	f7fc f867 	bl	800072c <__aeabi_ddiv>
 800465e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004662:	e028      	b.n	80046b6 <_dtoa_r+0x39e>
 8004664:	2602      	movs	r6, #2
 8004666:	e7f2      	b.n	800464e <_dtoa_r+0x336>
 8004668:	07e1      	lsls	r1, r4, #31
 800466a:	d508      	bpl.n	800467e <_dtoa_r+0x366>
 800466c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004670:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004674:	f7fb ff30 	bl	80004d8 <__aeabi_dmul>
 8004678:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800467c:	3601      	adds	r6, #1
 800467e:	1064      	asrs	r4, r4, #1
 8004680:	3508      	adds	r5, #8
 8004682:	e7e5      	b.n	8004650 <_dtoa_r+0x338>
 8004684:	f000 80d2 	beq.w	800482c <_dtoa_r+0x514>
 8004688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800468c:	427c      	negs	r4, r7
 800468e:	4b6a      	ldr	r3, [pc, #424]	@ (8004838 <_dtoa_r+0x520>)
 8004690:	f004 020f 	and.w	r2, r4, #15
 8004694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f7fb ff1c 	bl	80004d8 <__aeabi_dmul>
 80046a0:	2602      	movs	r6, #2
 80046a2:	2300      	movs	r3, #0
 80046a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046a8:	4d64      	ldr	r5, [pc, #400]	@ (800483c <_dtoa_r+0x524>)
 80046aa:	1124      	asrs	r4, r4, #4
 80046ac:	2c00      	cmp	r4, #0
 80046ae:	f040 80b2 	bne.w	8004816 <_dtoa_r+0x4fe>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1d3      	bne.n	800465e <_dtoa_r+0x346>
 80046b6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80046ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80b7 	beq.w	8004830 <_dtoa_r+0x518>
 80046c2:	2200      	movs	r2, #0
 80046c4:	4620      	mov	r0, r4
 80046c6:	4629      	mov	r1, r5
 80046c8:	4b5d      	ldr	r3, [pc, #372]	@ (8004840 <_dtoa_r+0x528>)
 80046ca:	f7fc f977 	bl	80009bc <__aeabi_dcmplt>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	f000 80ae 	beq.w	8004830 <_dtoa_r+0x518>
 80046d4:	9b07      	ldr	r3, [sp, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80aa 	beq.w	8004830 <_dtoa_r+0x518>
 80046dc:	9b08      	ldr	r3, [sp, #32]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	dd37      	ble.n	8004752 <_dtoa_r+0x43a>
 80046e2:	1e7b      	subs	r3, r7, #1
 80046e4:	4620      	mov	r0, r4
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	2200      	movs	r2, #0
 80046ea:	4629      	mov	r1, r5
 80046ec:	4b55      	ldr	r3, [pc, #340]	@ (8004844 <_dtoa_r+0x52c>)
 80046ee:	f7fb fef3 	bl	80004d8 <__aeabi_dmul>
 80046f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046f6:	9c08      	ldr	r4, [sp, #32]
 80046f8:	3601      	adds	r6, #1
 80046fa:	4630      	mov	r0, r6
 80046fc:	f7fb fe82 	bl	8000404 <__aeabi_i2d>
 8004700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004704:	f7fb fee8 	bl	80004d8 <__aeabi_dmul>
 8004708:	2200      	movs	r2, #0
 800470a:	4b4f      	ldr	r3, [pc, #316]	@ (8004848 <_dtoa_r+0x530>)
 800470c:	f7fb fd2e 	bl	800016c <__adddf3>
 8004710:	4605      	mov	r5, r0
 8004712:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004716:	2c00      	cmp	r4, #0
 8004718:	f040 809a 	bne.w	8004850 <_dtoa_r+0x538>
 800471c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004720:	2200      	movs	r2, #0
 8004722:	4b4a      	ldr	r3, [pc, #296]	@ (800484c <_dtoa_r+0x534>)
 8004724:	f7fb fd20 	bl	8000168 <__aeabi_dsub>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004730:	462a      	mov	r2, r5
 8004732:	4633      	mov	r3, r6
 8004734:	f7fc f960 	bl	80009f8 <__aeabi_dcmpgt>
 8004738:	2800      	cmp	r0, #0
 800473a:	f040 828e 	bne.w	8004c5a <_dtoa_r+0x942>
 800473e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004742:	462a      	mov	r2, r5
 8004744:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004748:	f7fc f938 	bl	80009bc <__aeabi_dcmplt>
 800474c:	2800      	cmp	r0, #0
 800474e:	f040 8127 	bne.w	80049a0 <_dtoa_r+0x688>
 8004752:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004756:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800475a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800475c:	2b00      	cmp	r3, #0
 800475e:	f2c0 8163 	blt.w	8004a28 <_dtoa_r+0x710>
 8004762:	2f0e      	cmp	r7, #14
 8004764:	f300 8160 	bgt.w	8004a28 <_dtoa_r+0x710>
 8004768:	4b33      	ldr	r3, [pc, #204]	@ (8004838 <_dtoa_r+0x520>)
 800476a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800476e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004772:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004776:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004778:	2b00      	cmp	r3, #0
 800477a:	da03      	bge.n	8004784 <_dtoa_r+0x46c>
 800477c:	9b07      	ldr	r3, [sp, #28]
 800477e:	2b00      	cmp	r3, #0
 8004780:	f340 8100 	ble.w	8004984 <_dtoa_r+0x66c>
 8004784:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004788:	4656      	mov	r6, sl
 800478a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800478e:	4620      	mov	r0, r4
 8004790:	4629      	mov	r1, r5
 8004792:	f7fb ffcb 	bl	800072c <__aeabi_ddiv>
 8004796:	f7fc f94f 	bl	8000a38 <__aeabi_d2iz>
 800479a:	4680      	mov	r8, r0
 800479c:	f7fb fe32 	bl	8000404 <__aeabi_i2d>
 80047a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047a4:	f7fb fe98 	bl	80004d8 <__aeabi_dmul>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4620      	mov	r0, r4
 80047ae:	4629      	mov	r1, r5
 80047b0:	f7fb fcda 	bl	8000168 <__aeabi_dsub>
 80047b4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80047b8:	9d07      	ldr	r5, [sp, #28]
 80047ba:	f806 4b01 	strb.w	r4, [r6], #1
 80047be:	eba6 040a 	sub.w	r4, r6, sl
 80047c2:	42a5      	cmp	r5, r4
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	f040 8116 	bne.w	80049f8 <_dtoa_r+0x6e0>
 80047cc:	f7fb fcce 	bl	800016c <__adddf3>
 80047d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047d4:	4604      	mov	r4, r0
 80047d6:	460d      	mov	r5, r1
 80047d8:	f7fc f90e 	bl	80009f8 <__aeabi_dcmpgt>
 80047dc:	2800      	cmp	r0, #0
 80047de:	f040 80f8 	bne.w	80049d2 <_dtoa_r+0x6ba>
 80047e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047e6:	4620      	mov	r0, r4
 80047e8:	4629      	mov	r1, r5
 80047ea:	f7fc f8dd 	bl	80009a8 <__aeabi_dcmpeq>
 80047ee:	b118      	cbz	r0, 80047f8 <_dtoa_r+0x4e0>
 80047f0:	f018 0f01 	tst.w	r8, #1
 80047f4:	f040 80ed 	bne.w	80049d2 <_dtoa_r+0x6ba>
 80047f8:	4649      	mov	r1, r9
 80047fa:	4658      	mov	r0, fp
 80047fc:	f000 fc92 	bl	8005124 <_Bfree>
 8004800:	2300      	movs	r3, #0
 8004802:	7033      	strb	r3, [r6, #0]
 8004804:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004806:	3701      	adds	r7, #1
 8004808:	601f      	str	r7, [r3, #0]
 800480a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8320 	beq.w	8004e52 <_dtoa_r+0xb3a>
 8004812:	601e      	str	r6, [r3, #0]
 8004814:	e31d      	b.n	8004e52 <_dtoa_r+0xb3a>
 8004816:	07e2      	lsls	r2, r4, #31
 8004818:	d505      	bpl.n	8004826 <_dtoa_r+0x50e>
 800481a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800481e:	f7fb fe5b 	bl	80004d8 <__aeabi_dmul>
 8004822:	2301      	movs	r3, #1
 8004824:	3601      	adds	r6, #1
 8004826:	1064      	asrs	r4, r4, #1
 8004828:	3508      	adds	r5, #8
 800482a:	e73f      	b.n	80046ac <_dtoa_r+0x394>
 800482c:	2602      	movs	r6, #2
 800482e:	e742      	b.n	80046b6 <_dtoa_r+0x39e>
 8004830:	9c07      	ldr	r4, [sp, #28]
 8004832:	9704      	str	r7, [sp, #16]
 8004834:	e761      	b.n	80046fa <_dtoa_r+0x3e2>
 8004836:	bf00      	nop
 8004838:	08006458 	.word	0x08006458
 800483c:	08006430 	.word	0x08006430
 8004840:	3ff00000 	.word	0x3ff00000
 8004844:	40240000 	.word	0x40240000
 8004848:	401c0000 	.word	0x401c0000
 800484c:	40140000 	.word	0x40140000
 8004850:	4b70      	ldr	r3, [pc, #448]	@ (8004a14 <_dtoa_r+0x6fc>)
 8004852:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004854:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004858:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800485c:	4454      	add	r4, sl
 800485e:	2900      	cmp	r1, #0
 8004860:	d045      	beq.n	80048ee <_dtoa_r+0x5d6>
 8004862:	2000      	movs	r0, #0
 8004864:	496c      	ldr	r1, [pc, #432]	@ (8004a18 <_dtoa_r+0x700>)
 8004866:	f7fb ff61 	bl	800072c <__aeabi_ddiv>
 800486a:	4633      	mov	r3, r6
 800486c:	462a      	mov	r2, r5
 800486e:	f7fb fc7b 	bl	8000168 <__aeabi_dsub>
 8004872:	4656      	mov	r6, sl
 8004874:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800487c:	f7fc f8dc 	bl	8000a38 <__aeabi_d2iz>
 8004880:	4605      	mov	r5, r0
 8004882:	f7fb fdbf 	bl	8000404 <__aeabi_i2d>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800488e:	f7fb fc6b 	bl	8000168 <__aeabi_dsub>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	3530      	adds	r5, #48	@ 0x30
 8004898:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800489c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80048a0:	f806 5b01 	strb.w	r5, [r6], #1
 80048a4:	f7fc f88a 	bl	80009bc <__aeabi_dcmplt>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d163      	bne.n	8004974 <_dtoa_r+0x65c>
 80048ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048b0:	2000      	movs	r0, #0
 80048b2:	495a      	ldr	r1, [pc, #360]	@ (8004a1c <_dtoa_r+0x704>)
 80048b4:	f7fb fc58 	bl	8000168 <__aeabi_dsub>
 80048b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80048bc:	f7fc f87e 	bl	80009bc <__aeabi_dcmplt>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	f040 8087 	bne.w	80049d4 <_dtoa_r+0x6bc>
 80048c6:	42a6      	cmp	r6, r4
 80048c8:	f43f af43 	beq.w	8004752 <_dtoa_r+0x43a>
 80048cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80048d0:	2200      	movs	r2, #0
 80048d2:	4b53      	ldr	r3, [pc, #332]	@ (8004a20 <_dtoa_r+0x708>)
 80048d4:	f7fb fe00 	bl	80004d8 <__aeabi_dmul>
 80048d8:	2200      	movs	r2, #0
 80048da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80048de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048e2:	4b4f      	ldr	r3, [pc, #316]	@ (8004a20 <_dtoa_r+0x708>)
 80048e4:	f7fb fdf8 	bl	80004d8 <__aeabi_dmul>
 80048e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048ec:	e7c4      	b.n	8004878 <_dtoa_r+0x560>
 80048ee:	4631      	mov	r1, r6
 80048f0:	4628      	mov	r0, r5
 80048f2:	f7fb fdf1 	bl	80004d8 <__aeabi_dmul>
 80048f6:	4656      	mov	r6, sl
 80048f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80048fc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80048fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004902:	f7fc f899 	bl	8000a38 <__aeabi_d2iz>
 8004906:	4605      	mov	r5, r0
 8004908:	f7fb fd7c 	bl	8000404 <__aeabi_i2d>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004914:	f7fb fc28 	bl	8000168 <__aeabi_dsub>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	3530      	adds	r5, #48	@ 0x30
 800491e:	f806 5b01 	strb.w	r5, [r6], #1
 8004922:	42a6      	cmp	r6, r4
 8004924:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	d124      	bne.n	8004978 <_dtoa_r+0x660>
 800492e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004932:	4b39      	ldr	r3, [pc, #228]	@ (8004a18 <_dtoa_r+0x700>)
 8004934:	f7fb fc1a 	bl	800016c <__adddf3>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004940:	f7fc f85a 	bl	80009f8 <__aeabi_dcmpgt>
 8004944:	2800      	cmp	r0, #0
 8004946:	d145      	bne.n	80049d4 <_dtoa_r+0x6bc>
 8004948:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800494c:	2000      	movs	r0, #0
 800494e:	4932      	ldr	r1, [pc, #200]	@ (8004a18 <_dtoa_r+0x700>)
 8004950:	f7fb fc0a 	bl	8000168 <__aeabi_dsub>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800495c:	f7fc f82e 	bl	80009bc <__aeabi_dcmplt>
 8004960:	2800      	cmp	r0, #0
 8004962:	f43f aef6 	beq.w	8004752 <_dtoa_r+0x43a>
 8004966:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004968:	1e73      	subs	r3, r6, #1
 800496a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800496c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004970:	2b30      	cmp	r3, #48	@ 0x30
 8004972:	d0f8      	beq.n	8004966 <_dtoa_r+0x64e>
 8004974:	9f04      	ldr	r7, [sp, #16]
 8004976:	e73f      	b.n	80047f8 <_dtoa_r+0x4e0>
 8004978:	4b29      	ldr	r3, [pc, #164]	@ (8004a20 <_dtoa_r+0x708>)
 800497a:	f7fb fdad 	bl	80004d8 <__aeabi_dmul>
 800497e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004982:	e7bc      	b.n	80048fe <_dtoa_r+0x5e6>
 8004984:	d10c      	bne.n	80049a0 <_dtoa_r+0x688>
 8004986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800498a:	2200      	movs	r2, #0
 800498c:	4b25      	ldr	r3, [pc, #148]	@ (8004a24 <_dtoa_r+0x70c>)
 800498e:	f7fb fda3 	bl	80004d8 <__aeabi_dmul>
 8004992:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004996:	f7fc f825 	bl	80009e4 <__aeabi_dcmpge>
 800499a:	2800      	cmp	r0, #0
 800499c:	f000 815b 	beq.w	8004c56 <_dtoa_r+0x93e>
 80049a0:	2400      	movs	r4, #0
 80049a2:	4625      	mov	r5, r4
 80049a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049a6:	4656      	mov	r6, sl
 80049a8:	43db      	mvns	r3, r3
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	2700      	movs	r7, #0
 80049ae:	4621      	mov	r1, r4
 80049b0:	4658      	mov	r0, fp
 80049b2:	f000 fbb7 	bl	8005124 <_Bfree>
 80049b6:	2d00      	cmp	r5, #0
 80049b8:	d0dc      	beq.n	8004974 <_dtoa_r+0x65c>
 80049ba:	b12f      	cbz	r7, 80049c8 <_dtoa_r+0x6b0>
 80049bc:	42af      	cmp	r7, r5
 80049be:	d003      	beq.n	80049c8 <_dtoa_r+0x6b0>
 80049c0:	4639      	mov	r1, r7
 80049c2:	4658      	mov	r0, fp
 80049c4:	f000 fbae 	bl	8005124 <_Bfree>
 80049c8:	4629      	mov	r1, r5
 80049ca:	4658      	mov	r0, fp
 80049cc:	f000 fbaa 	bl	8005124 <_Bfree>
 80049d0:	e7d0      	b.n	8004974 <_dtoa_r+0x65c>
 80049d2:	9704      	str	r7, [sp, #16]
 80049d4:	4633      	mov	r3, r6
 80049d6:	461e      	mov	r6, r3
 80049d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049dc:	2a39      	cmp	r2, #57	@ 0x39
 80049de:	d107      	bne.n	80049f0 <_dtoa_r+0x6d8>
 80049e0:	459a      	cmp	sl, r3
 80049e2:	d1f8      	bne.n	80049d6 <_dtoa_r+0x6be>
 80049e4:	9a04      	ldr	r2, [sp, #16]
 80049e6:	3201      	adds	r2, #1
 80049e8:	9204      	str	r2, [sp, #16]
 80049ea:	2230      	movs	r2, #48	@ 0x30
 80049ec:	f88a 2000 	strb.w	r2, [sl]
 80049f0:	781a      	ldrb	r2, [r3, #0]
 80049f2:	3201      	adds	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	e7bd      	b.n	8004974 <_dtoa_r+0x65c>
 80049f8:	2200      	movs	r2, #0
 80049fa:	4b09      	ldr	r3, [pc, #36]	@ (8004a20 <_dtoa_r+0x708>)
 80049fc:	f7fb fd6c 	bl	80004d8 <__aeabi_dmul>
 8004a00:	2200      	movs	r2, #0
 8004a02:	2300      	movs	r3, #0
 8004a04:	4604      	mov	r4, r0
 8004a06:	460d      	mov	r5, r1
 8004a08:	f7fb ffce 	bl	80009a8 <__aeabi_dcmpeq>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	f43f aebc 	beq.w	800478a <_dtoa_r+0x472>
 8004a12:	e6f1      	b.n	80047f8 <_dtoa_r+0x4e0>
 8004a14:	08006458 	.word	0x08006458
 8004a18:	3fe00000 	.word	0x3fe00000
 8004a1c:	3ff00000 	.word	0x3ff00000
 8004a20:	40240000 	.word	0x40240000
 8004a24:	40140000 	.word	0x40140000
 8004a28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004a2a:	2a00      	cmp	r2, #0
 8004a2c:	f000 80db 	beq.w	8004be6 <_dtoa_r+0x8ce>
 8004a30:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004a32:	2a01      	cmp	r2, #1
 8004a34:	f300 80bf 	bgt.w	8004bb6 <_dtoa_r+0x89e>
 8004a38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004a3a:	2a00      	cmp	r2, #0
 8004a3c:	f000 80b7 	beq.w	8004bae <_dtoa_r+0x896>
 8004a40:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004a44:	4646      	mov	r6, r8
 8004a46:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004a48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	441a      	add	r2, r3
 8004a4e:	4658      	mov	r0, fp
 8004a50:	4498      	add	r8, r3
 8004a52:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a54:	f000 fc1a 	bl	800528c <__i2b>
 8004a58:	4605      	mov	r5, r0
 8004a5a:	b15e      	cbz	r6, 8004a74 <_dtoa_r+0x75c>
 8004a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	dd08      	ble.n	8004a74 <_dtoa_r+0x75c>
 8004a62:	42b3      	cmp	r3, r6
 8004a64:	bfa8      	it	ge
 8004a66:	4633      	movge	r3, r6
 8004a68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a6a:	eba8 0803 	sub.w	r8, r8, r3
 8004a6e:	1af6      	subs	r6, r6, r3
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a76:	b1f3      	cbz	r3, 8004ab6 <_dtoa_r+0x79e>
 8004a78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80b7 	beq.w	8004bee <_dtoa_r+0x8d6>
 8004a80:	b18c      	cbz	r4, 8004aa6 <_dtoa_r+0x78e>
 8004a82:	4629      	mov	r1, r5
 8004a84:	4622      	mov	r2, r4
 8004a86:	4658      	mov	r0, fp
 8004a88:	f000 fcbe 	bl	8005408 <__pow5mult>
 8004a8c:	464a      	mov	r2, r9
 8004a8e:	4601      	mov	r1, r0
 8004a90:	4605      	mov	r5, r0
 8004a92:	4658      	mov	r0, fp
 8004a94:	f000 fc10 	bl	80052b8 <__multiply>
 8004a98:	4649      	mov	r1, r9
 8004a9a:	9004      	str	r0, [sp, #16]
 8004a9c:	4658      	mov	r0, fp
 8004a9e:	f000 fb41 	bl	8005124 <_Bfree>
 8004aa2:	9b04      	ldr	r3, [sp, #16]
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004aa8:	1b1a      	subs	r2, r3, r4
 8004aaa:	d004      	beq.n	8004ab6 <_dtoa_r+0x79e>
 8004aac:	4649      	mov	r1, r9
 8004aae:	4658      	mov	r0, fp
 8004ab0:	f000 fcaa 	bl	8005408 <__pow5mult>
 8004ab4:	4681      	mov	r9, r0
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	4658      	mov	r0, fp
 8004aba:	f000 fbe7 	bl	800528c <__i2b>
 8004abe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 81c9 	beq.w	8004e5a <_dtoa_r+0xb42>
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4601      	mov	r1, r0
 8004acc:	4658      	mov	r0, fp
 8004ace:	f000 fc9b 	bl	8005408 <__pow5mult>
 8004ad2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	f300 808f 	bgt.w	8004bfa <_dtoa_r+0x8e2>
 8004adc:	9b02      	ldr	r3, [sp, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f040 8087 	bne.w	8004bf2 <_dtoa_r+0x8da>
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 8083 	bne.w	8004bf6 <_dtoa_r+0x8de>
 8004af0:	9b03      	ldr	r3, [sp, #12]
 8004af2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004af6:	0d1b      	lsrs	r3, r3, #20
 8004af8:	051b      	lsls	r3, r3, #20
 8004afa:	b12b      	cbz	r3, 8004b08 <_dtoa_r+0x7f0>
 8004afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004afe:	f108 0801 	add.w	r8, r8, #1
 8004b02:	3301      	adds	r3, #1
 8004b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b06:	2301      	movs	r3, #1
 8004b08:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 81aa 	beq.w	8004e66 <_dtoa_r+0xb4e>
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b18:	6918      	ldr	r0, [r3, #16]
 8004b1a:	f000 fb6b 	bl	80051f4 <__hi0bits>
 8004b1e:	f1c0 0020 	rsb	r0, r0, #32
 8004b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b24:	4418      	add	r0, r3
 8004b26:	f010 001f 	ands.w	r0, r0, #31
 8004b2a:	d071      	beq.n	8004c10 <_dtoa_r+0x8f8>
 8004b2c:	f1c0 0320 	rsb	r3, r0, #32
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	dd65      	ble.n	8004c00 <_dtoa_r+0x8e8>
 8004b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b36:	f1c0 001c 	rsb	r0, r0, #28
 8004b3a:	4403      	add	r3, r0
 8004b3c:	4480      	add	r8, r0
 8004b3e:	4406      	add	r6, r0
 8004b40:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b42:	f1b8 0f00 	cmp.w	r8, #0
 8004b46:	dd05      	ble.n	8004b54 <_dtoa_r+0x83c>
 8004b48:	4649      	mov	r1, r9
 8004b4a:	4642      	mov	r2, r8
 8004b4c:	4658      	mov	r0, fp
 8004b4e:	f000 fcb5 	bl	80054bc <__lshift>
 8004b52:	4681      	mov	r9, r0
 8004b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	dd05      	ble.n	8004b66 <_dtoa_r+0x84e>
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4658      	mov	r0, fp
 8004b60:	f000 fcac 	bl	80054bc <__lshift>
 8004b64:	4604      	mov	r4, r0
 8004b66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d053      	beq.n	8004c14 <_dtoa_r+0x8fc>
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4648      	mov	r0, r9
 8004b70:	f000 fd10 	bl	8005594 <__mcmp>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	da4d      	bge.n	8004c14 <_dtoa_r+0x8fc>
 8004b78:	1e7b      	subs	r3, r7, #1
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	9304      	str	r3, [sp, #16]
 8004b7e:	220a      	movs	r2, #10
 8004b80:	2300      	movs	r3, #0
 8004b82:	4658      	mov	r0, fp
 8004b84:	f000 faf0 	bl	8005168 <__multadd>
 8004b88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b8a:	4681      	mov	r9, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 816c 	beq.w	8004e6a <_dtoa_r+0xb52>
 8004b92:	2300      	movs	r3, #0
 8004b94:	4629      	mov	r1, r5
 8004b96:	220a      	movs	r2, #10
 8004b98:	4658      	mov	r0, fp
 8004b9a:	f000 fae5 	bl	8005168 <__multadd>
 8004b9e:	9b08      	ldr	r3, [sp, #32]
 8004ba0:	4605      	mov	r5, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	dc61      	bgt.n	8004c6a <_dtoa_r+0x952>
 8004ba6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	dc3b      	bgt.n	8004c24 <_dtoa_r+0x90c>
 8004bac:	e05d      	b.n	8004c6a <_dtoa_r+0x952>
 8004bae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004bb0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004bb4:	e746      	b.n	8004a44 <_dtoa_r+0x72c>
 8004bb6:	9b07      	ldr	r3, [sp, #28]
 8004bb8:	1e5c      	subs	r4, r3, #1
 8004bba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bbc:	42a3      	cmp	r3, r4
 8004bbe:	bfbf      	itttt	lt
 8004bc0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004bc2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004bc4:	1ae3      	sublt	r3, r4, r3
 8004bc6:	18d2      	addlt	r2, r2, r3
 8004bc8:	bfa8      	it	ge
 8004bca:	1b1c      	subge	r4, r3, r4
 8004bcc:	9b07      	ldr	r3, [sp, #28]
 8004bce:	bfbe      	ittt	lt
 8004bd0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004bd2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004bd4:	2400      	movlt	r4, #0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bfb5      	itete	lt
 8004bda:	eba8 0603 	sublt.w	r6, r8, r3
 8004bde:	4646      	movge	r6, r8
 8004be0:	2300      	movlt	r3, #0
 8004be2:	9b07      	ldrge	r3, [sp, #28]
 8004be4:	e730      	b.n	8004a48 <_dtoa_r+0x730>
 8004be6:	4646      	mov	r6, r8
 8004be8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004bea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004bec:	e735      	b.n	8004a5a <_dtoa_r+0x742>
 8004bee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004bf0:	e75c      	b.n	8004aac <_dtoa_r+0x794>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e788      	b.n	8004b08 <_dtoa_r+0x7f0>
 8004bf6:	9b02      	ldr	r3, [sp, #8]
 8004bf8:	e786      	b.n	8004b08 <_dtoa_r+0x7f0>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bfe:	e788      	b.n	8004b12 <_dtoa_r+0x7fa>
 8004c00:	d09f      	beq.n	8004b42 <_dtoa_r+0x82a>
 8004c02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c04:	331c      	adds	r3, #28
 8004c06:	441a      	add	r2, r3
 8004c08:	4498      	add	r8, r3
 8004c0a:	441e      	add	r6, r3
 8004c0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c0e:	e798      	b.n	8004b42 <_dtoa_r+0x82a>
 8004c10:	4603      	mov	r3, r0
 8004c12:	e7f6      	b.n	8004c02 <_dtoa_r+0x8ea>
 8004c14:	9b07      	ldr	r3, [sp, #28]
 8004c16:	9704      	str	r7, [sp, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	dc20      	bgt.n	8004c5e <_dtoa_r+0x946>
 8004c1c:	9308      	str	r3, [sp, #32]
 8004c1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	dd1e      	ble.n	8004c62 <_dtoa_r+0x94a>
 8004c24:	9b08      	ldr	r3, [sp, #32]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f47f aebc 	bne.w	80049a4 <_dtoa_r+0x68c>
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	2205      	movs	r2, #5
 8004c30:	4658      	mov	r0, fp
 8004c32:	f000 fa99 	bl	8005168 <__multadd>
 8004c36:	4601      	mov	r1, r0
 8004c38:	4604      	mov	r4, r0
 8004c3a:	4648      	mov	r0, r9
 8004c3c:	f000 fcaa 	bl	8005594 <__mcmp>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	f77f aeaf 	ble.w	80049a4 <_dtoa_r+0x68c>
 8004c46:	2331      	movs	r3, #49	@ 0x31
 8004c48:	4656      	mov	r6, sl
 8004c4a:	f806 3b01 	strb.w	r3, [r6], #1
 8004c4e:	9b04      	ldr	r3, [sp, #16]
 8004c50:	3301      	adds	r3, #1
 8004c52:	9304      	str	r3, [sp, #16]
 8004c54:	e6aa      	b.n	80049ac <_dtoa_r+0x694>
 8004c56:	9c07      	ldr	r4, [sp, #28]
 8004c58:	9704      	str	r7, [sp, #16]
 8004c5a:	4625      	mov	r5, r4
 8004c5c:	e7f3      	b.n	8004c46 <_dtoa_r+0x92e>
 8004c5e:	9b07      	ldr	r3, [sp, #28]
 8004c60:	9308      	str	r3, [sp, #32]
 8004c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8104 	beq.w	8004e72 <_dtoa_r+0xb5a>
 8004c6a:	2e00      	cmp	r6, #0
 8004c6c:	dd05      	ble.n	8004c7a <_dtoa_r+0x962>
 8004c6e:	4629      	mov	r1, r5
 8004c70:	4632      	mov	r2, r6
 8004c72:	4658      	mov	r0, fp
 8004c74:	f000 fc22 	bl	80054bc <__lshift>
 8004c78:	4605      	mov	r5, r0
 8004c7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d05a      	beq.n	8004d36 <_dtoa_r+0xa1e>
 8004c80:	4658      	mov	r0, fp
 8004c82:	6869      	ldr	r1, [r5, #4]
 8004c84:	f000 fa0e 	bl	80050a4 <_Balloc>
 8004c88:	4606      	mov	r6, r0
 8004c8a:	b928      	cbnz	r0, 8004c98 <_dtoa_r+0x980>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004c92:	4b83      	ldr	r3, [pc, #524]	@ (8004ea0 <_dtoa_r+0xb88>)
 8004c94:	f7ff bb54 	b.w	8004340 <_dtoa_r+0x28>
 8004c98:	692a      	ldr	r2, [r5, #16]
 8004c9a:	f105 010c 	add.w	r1, r5, #12
 8004c9e:	3202      	adds	r2, #2
 8004ca0:	0092      	lsls	r2, r2, #2
 8004ca2:	300c      	adds	r0, #12
 8004ca4:	f000 ffa8 	bl	8005bf8 <memcpy>
 8004ca8:	2201      	movs	r2, #1
 8004caa:	4631      	mov	r1, r6
 8004cac:	4658      	mov	r0, fp
 8004cae:	f000 fc05 	bl	80054bc <__lshift>
 8004cb2:	462f      	mov	r7, r5
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	f10a 0301 	add.w	r3, sl, #1
 8004cba:	9307      	str	r3, [sp, #28]
 8004cbc:	9b08      	ldr	r3, [sp, #32]
 8004cbe:	4453      	add	r3, sl
 8004cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004cc2:	9b02      	ldr	r3, [sp, #8]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cca:	9b07      	ldr	r3, [sp, #28]
 8004ccc:	4621      	mov	r1, r4
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	4648      	mov	r0, r9
 8004cd2:	9302      	str	r3, [sp, #8]
 8004cd4:	f7ff fa97 	bl	8004206 <quorem>
 8004cd8:	4639      	mov	r1, r7
 8004cda:	9008      	str	r0, [sp, #32]
 8004cdc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004ce0:	4648      	mov	r0, r9
 8004ce2:	f000 fc57 	bl	8005594 <__mcmp>
 8004ce6:	462a      	mov	r2, r5
 8004ce8:	9009      	str	r0, [sp, #36]	@ 0x24
 8004cea:	4621      	mov	r1, r4
 8004cec:	4658      	mov	r0, fp
 8004cee:	f000 fc6d 	bl	80055cc <__mdiff>
 8004cf2:	68c2      	ldr	r2, [r0, #12]
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	bb02      	cbnz	r2, 8004d3a <_dtoa_r+0xa22>
 8004cf8:	4601      	mov	r1, r0
 8004cfa:	4648      	mov	r0, r9
 8004cfc:	f000 fc4a 	bl	8005594 <__mcmp>
 8004d00:	4602      	mov	r2, r0
 8004d02:	4631      	mov	r1, r6
 8004d04:	4658      	mov	r0, fp
 8004d06:	920c      	str	r2, [sp, #48]	@ 0x30
 8004d08:	f000 fa0c 	bl	8005124 <_Bfree>
 8004d0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004d10:	9e07      	ldr	r6, [sp, #28]
 8004d12:	ea43 0102 	orr.w	r1, r3, r2
 8004d16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d18:	4319      	orrs	r1, r3
 8004d1a:	d110      	bne.n	8004d3e <_dtoa_r+0xa26>
 8004d1c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d20:	d029      	beq.n	8004d76 <_dtoa_r+0xa5e>
 8004d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	dd02      	ble.n	8004d2e <_dtoa_r+0xa16>
 8004d28:	9b08      	ldr	r3, [sp, #32]
 8004d2a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004d2e:	9b02      	ldr	r3, [sp, #8]
 8004d30:	f883 8000 	strb.w	r8, [r3]
 8004d34:	e63b      	b.n	80049ae <_dtoa_r+0x696>
 8004d36:	4628      	mov	r0, r5
 8004d38:	e7bb      	b.n	8004cb2 <_dtoa_r+0x99a>
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	e7e1      	b.n	8004d02 <_dtoa_r+0x9ea>
 8004d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	db04      	blt.n	8004d4e <_dtoa_r+0xa36>
 8004d44:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004d46:	430b      	orrs	r3, r1
 8004d48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	d120      	bne.n	8004d90 <_dtoa_r+0xa78>
 8004d4e:	2a00      	cmp	r2, #0
 8004d50:	dded      	ble.n	8004d2e <_dtoa_r+0xa16>
 8004d52:	4649      	mov	r1, r9
 8004d54:	2201      	movs	r2, #1
 8004d56:	4658      	mov	r0, fp
 8004d58:	f000 fbb0 	bl	80054bc <__lshift>
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	4681      	mov	r9, r0
 8004d60:	f000 fc18 	bl	8005594 <__mcmp>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	dc03      	bgt.n	8004d70 <_dtoa_r+0xa58>
 8004d68:	d1e1      	bne.n	8004d2e <_dtoa_r+0xa16>
 8004d6a:	f018 0f01 	tst.w	r8, #1
 8004d6e:	d0de      	beq.n	8004d2e <_dtoa_r+0xa16>
 8004d70:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d74:	d1d8      	bne.n	8004d28 <_dtoa_r+0xa10>
 8004d76:	2339      	movs	r3, #57	@ 0x39
 8004d78:	9a02      	ldr	r2, [sp, #8]
 8004d7a:	7013      	strb	r3, [r2, #0]
 8004d7c:	4633      	mov	r3, r6
 8004d7e:	461e      	mov	r6, r3
 8004d80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	2a39      	cmp	r2, #57	@ 0x39
 8004d88:	d052      	beq.n	8004e30 <_dtoa_r+0xb18>
 8004d8a:	3201      	adds	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e60e      	b.n	80049ae <_dtoa_r+0x696>
 8004d90:	2a00      	cmp	r2, #0
 8004d92:	dd07      	ble.n	8004da4 <_dtoa_r+0xa8c>
 8004d94:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d98:	d0ed      	beq.n	8004d76 <_dtoa_r+0xa5e>
 8004d9a:	9a02      	ldr	r2, [sp, #8]
 8004d9c:	f108 0301 	add.w	r3, r8, #1
 8004da0:	7013      	strb	r3, [r2, #0]
 8004da2:	e604      	b.n	80049ae <_dtoa_r+0x696>
 8004da4:	9b07      	ldr	r3, [sp, #28]
 8004da6:	9a07      	ldr	r2, [sp, #28]
 8004da8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004dac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d028      	beq.n	8004e04 <_dtoa_r+0xaec>
 8004db2:	4649      	mov	r1, r9
 8004db4:	2300      	movs	r3, #0
 8004db6:	220a      	movs	r2, #10
 8004db8:	4658      	mov	r0, fp
 8004dba:	f000 f9d5 	bl	8005168 <__multadd>
 8004dbe:	42af      	cmp	r7, r5
 8004dc0:	4681      	mov	r9, r0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	f04f 020a 	mov.w	r2, #10
 8004dca:	4639      	mov	r1, r7
 8004dcc:	4658      	mov	r0, fp
 8004dce:	d107      	bne.n	8004de0 <_dtoa_r+0xac8>
 8004dd0:	f000 f9ca 	bl	8005168 <__multadd>
 8004dd4:	4607      	mov	r7, r0
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	9b07      	ldr	r3, [sp, #28]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	9307      	str	r3, [sp, #28]
 8004dde:	e774      	b.n	8004cca <_dtoa_r+0x9b2>
 8004de0:	f000 f9c2 	bl	8005168 <__multadd>
 8004de4:	4629      	mov	r1, r5
 8004de6:	4607      	mov	r7, r0
 8004de8:	2300      	movs	r3, #0
 8004dea:	220a      	movs	r2, #10
 8004dec:	4658      	mov	r0, fp
 8004dee:	f000 f9bb 	bl	8005168 <__multadd>
 8004df2:	4605      	mov	r5, r0
 8004df4:	e7f0      	b.n	8004dd8 <_dtoa_r+0xac0>
 8004df6:	9b08      	ldr	r3, [sp, #32]
 8004df8:	2700      	movs	r7, #0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bfcc      	ite	gt
 8004dfe:	461e      	movgt	r6, r3
 8004e00:	2601      	movle	r6, #1
 8004e02:	4456      	add	r6, sl
 8004e04:	4649      	mov	r1, r9
 8004e06:	2201      	movs	r2, #1
 8004e08:	4658      	mov	r0, fp
 8004e0a:	f000 fb57 	bl	80054bc <__lshift>
 8004e0e:	4621      	mov	r1, r4
 8004e10:	4681      	mov	r9, r0
 8004e12:	f000 fbbf 	bl	8005594 <__mcmp>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	dcb0      	bgt.n	8004d7c <_dtoa_r+0xa64>
 8004e1a:	d102      	bne.n	8004e22 <_dtoa_r+0xb0a>
 8004e1c:	f018 0f01 	tst.w	r8, #1
 8004e20:	d1ac      	bne.n	8004d7c <_dtoa_r+0xa64>
 8004e22:	4633      	mov	r3, r6
 8004e24:	461e      	mov	r6, r3
 8004e26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e2a:	2a30      	cmp	r2, #48	@ 0x30
 8004e2c:	d0fa      	beq.n	8004e24 <_dtoa_r+0xb0c>
 8004e2e:	e5be      	b.n	80049ae <_dtoa_r+0x696>
 8004e30:	459a      	cmp	sl, r3
 8004e32:	d1a4      	bne.n	8004d7e <_dtoa_r+0xa66>
 8004e34:	9b04      	ldr	r3, [sp, #16]
 8004e36:	3301      	adds	r3, #1
 8004e38:	9304      	str	r3, [sp, #16]
 8004e3a:	2331      	movs	r3, #49	@ 0x31
 8004e3c:	f88a 3000 	strb.w	r3, [sl]
 8004e40:	e5b5      	b.n	80049ae <_dtoa_r+0x696>
 8004e42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e44:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004ea4 <_dtoa_r+0xb8c>
 8004e48:	b11b      	cbz	r3, 8004e52 <_dtoa_r+0xb3a>
 8004e4a:	f10a 0308 	add.w	r3, sl, #8
 8004e4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	4650      	mov	r0, sl
 8004e54:	b017      	add	sp, #92	@ 0x5c
 8004e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	f77f ae3d 	ble.w	8004adc <_dtoa_r+0x7c4>
 8004e62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e64:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e66:	2001      	movs	r0, #1
 8004e68:	e65b      	b.n	8004b22 <_dtoa_r+0x80a>
 8004e6a:	9b08      	ldr	r3, [sp, #32]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f77f aed6 	ble.w	8004c1e <_dtoa_r+0x906>
 8004e72:	4656      	mov	r6, sl
 8004e74:	4621      	mov	r1, r4
 8004e76:	4648      	mov	r0, r9
 8004e78:	f7ff f9c5 	bl	8004206 <quorem>
 8004e7c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004e80:	9b08      	ldr	r3, [sp, #32]
 8004e82:	f806 8b01 	strb.w	r8, [r6], #1
 8004e86:	eba6 020a 	sub.w	r2, r6, sl
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	ddb3      	ble.n	8004df6 <_dtoa_r+0xade>
 8004e8e:	4649      	mov	r1, r9
 8004e90:	2300      	movs	r3, #0
 8004e92:	220a      	movs	r2, #10
 8004e94:	4658      	mov	r0, fp
 8004e96:	f000 f967 	bl	8005168 <__multadd>
 8004e9a:	4681      	mov	r9, r0
 8004e9c:	e7ea      	b.n	8004e74 <_dtoa_r+0xb5c>
 8004e9e:	bf00      	nop
 8004ea0:	080063ba 	.word	0x080063ba
 8004ea4:	0800633e 	.word	0x0800633e

08004ea8 <_free_r>:
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	4605      	mov	r5, r0
 8004eac:	2900      	cmp	r1, #0
 8004eae:	d040      	beq.n	8004f32 <_free_r+0x8a>
 8004eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb4:	1f0c      	subs	r4, r1, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bfb8      	it	lt
 8004eba:	18e4      	addlt	r4, r4, r3
 8004ebc:	f000 f8e6 	bl	800508c <__malloc_lock>
 8004ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8004f34 <_free_r+0x8c>)
 8004ec2:	6813      	ldr	r3, [r2, #0]
 8004ec4:	b933      	cbnz	r3, 8004ed4 <_free_r+0x2c>
 8004ec6:	6063      	str	r3, [r4, #4]
 8004ec8:	6014      	str	r4, [r2, #0]
 8004eca:	4628      	mov	r0, r5
 8004ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ed0:	f000 b8e2 	b.w	8005098 <__malloc_unlock>
 8004ed4:	42a3      	cmp	r3, r4
 8004ed6:	d908      	bls.n	8004eea <_free_r+0x42>
 8004ed8:	6820      	ldr	r0, [r4, #0]
 8004eda:	1821      	adds	r1, r4, r0
 8004edc:	428b      	cmp	r3, r1
 8004ede:	bf01      	itttt	eq
 8004ee0:	6819      	ldreq	r1, [r3, #0]
 8004ee2:	685b      	ldreq	r3, [r3, #4]
 8004ee4:	1809      	addeq	r1, r1, r0
 8004ee6:	6021      	streq	r1, [r4, #0]
 8004ee8:	e7ed      	b.n	8004ec6 <_free_r+0x1e>
 8004eea:	461a      	mov	r2, r3
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	b10b      	cbz	r3, 8004ef4 <_free_r+0x4c>
 8004ef0:	42a3      	cmp	r3, r4
 8004ef2:	d9fa      	bls.n	8004eea <_free_r+0x42>
 8004ef4:	6811      	ldr	r1, [r2, #0]
 8004ef6:	1850      	adds	r0, r2, r1
 8004ef8:	42a0      	cmp	r0, r4
 8004efa:	d10b      	bne.n	8004f14 <_free_r+0x6c>
 8004efc:	6820      	ldr	r0, [r4, #0]
 8004efe:	4401      	add	r1, r0
 8004f00:	1850      	adds	r0, r2, r1
 8004f02:	4283      	cmp	r3, r0
 8004f04:	6011      	str	r1, [r2, #0]
 8004f06:	d1e0      	bne.n	8004eca <_free_r+0x22>
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4408      	add	r0, r1
 8004f0e:	6010      	str	r0, [r2, #0]
 8004f10:	6053      	str	r3, [r2, #4]
 8004f12:	e7da      	b.n	8004eca <_free_r+0x22>
 8004f14:	d902      	bls.n	8004f1c <_free_r+0x74>
 8004f16:	230c      	movs	r3, #12
 8004f18:	602b      	str	r3, [r5, #0]
 8004f1a:	e7d6      	b.n	8004eca <_free_r+0x22>
 8004f1c:	6820      	ldr	r0, [r4, #0]
 8004f1e:	1821      	adds	r1, r4, r0
 8004f20:	428b      	cmp	r3, r1
 8004f22:	bf01      	itttt	eq
 8004f24:	6819      	ldreq	r1, [r3, #0]
 8004f26:	685b      	ldreq	r3, [r3, #4]
 8004f28:	1809      	addeq	r1, r1, r0
 8004f2a:	6021      	streq	r1, [r4, #0]
 8004f2c:	6063      	str	r3, [r4, #4]
 8004f2e:	6054      	str	r4, [r2, #4]
 8004f30:	e7cb      	b.n	8004eca <_free_r+0x22>
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	200004a4 	.word	0x200004a4

08004f38 <malloc>:
 8004f38:	4b02      	ldr	r3, [pc, #8]	@ (8004f44 <malloc+0xc>)
 8004f3a:	4601      	mov	r1, r0
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	f000 b825 	b.w	8004f8c <_malloc_r>
 8004f42:	bf00      	nop
 8004f44:	20000018 	.word	0x20000018

08004f48 <sbrk_aligned>:
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	4e0f      	ldr	r6, [pc, #60]	@ (8004f88 <sbrk_aligned+0x40>)
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	6831      	ldr	r1, [r6, #0]
 8004f50:	4605      	mov	r5, r0
 8004f52:	b911      	cbnz	r1, 8004f5a <sbrk_aligned+0x12>
 8004f54:	f000 fe40 	bl	8005bd8 <_sbrk_r>
 8004f58:	6030      	str	r0, [r6, #0]
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f000 fe3b 	bl	8005bd8 <_sbrk_r>
 8004f62:	1c43      	adds	r3, r0, #1
 8004f64:	d103      	bne.n	8004f6e <sbrk_aligned+0x26>
 8004f66:	f04f 34ff 	mov.w	r4, #4294967295
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	bd70      	pop	{r4, r5, r6, pc}
 8004f6e:	1cc4      	adds	r4, r0, #3
 8004f70:	f024 0403 	bic.w	r4, r4, #3
 8004f74:	42a0      	cmp	r0, r4
 8004f76:	d0f8      	beq.n	8004f6a <sbrk_aligned+0x22>
 8004f78:	1a21      	subs	r1, r4, r0
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 fe2c 	bl	8005bd8 <_sbrk_r>
 8004f80:	3001      	adds	r0, #1
 8004f82:	d1f2      	bne.n	8004f6a <sbrk_aligned+0x22>
 8004f84:	e7ef      	b.n	8004f66 <sbrk_aligned+0x1e>
 8004f86:	bf00      	nop
 8004f88:	200004a0 	.word	0x200004a0

08004f8c <_malloc_r>:
 8004f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f90:	1ccd      	adds	r5, r1, #3
 8004f92:	f025 0503 	bic.w	r5, r5, #3
 8004f96:	3508      	adds	r5, #8
 8004f98:	2d0c      	cmp	r5, #12
 8004f9a:	bf38      	it	cc
 8004f9c:	250c      	movcc	r5, #12
 8004f9e:	2d00      	cmp	r5, #0
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	db01      	blt.n	8004fa8 <_malloc_r+0x1c>
 8004fa4:	42a9      	cmp	r1, r5
 8004fa6:	d904      	bls.n	8004fb2 <_malloc_r+0x26>
 8004fa8:	230c      	movs	r3, #12
 8004faa:	6033      	str	r3, [r6, #0]
 8004fac:	2000      	movs	r0, #0
 8004fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005088 <_malloc_r+0xfc>
 8004fb6:	f000 f869 	bl	800508c <__malloc_lock>
 8004fba:	f8d8 3000 	ldr.w	r3, [r8]
 8004fbe:	461c      	mov	r4, r3
 8004fc0:	bb44      	cbnz	r4, 8005014 <_malloc_r+0x88>
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	f7ff ffbf 	bl	8004f48 <sbrk_aligned>
 8004fca:	1c43      	adds	r3, r0, #1
 8004fcc:	4604      	mov	r4, r0
 8004fce:	d158      	bne.n	8005082 <_malloc_r+0xf6>
 8004fd0:	f8d8 4000 	ldr.w	r4, [r8]
 8004fd4:	4627      	mov	r7, r4
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d143      	bne.n	8005062 <_malloc_r+0xd6>
 8004fda:	2c00      	cmp	r4, #0
 8004fdc:	d04b      	beq.n	8005076 <_malloc_r+0xea>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	4639      	mov	r1, r7
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	eb04 0903 	add.w	r9, r4, r3
 8004fe8:	f000 fdf6 	bl	8005bd8 <_sbrk_r>
 8004fec:	4581      	cmp	r9, r0
 8004fee:	d142      	bne.n	8005076 <_malloc_r+0xea>
 8004ff0:	6821      	ldr	r1, [r4, #0]
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	1a6d      	subs	r5, r5, r1
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	f7ff ffa6 	bl	8004f48 <sbrk_aligned>
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d03a      	beq.n	8005076 <_malloc_r+0xea>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	442b      	add	r3, r5
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	f8d8 3000 	ldr.w	r3, [r8]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	bb62      	cbnz	r2, 8005068 <_malloc_r+0xdc>
 800500e:	f8c8 7000 	str.w	r7, [r8]
 8005012:	e00f      	b.n	8005034 <_malloc_r+0xa8>
 8005014:	6822      	ldr	r2, [r4, #0]
 8005016:	1b52      	subs	r2, r2, r5
 8005018:	d420      	bmi.n	800505c <_malloc_r+0xd0>
 800501a:	2a0b      	cmp	r2, #11
 800501c:	d917      	bls.n	800504e <_malloc_r+0xc2>
 800501e:	1961      	adds	r1, r4, r5
 8005020:	42a3      	cmp	r3, r4
 8005022:	6025      	str	r5, [r4, #0]
 8005024:	bf18      	it	ne
 8005026:	6059      	strne	r1, [r3, #4]
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	bf08      	it	eq
 800502c:	f8c8 1000 	streq.w	r1, [r8]
 8005030:	5162      	str	r2, [r4, r5]
 8005032:	604b      	str	r3, [r1, #4]
 8005034:	4630      	mov	r0, r6
 8005036:	f000 f82f 	bl	8005098 <__malloc_unlock>
 800503a:	f104 000b 	add.w	r0, r4, #11
 800503e:	1d23      	adds	r3, r4, #4
 8005040:	f020 0007 	bic.w	r0, r0, #7
 8005044:	1ac2      	subs	r2, r0, r3
 8005046:	bf1c      	itt	ne
 8005048:	1a1b      	subne	r3, r3, r0
 800504a:	50a3      	strne	r3, [r4, r2]
 800504c:	e7af      	b.n	8004fae <_malloc_r+0x22>
 800504e:	6862      	ldr	r2, [r4, #4]
 8005050:	42a3      	cmp	r3, r4
 8005052:	bf0c      	ite	eq
 8005054:	f8c8 2000 	streq.w	r2, [r8]
 8005058:	605a      	strne	r2, [r3, #4]
 800505a:	e7eb      	b.n	8005034 <_malloc_r+0xa8>
 800505c:	4623      	mov	r3, r4
 800505e:	6864      	ldr	r4, [r4, #4]
 8005060:	e7ae      	b.n	8004fc0 <_malloc_r+0x34>
 8005062:	463c      	mov	r4, r7
 8005064:	687f      	ldr	r7, [r7, #4]
 8005066:	e7b6      	b.n	8004fd6 <_malloc_r+0x4a>
 8005068:	461a      	mov	r2, r3
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	42a3      	cmp	r3, r4
 800506e:	d1fb      	bne.n	8005068 <_malloc_r+0xdc>
 8005070:	2300      	movs	r3, #0
 8005072:	6053      	str	r3, [r2, #4]
 8005074:	e7de      	b.n	8005034 <_malloc_r+0xa8>
 8005076:	230c      	movs	r3, #12
 8005078:	4630      	mov	r0, r6
 800507a:	6033      	str	r3, [r6, #0]
 800507c:	f000 f80c 	bl	8005098 <__malloc_unlock>
 8005080:	e794      	b.n	8004fac <_malloc_r+0x20>
 8005082:	6005      	str	r5, [r0, #0]
 8005084:	e7d6      	b.n	8005034 <_malloc_r+0xa8>
 8005086:	bf00      	nop
 8005088:	200004a4 	.word	0x200004a4

0800508c <__malloc_lock>:
 800508c:	4801      	ldr	r0, [pc, #4]	@ (8005094 <__malloc_lock+0x8>)
 800508e:	f7ff b8aa 	b.w	80041e6 <__retarget_lock_acquire_recursive>
 8005092:	bf00      	nop
 8005094:	2000049c 	.word	0x2000049c

08005098 <__malloc_unlock>:
 8005098:	4801      	ldr	r0, [pc, #4]	@ (80050a0 <__malloc_unlock+0x8>)
 800509a:	f7ff b8a5 	b.w	80041e8 <__retarget_lock_release_recursive>
 800509e:	bf00      	nop
 80050a0:	2000049c 	.word	0x2000049c

080050a4 <_Balloc>:
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	69c6      	ldr	r6, [r0, #28]
 80050a8:	4604      	mov	r4, r0
 80050aa:	460d      	mov	r5, r1
 80050ac:	b976      	cbnz	r6, 80050cc <_Balloc+0x28>
 80050ae:	2010      	movs	r0, #16
 80050b0:	f7ff ff42 	bl	8004f38 <malloc>
 80050b4:	4602      	mov	r2, r0
 80050b6:	61e0      	str	r0, [r4, #28]
 80050b8:	b920      	cbnz	r0, 80050c4 <_Balloc+0x20>
 80050ba:	216b      	movs	r1, #107	@ 0x6b
 80050bc:	4b17      	ldr	r3, [pc, #92]	@ (800511c <_Balloc+0x78>)
 80050be:	4818      	ldr	r0, [pc, #96]	@ (8005120 <_Balloc+0x7c>)
 80050c0:	f000 fda8 	bl	8005c14 <__assert_func>
 80050c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050c8:	6006      	str	r6, [r0, #0]
 80050ca:	60c6      	str	r6, [r0, #12]
 80050cc:	69e6      	ldr	r6, [r4, #28]
 80050ce:	68f3      	ldr	r3, [r6, #12]
 80050d0:	b183      	cbz	r3, 80050f4 <_Balloc+0x50>
 80050d2:	69e3      	ldr	r3, [r4, #28]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050da:	b9b8      	cbnz	r0, 800510c <_Balloc+0x68>
 80050dc:	2101      	movs	r1, #1
 80050de:	fa01 f605 	lsl.w	r6, r1, r5
 80050e2:	1d72      	adds	r2, r6, #5
 80050e4:	4620      	mov	r0, r4
 80050e6:	0092      	lsls	r2, r2, #2
 80050e8:	f000 fdb2 	bl	8005c50 <_calloc_r>
 80050ec:	b160      	cbz	r0, 8005108 <_Balloc+0x64>
 80050ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050f2:	e00e      	b.n	8005112 <_Balloc+0x6e>
 80050f4:	2221      	movs	r2, #33	@ 0x21
 80050f6:	2104      	movs	r1, #4
 80050f8:	4620      	mov	r0, r4
 80050fa:	f000 fda9 	bl	8005c50 <_calloc_r>
 80050fe:	69e3      	ldr	r3, [r4, #28]
 8005100:	60f0      	str	r0, [r6, #12]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e4      	bne.n	80050d2 <_Balloc+0x2e>
 8005108:	2000      	movs	r0, #0
 800510a:	bd70      	pop	{r4, r5, r6, pc}
 800510c:	6802      	ldr	r2, [r0, #0]
 800510e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005112:	2300      	movs	r3, #0
 8005114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005118:	e7f7      	b.n	800510a <_Balloc+0x66>
 800511a:	bf00      	nop
 800511c:	0800634b 	.word	0x0800634b
 8005120:	080063cb 	.word	0x080063cb

08005124 <_Bfree>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	69c6      	ldr	r6, [r0, #28]
 8005128:	4605      	mov	r5, r0
 800512a:	460c      	mov	r4, r1
 800512c:	b976      	cbnz	r6, 800514c <_Bfree+0x28>
 800512e:	2010      	movs	r0, #16
 8005130:	f7ff ff02 	bl	8004f38 <malloc>
 8005134:	4602      	mov	r2, r0
 8005136:	61e8      	str	r0, [r5, #28]
 8005138:	b920      	cbnz	r0, 8005144 <_Bfree+0x20>
 800513a:	218f      	movs	r1, #143	@ 0x8f
 800513c:	4b08      	ldr	r3, [pc, #32]	@ (8005160 <_Bfree+0x3c>)
 800513e:	4809      	ldr	r0, [pc, #36]	@ (8005164 <_Bfree+0x40>)
 8005140:	f000 fd68 	bl	8005c14 <__assert_func>
 8005144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005148:	6006      	str	r6, [r0, #0]
 800514a:	60c6      	str	r6, [r0, #12]
 800514c:	b13c      	cbz	r4, 800515e <_Bfree+0x3a>
 800514e:	69eb      	ldr	r3, [r5, #28]
 8005150:	6862      	ldr	r2, [r4, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005158:	6021      	str	r1, [r4, #0]
 800515a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	0800634b 	.word	0x0800634b
 8005164:	080063cb 	.word	0x080063cb

08005168 <__multadd>:
 8005168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800516c:	4607      	mov	r7, r0
 800516e:	460c      	mov	r4, r1
 8005170:	461e      	mov	r6, r3
 8005172:	2000      	movs	r0, #0
 8005174:	690d      	ldr	r5, [r1, #16]
 8005176:	f101 0c14 	add.w	ip, r1, #20
 800517a:	f8dc 3000 	ldr.w	r3, [ip]
 800517e:	3001      	adds	r0, #1
 8005180:	b299      	uxth	r1, r3
 8005182:	fb02 6101 	mla	r1, r2, r1, r6
 8005186:	0c1e      	lsrs	r6, r3, #16
 8005188:	0c0b      	lsrs	r3, r1, #16
 800518a:	fb02 3306 	mla	r3, r2, r6, r3
 800518e:	b289      	uxth	r1, r1
 8005190:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005194:	4285      	cmp	r5, r0
 8005196:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800519a:	f84c 1b04 	str.w	r1, [ip], #4
 800519e:	dcec      	bgt.n	800517a <__multadd+0x12>
 80051a0:	b30e      	cbz	r6, 80051e6 <__multadd+0x7e>
 80051a2:	68a3      	ldr	r3, [r4, #8]
 80051a4:	42ab      	cmp	r3, r5
 80051a6:	dc19      	bgt.n	80051dc <__multadd+0x74>
 80051a8:	6861      	ldr	r1, [r4, #4]
 80051aa:	4638      	mov	r0, r7
 80051ac:	3101      	adds	r1, #1
 80051ae:	f7ff ff79 	bl	80050a4 <_Balloc>
 80051b2:	4680      	mov	r8, r0
 80051b4:	b928      	cbnz	r0, 80051c2 <__multadd+0x5a>
 80051b6:	4602      	mov	r2, r0
 80051b8:	21ba      	movs	r1, #186	@ 0xba
 80051ba:	4b0c      	ldr	r3, [pc, #48]	@ (80051ec <__multadd+0x84>)
 80051bc:	480c      	ldr	r0, [pc, #48]	@ (80051f0 <__multadd+0x88>)
 80051be:	f000 fd29 	bl	8005c14 <__assert_func>
 80051c2:	6922      	ldr	r2, [r4, #16]
 80051c4:	f104 010c 	add.w	r1, r4, #12
 80051c8:	3202      	adds	r2, #2
 80051ca:	0092      	lsls	r2, r2, #2
 80051cc:	300c      	adds	r0, #12
 80051ce:	f000 fd13 	bl	8005bf8 <memcpy>
 80051d2:	4621      	mov	r1, r4
 80051d4:	4638      	mov	r0, r7
 80051d6:	f7ff ffa5 	bl	8005124 <_Bfree>
 80051da:	4644      	mov	r4, r8
 80051dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80051e0:	3501      	adds	r5, #1
 80051e2:	615e      	str	r6, [r3, #20]
 80051e4:	6125      	str	r5, [r4, #16]
 80051e6:	4620      	mov	r0, r4
 80051e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ec:	080063ba 	.word	0x080063ba
 80051f0:	080063cb 	.word	0x080063cb

080051f4 <__hi0bits>:
 80051f4:	4603      	mov	r3, r0
 80051f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80051fa:	bf3a      	itte	cc
 80051fc:	0403      	lslcc	r3, r0, #16
 80051fe:	2010      	movcc	r0, #16
 8005200:	2000      	movcs	r0, #0
 8005202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005206:	bf3c      	itt	cc
 8005208:	021b      	lslcc	r3, r3, #8
 800520a:	3008      	addcc	r0, #8
 800520c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005210:	bf3c      	itt	cc
 8005212:	011b      	lslcc	r3, r3, #4
 8005214:	3004      	addcc	r0, #4
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800521a:	bf3c      	itt	cc
 800521c:	009b      	lslcc	r3, r3, #2
 800521e:	3002      	addcc	r0, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	db05      	blt.n	8005230 <__hi0bits+0x3c>
 8005224:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005228:	f100 0001 	add.w	r0, r0, #1
 800522c:	bf08      	it	eq
 800522e:	2020      	moveq	r0, #32
 8005230:	4770      	bx	lr

08005232 <__lo0bits>:
 8005232:	6803      	ldr	r3, [r0, #0]
 8005234:	4602      	mov	r2, r0
 8005236:	f013 0007 	ands.w	r0, r3, #7
 800523a:	d00b      	beq.n	8005254 <__lo0bits+0x22>
 800523c:	07d9      	lsls	r1, r3, #31
 800523e:	d421      	bmi.n	8005284 <__lo0bits+0x52>
 8005240:	0798      	lsls	r0, r3, #30
 8005242:	bf49      	itett	mi
 8005244:	085b      	lsrmi	r3, r3, #1
 8005246:	089b      	lsrpl	r3, r3, #2
 8005248:	2001      	movmi	r0, #1
 800524a:	6013      	strmi	r3, [r2, #0]
 800524c:	bf5c      	itt	pl
 800524e:	2002      	movpl	r0, #2
 8005250:	6013      	strpl	r3, [r2, #0]
 8005252:	4770      	bx	lr
 8005254:	b299      	uxth	r1, r3
 8005256:	b909      	cbnz	r1, 800525c <__lo0bits+0x2a>
 8005258:	2010      	movs	r0, #16
 800525a:	0c1b      	lsrs	r3, r3, #16
 800525c:	b2d9      	uxtb	r1, r3
 800525e:	b909      	cbnz	r1, 8005264 <__lo0bits+0x32>
 8005260:	3008      	adds	r0, #8
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	0719      	lsls	r1, r3, #28
 8005266:	bf04      	itt	eq
 8005268:	091b      	lsreq	r3, r3, #4
 800526a:	3004      	addeq	r0, #4
 800526c:	0799      	lsls	r1, r3, #30
 800526e:	bf04      	itt	eq
 8005270:	089b      	lsreq	r3, r3, #2
 8005272:	3002      	addeq	r0, #2
 8005274:	07d9      	lsls	r1, r3, #31
 8005276:	d403      	bmi.n	8005280 <__lo0bits+0x4e>
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	f100 0001 	add.w	r0, r0, #1
 800527e:	d003      	beq.n	8005288 <__lo0bits+0x56>
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	4770      	bx	lr
 8005284:	2000      	movs	r0, #0
 8005286:	4770      	bx	lr
 8005288:	2020      	movs	r0, #32
 800528a:	4770      	bx	lr

0800528c <__i2b>:
 800528c:	b510      	push	{r4, lr}
 800528e:	460c      	mov	r4, r1
 8005290:	2101      	movs	r1, #1
 8005292:	f7ff ff07 	bl	80050a4 <_Balloc>
 8005296:	4602      	mov	r2, r0
 8005298:	b928      	cbnz	r0, 80052a6 <__i2b+0x1a>
 800529a:	f240 1145 	movw	r1, #325	@ 0x145
 800529e:	4b04      	ldr	r3, [pc, #16]	@ (80052b0 <__i2b+0x24>)
 80052a0:	4804      	ldr	r0, [pc, #16]	@ (80052b4 <__i2b+0x28>)
 80052a2:	f000 fcb7 	bl	8005c14 <__assert_func>
 80052a6:	2301      	movs	r3, #1
 80052a8:	6144      	str	r4, [r0, #20]
 80052aa:	6103      	str	r3, [r0, #16]
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	bf00      	nop
 80052b0:	080063ba 	.word	0x080063ba
 80052b4:	080063cb 	.word	0x080063cb

080052b8 <__multiply>:
 80052b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052bc:	4614      	mov	r4, r2
 80052be:	690a      	ldr	r2, [r1, #16]
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	460f      	mov	r7, r1
 80052c4:	429a      	cmp	r2, r3
 80052c6:	bfa2      	ittt	ge
 80052c8:	4623      	movge	r3, r4
 80052ca:	460c      	movge	r4, r1
 80052cc:	461f      	movge	r7, r3
 80052ce:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80052d2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80052d6:	68a3      	ldr	r3, [r4, #8]
 80052d8:	6861      	ldr	r1, [r4, #4]
 80052da:	eb0a 0609 	add.w	r6, sl, r9
 80052de:	42b3      	cmp	r3, r6
 80052e0:	b085      	sub	sp, #20
 80052e2:	bfb8      	it	lt
 80052e4:	3101      	addlt	r1, #1
 80052e6:	f7ff fedd 	bl	80050a4 <_Balloc>
 80052ea:	b930      	cbnz	r0, 80052fa <__multiply+0x42>
 80052ec:	4602      	mov	r2, r0
 80052ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80052f2:	4b43      	ldr	r3, [pc, #268]	@ (8005400 <__multiply+0x148>)
 80052f4:	4843      	ldr	r0, [pc, #268]	@ (8005404 <__multiply+0x14c>)
 80052f6:	f000 fc8d 	bl	8005c14 <__assert_func>
 80052fa:	f100 0514 	add.w	r5, r0, #20
 80052fe:	462b      	mov	r3, r5
 8005300:	2200      	movs	r2, #0
 8005302:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005306:	4543      	cmp	r3, r8
 8005308:	d321      	bcc.n	800534e <__multiply+0x96>
 800530a:	f107 0114 	add.w	r1, r7, #20
 800530e:	f104 0214 	add.w	r2, r4, #20
 8005312:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005316:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800531a:	9302      	str	r3, [sp, #8]
 800531c:	1b13      	subs	r3, r2, r4
 800531e:	3b15      	subs	r3, #21
 8005320:	f023 0303 	bic.w	r3, r3, #3
 8005324:	3304      	adds	r3, #4
 8005326:	f104 0715 	add.w	r7, r4, #21
 800532a:	42ba      	cmp	r2, r7
 800532c:	bf38      	it	cc
 800532e:	2304      	movcc	r3, #4
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	9b02      	ldr	r3, [sp, #8]
 8005334:	9103      	str	r1, [sp, #12]
 8005336:	428b      	cmp	r3, r1
 8005338:	d80c      	bhi.n	8005354 <__multiply+0x9c>
 800533a:	2e00      	cmp	r6, #0
 800533c:	dd03      	ble.n	8005346 <__multiply+0x8e>
 800533e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005342:	2b00      	cmp	r3, #0
 8005344:	d05a      	beq.n	80053fc <__multiply+0x144>
 8005346:	6106      	str	r6, [r0, #16]
 8005348:	b005      	add	sp, #20
 800534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534e:	f843 2b04 	str.w	r2, [r3], #4
 8005352:	e7d8      	b.n	8005306 <__multiply+0x4e>
 8005354:	f8b1 a000 	ldrh.w	sl, [r1]
 8005358:	f1ba 0f00 	cmp.w	sl, #0
 800535c:	d023      	beq.n	80053a6 <__multiply+0xee>
 800535e:	46a9      	mov	r9, r5
 8005360:	f04f 0c00 	mov.w	ip, #0
 8005364:	f104 0e14 	add.w	lr, r4, #20
 8005368:	f85e 7b04 	ldr.w	r7, [lr], #4
 800536c:	f8d9 3000 	ldr.w	r3, [r9]
 8005370:	fa1f fb87 	uxth.w	fp, r7
 8005374:	b29b      	uxth	r3, r3
 8005376:	fb0a 330b 	mla	r3, sl, fp, r3
 800537a:	4463      	add	r3, ip
 800537c:	f8d9 c000 	ldr.w	ip, [r9]
 8005380:	0c3f      	lsrs	r7, r7, #16
 8005382:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005386:	fb0a c707 	mla	r7, sl, r7, ip
 800538a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800538e:	b29b      	uxth	r3, r3
 8005390:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005394:	4572      	cmp	r2, lr
 8005396:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800539a:	f849 3b04 	str.w	r3, [r9], #4
 800539e:	d8e3      	bhi.n	8005368 <__multiply+0xb0>
 80053a0:	9b01      	ldr	r3, [sp, #4]
 80053a2:	f845 c003 	str.w	ip, [r5, r3]
 80053a6:	9b03      	ldr	r3, [sp, #12]
 80053a8:	3104      	adds	r1, #4
 80053aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80053ae:	f1b9 0f00 	cmp.w	r9, #0
 80053b2:	d021      	beq.n	80053f8 <__multiply+0x140>
 80053b4:	46ae      	mov	lr, r5
 80053b6:	f04f 0a00 	mov.w	sl, #0
 80053ba:	682b      	ldr	r3, [r5, #0]
 80053bc:	f104 0c14 	add.w	ip, r4, #20
 80053c0:	f8bc b000 	ldrh.w	fp, [ip]
 80053c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	fb09 770b 	mla	r7, r9, fp, r7
 80053ce:	4457      	add	r7, sl
 80053d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80053d4:	f84e 3b04 	str.w	r3, [lr], #4
 80053d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80053dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053e0:	f8be 3000 	ldrh.w	r3, [lr]
 80053e4:	4562      	cmp	r2, ip
 80053e6:	fb09 330a 	mla	r3, r9, sl, r3
 80053ea:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80053ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053f2:	d8e5      	bhi.n	80053c0 <__multiply+0x108>
 80053f4:	9f01      	ldr	r7, [sp, #4]
 80053f6:	51eb      	str	r3, [r5, r7]
 80053f8:	3504      	adds	r5, #4
 80053fa:	e79a      	b.n	8005332 <__multiply+0x7a>
 80053fc:	3e01      	subs	r6, #1
 80053fe:	e79c      	b.n	800533a <__multiply+0x82>
 8005400:	080063ba 	.word	0x080063ba
 8005404:	080063cb 	.word	0x080063cb

08005408 <__pow5mult>:
 8005408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800540c:	4615      	mov	r5, r2
 800540e:	f012 0203 	ands.w	r2, r2, #3
 8005412:	4607      	mov	r7, r0
 8005414:	460e      	mov	r6, r1
 8005416:	d007      	beq.n	8005428 <__pow5mult+0x20>
 8005418:	4c25      	ldr	r4, [pc, #148]	@ (80054b0 <__pow5mult+0xa8>)
 800541a:	3a01      	subs	r2, #1
 800541c:	2300      	movs	r3, #0
 800541e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005422:	f7ff fea1 	bl	8005168 <__multadd>
 8005426:	4606      	mov	r6, r0
 8005428:	10ad      	asrs	r5, r5, #2
 800542a:	d03d      	beq.n	80054a8 <__pow5mult+0xa0>
 800542c:	69fc      	ldr	r4, [r7, #28]
 800542e:	b97c      	cbnz	r4, 8005450 <__pow5mult+0x48>
 8005430:	2010      	movs	r0, #16
 8005432:	f7ff fd81 	bl	8004f38 <malloc>
 8005436:	4602      	mov	r2, r0
 8005438:	61f8      	str	r0, [r7, #28]
 800543a:	b928      	cbnz	r0, 8005448 <__pow5mult+0x40>
 800543c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005440:	4b1c      	ldr	r3, [pc, #112]	@ (80054b4 <__pow5mult+0xac>)
 8005442:	481d      	ldr	r0, [pc, #116]	@ (80054b8 <__pow5mult+0xb0>)
 8005444:	f000 fbe6 	bl	8005c14 <__assert_func>
 8005448:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800544c:	6004      	str	r4, [r0, #0]
 800544e:	60c4      	str	r4, [r0, #12]
 8005450:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005454:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005458:	b94c      	cbnz	r4, 800546e <__pow5mult+0x66>
 800545a:	f240 2171 	movw	r1, #625	@ 0x271
 800545e:	4638      	mov	r0, r7
 8005460:	f7ff ff14 	bl	800528c <__i2b>
 8005464:	2300      	movs	r3, #0
 8005466:	4604      	mov	r4, r0
 8005468:	f8c8 0008 	str.w	r0, [r8, #8]
 800546c:	6003      	str	r3, [r0, #0]
 800546e:	f04f 0900 	mov.w	r9, #0
 8005472:	07eb      	lsls	r3, r5, #31
 8005474:	d50a      	bpl.n	800548c <__pow5mult+0x84>
 8005476:	4631      	mov	r1, r6
 8005478:	4622      	mov	r2, r4
 800547a:	4638      	mov	r0, r7
 800547c:	f7ff ff1c 	bl	80052b8 <__multiply>
 8005480:	4680      	mov	r8, r0
 8005482:	4631      	mov	r1, r6
 8005484:	4638      	mov	r0, r7
 8005486:	f7ff fe4d 	bl	8005124 <_Bfree>
 800548a:	4646      	mov	r6, r8
 800548c:	106d      	asrs	r5, r5, #1
 800548e:	d00b      	beq.n	80054a8 <__pow5mult+0xa0>
 8005490:	6820      	ldr	r0, [r4, #0]
 8005492:	b938      	cbnz	r0, 80054a4 <__pow5mult+0x9c>
 8005494:	4622      	mov	r2, r4
 8005496:	4621      	mov	r1, r4
 8005498:	4638      	mov	r0, r7
 800549a:	f7ff ff0d 	bl	80052b8 <__multiply>
 800549e:	6020      	str	r0, [r4, #0]
 80054a0:	f8c0 9000 	str.w	r9, [r0]
 80054a4:	4604      	mov	r4, r0
 80054a6:	e7e4      	b.n	8005472 <__pow5mult+0x6a>
 80054a8:	4630      	mov	r0, r6
 80054aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ae:	bf00      	nop
 80054b0:	08006424 	.word	0x08006424
 80054b4:	0800634b 	.word	0x0800634b
 80054b8:	080063cb 	.word	0x080063cb

080054bc <__lshift>:
 80054bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c0:	460c      	mov	r4, r1
 80054c2:	4607      	mov	r7, r0
 80054c4:	4691      	mov	r9, r2
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	6849      	ldr	r1, [r1, #4]
 80054ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80054ce:	68a3      	ldr	r3, [r4, #8]
 80054d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80054d4:	f108 0601 	add.w	r6, r8, #1
 80054d8:	42b3      	cmp	r3, r6
 80054da:	db0b      	blt.n	80054f4 <__lshift+0x38>
 80054dc:	4638      	mov	r0, r7
 80054de:	f7ff fde1 	bl	80050a4 <_Balloc>
 80054e2:	4605      	mov	r5, r0
 80054e4:	b948      	cbnz	r0, 80054fa <__lshift+0x3e>
 80054e6:	4602      	mov	r2, r0
 80054e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80054ec:	4b27      	ldr	r3, [pc, #156]	@ (800558c <__lshift+0xd0>)
 80054ee:	4828      	ldr	r0, [pc, #160]	@ (8005590 <__lshift+0xd4>)
 80054f0:	f000 fb90 	bl	8005c14 <__assert_func>
 80054f4:	3101      	adds	r1, #1
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	e7ee      	b.n	80054d8 <__lshift+0x1c>
 80054fa:	2300      	movs	r3, #0
 80054fc:	f100 0114 	add.w	r1, r0, #20
 8005500:	f100 0210 	add.w	r2, r0, #16
 8005504:	4618      	mov	r0, r3
 8005506:	4553      	cmp	r3, sl
 8005508:	db33      	blt.n	8005572 <__lshift+0xb6>
 800550a:	6920      	ldr	r0, [r4, #16]
 800550c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005510:	f104 0314 	add.w	r3, r4, #20
 8005514:	f019 091f 	ands.w	r9, r9, #31
 8005518:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800551c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005520:	d02b      	beq.n	800557a <__lshift+0xbe>
 8005522:	468a      	mov	sl, r1
 8005524:	2200      	movs	r2, #0
 8005526:	f1c9 0e20 	rsb	lr, r9, #32
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	fa00 f009 	lsl.w	r0, r0, r9
 8005530:	4310      	orrs	r0, r2
 8005532:	f84a 0b04 	str.w	r0, [sl], #4
 8005536:	f853 2b04 	ldr.w	r2, [r3], #4
 800553a:	459c      	cmp	ip, r3
 800553c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005540:	d8f3      	bhi.n	800552a <__lshift+0x6e>
 8005542:	ebac 0304 	sub.w	r3, ip, r4
 8005546:	3b15      	subs	r3, #21
 8005548:	f023 0303 	bic.w	r3, r3, #3
 800554c:	3304      	adds	r3, #4
 800554e:	f104 0015 	add.w	r0, r4, #21
 8005552:	4584      	cmp	ip, r0
 8005554:	bf38      	it	cc
 8005556:	2304      	movcc	r3, #4
 8005558:	50ca      	str	r2, [r1, r3]
 800555a:	b10a      	cbz	r2, 8005560 <__lshift+0xa4>
 800555c:	f108 0602 	add.w	r6, r8, #2
 8005560:	3e01      	subs	r6, #1
 8005562:	4638      	mov	r0, r7
 8005564:	4621      	mov	r1, r4
 8005566:	612e      	str	r6, [r5, #16]
 8005568:	f7ff fddc 	bl	8005124 <_Bfree>
 800556c:	4628      	mov	r0, r5
 800556e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005572:	f842 0f04 	str.w	r0, [r2, #4]!
 8005576:	3301      	adds	r3, #1
 8005578:	e7c5      	b.n	8005506 <__lshift+0x4a>
 800557a:	3904      	subs	r1, #4
 800557c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005580:	459c      	cmp	ip, r3
 8005582:	f841 2f04 	str.w	r2, [r1, #4]!
 8005586:	d8f9      	bhi.n	800557c <__lshift+0xc0>
 8005588:	e7ea      	b.n	8005560 <__lshift+0xa4>
 800558a:	bf00      	nop
 800558c:	080063ba 	.word	0x080063ba
 8005590:	080063cb 	.word	0x080063cb

08005594 <__mcmp>:
 8005594:	4603      	mov	r3, r0
 8005596:	690a      	ldr	r2, [r1, #16]
 8005598:	6900      	ldr	r0, [r0, #16]
 800559a:	b530      	push	{r4, r5, lr}
 800559c:	1a80      	subs	r0, r0, r2
 800559e:	d10e      	bne.n	80055be <__mcmp+0x2a>
 80055a0:	3314      	adds	r3, #20
 80055a2:	3114      	adds	r1, #20
 80055a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80055a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80055ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80055b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80055b4:	4295      	cmp	r5, r2
 80055b6:	d003      	beq.n	80055c0 <__mcmp+0x2c>
 80055b8:	d205      	bcs.n	80055c6 <__mcmp+0x32>
 80055ba:	f04f 30ff 	mov.w	r0, #4294967295
 80055be:	bd30      	pop	{r4, r5, pc}
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	d3f3      	bcc.n	80055ac <__mcmp+0x18>
 80055c4:	e7fb      	b.n	80055be <__mcmp+0x2a>
 80055c6:	2001      	movs	r0, #1
 80055c8:	e7f9      	b.n	80055be <__mcmp+0x2a>
	...

080055cc <__mdiff>:
 80055cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d0:	4689      	mov	r9, r1
 80055d2:	4606      	mov	r6, r0
 80055d4:	4611      	mov	r1, r2
 80055d6:	4648      	mov	r0, r9
 80055d8:	4614      	mov	r4, r2
 80055da:	f7ff ffdb 	bl	8005594 <__mcmp>
 80055de:	1e05      	subs	r5, r0, #0
 80055e0:	d112      	bne.n	8005608 <__mdiff+0x3c>
 80055e2:	4629      	mov	r1, r5
 80055e4:	4630      	mov	r0, r6
 80055e6:	f7ff fd5d 	bl	80050a4 <_Balloc>
 80055ea:	4602      	mov	r2, r0
 80055ec:	b928      	cbnz	r0, 80055fa <__mdiff+0x2e>
 80055ee:	f240 2137 	movw	r1, #567	@ 0x237
 80055f2:	4b3e      	ldr	r3, [pc, #248]	@ (80056ec <__mdiff+0x120>)
 80055f4:	483e      	ldr	r0, [pc, #248]	@ (80056f0 <__mdiff+0x124>)
 80055f6:	f000 fb0d 	bl	8005c14 <__assert_func>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005600:	4610      	mov	r0, r2
 8005602:	b003      	add	sp, #12
 8005604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005608:	bfbc      	itt	lt
 800560a:	464b      	movlt	r3, r9
 800560c:	46a1      	movlt	r9, r4
 800560e:	4630      	mov	r0, r6
 8005610:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005614:	bfba      	itte	lt
 8005616:	461c      	movlt	r4, r3
 8005618:	2501      	movlt	r5, #1
 800561a:	2500      	movge	r5, #0
 800561c:	f7ff fd42 	bl	80050a4 <_Balloc>
 8005620:	4602      	mov	r2, r0
 8005622:	b918      	cbnz	r0, 800562c <__mdiff+0x60>
 8005624:	f240 2145 	movw	r1, #581	@ 0x245
 8005628:	4b30      	ldr	r3, [pc, #192]	@ (80056ec <__mdiff+0x120>)
 800562a:	e7e3      	b.n	80055f4 <__mdiff+0x28>
 800562c:	f100 0b14 	add.w	fp, r0, #20
 8005630:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005634:	f109 0310 	add.w	r3, r9, #16
 8005638:	60c5      	str	r5, [r0, #12]
 800563a:	f04f 0c00 	mov.w	ip, #0
 800563e:	f109 0514 	add.w	r5, r9, #20
 8005642:	46d9      	mov	r9, fp
 8005644:	6926      	ldr	r6, [r4, #16]
 8005646:	f104 0e14 	add.w	lr, r4, #20
 800564a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800564e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	9b01      	ldr	r3, [sp, #4]
 8005656:	f85e 0b04 	ldr.w	r0, [lr], #4
 800565a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800565e:	b281      	uxth	r1, r0
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	fa1f f38a 	uxth.w	r3, sl
 8005666:	1a5b      	subs	r3, r3, r1
 8005668:	0c00      	lsrs	r0, r0, #16
 800566a:	4463      	add	r3, ip
 800566c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005670:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005674:	b29b      	uxth	r3, r3
 8005676:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800567a:	4576      	cmp	r6, lr
 800567c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005680:	f849 3b04 	str.w	r3, [r9], #4
 8005684:	d8e6      	bhi.n	8005654 <__mdiff+0x88>
 8005686:	1b33      	subs	r3, r6, r4
 8005688:	3b15      	subs	r3, #21
 800568a:	f023 0303 	bic.w	r3, r3, #3
 800568e:	3415      	adds	r4, #21
 8005690:	3304      	adds	r3, #4
 8005692:	42a6      	cmp	r6, r4
 8005694:	bf38      	it	cc
 8005696:	2304      	movcc	r3, #4
 8005698:	441d      	add	r5, r3
 800569a:	445b      	add	r3, fp
 800569c:	461e      	mov	r6, r3
 800569e:	462c      	mov	r4, r5
 80056a0:	4544      	cmp	r4, r8
 80056a2:	d30e      	bcc.n	80056c2 <__mdiff+0xf6>
 80056a4:	f108 0103 	add.w	r1, r8, #3
 80056a8:	1b49      	subs	r1, r1, r5
 80056aa:	f021 0103 	bic.w	r1, r1, #3
 80056ae:	3d03      	subs	r5, #3
 80056b0:	45a8      	cmp	r8, r5
 80056b2:	bf38      	it	cc
 80056b4:	2100      	movcc	r1, #0
 80056b6:	440b      	add	r3, r1
 80056b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80056bc:	b199      	cbz	r1, 80056e6 <__mdiff+0x11a>
 80056be:	6117      	str	r7, [r2, #16]
 80056c0:	e79e      	b.n	8005600 <__mdiff+0x34>
 80056c2:	46e6      	mov	lr, ip
 80056c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80056c8:	fa1f fc81 	uxth.w	ip, r1
 80056cc:	44f4      	add	ip, lr
 80056ce:	0c08      	lsrs	r0, r1, #16
 80056d0:	4471      	add	r1, lr
 80056d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80056d6:	b289      	uxth	r1, r1
 80056d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80056dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80056e0:	f846 1b04 	str.w	r1, [r6], #4
 80056e4:	e7dc      	b.n	80056a0 <__mdiff+0xd4>
 80056e6:	3f01      	subs	r7, #1
 80056e8:	e7e6      	b.n	80056b8 <__mdiff+0xec>
 80056ea:	bf00      	nop
 80056ec:	080063ba 	.word	0x080063ba
 80056f0:	080063cb 	.word	0x080063cb

080056f4 <__d2b>:
 80056f4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80056f8:	2101      	movs	r1, #1
 80056fa:	4690      	mov	r8, r2
 80056fc:	4699      	mov	r9, r3
 80056fe:	9e08      	ldr	r6, [sp, #32]
 8005700:	f7ff fcd0 	bl	80050a4 <_Balloc>
 8005704:	4604      	mov	r4, r0
 8005706:	b930      	cbnz	r0, 8005716 <__d2b+0x22>
 8005708:	4602      	mov	r2, r0
 800570a:	f240 310f 	movw	r1, #783	@ 0x30f
 800570e:	4b23      	ldr	r3, [pc, #140]	@ (800579c <__d2b+0xa8>)
 8005710:	4823      	ldr	r0, [pc, #140]	@ (80057a0 <__d2b+0xac>)
 8005712:	f000 fa7f 	bl	8005c14 <__assert_func>
 8005716:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800571a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800571e:	b10d      	cbz	r5, 8005724 <__d2b+0x30>
 8005720:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	f1b8 0300 	subs.w	r3, r8, #0
 800572a:	d024      	beq.n	8005776 <__d2b+0x82>
 800572c:	4668      	mov	r0, sp
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	f7ff fd7f 	bl	8005232 <__lo0bits>
 8005734:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005738:	b1d8      	cbz	r0, 8005772 <__d2b+0x7e>
 800573a:	f1c0 0320 	rsb	r3, r0, #32
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	430b      	orrs	r3, r1
 8005744:	40c2      	lsrs	r2, r0
 8005746:	6163      	str	r3, [r4, #20]
 8005748:	9201      	str	r2, [sp, #4]
 800574a:	9b01      	ldr	r3, [sp, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	bf0c      	ite	eq
 8005750:	2201      	moveq	r2, #1
 8005752:	2202      	movne	r2, #2
 8005754:	61a3      	str	r3, [r4, #24]
 8005756:	6122      	str	r2, [r4, #16]
 8005758:	b1ad      	cbz	r5, 8005786 <__d2b+0x92>
 800575a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800575e:	4405      	add	r5, r0
 8005760:	6035      	str	r5, [r6, #0]
 8005762:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005768:	6018      	str	r0, [r3, #0]
 800576a:	4620      	mov	r0, r4
 800576c:	b002      	add	sp, #8
 800576e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005772:	6161      	str	r1, [r4, #20]
 8005774:	e7e9      	b.n	800574a <__d2b+0x56>
 8005776:	a801      	add	r0, sp, #4
 8005778:	f7ff fd5b 	bl	8005232 <__lo0bits>
 800577c:	9b01      	ldr	r3, [sp, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	6163      	str	r3, [r4, #20]
 8005782:	3020      	adds	r0, #32
 8005784:	e7e7      	b.n	8005756 <__d2b+0x62>
 8005786:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800578a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800578e:	6030      	str	r0, [r6, #0]
 8005790:	6918      	ldr	r0, [r3, #16]
 8005792:	f7ff fd2f 	bl	80051f4 <__hi0bits>
 8005796:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800579a:	e7e4      	b.n	8005766 <__d2b+0x72>
 800579c:	080063ba 	.word	0x080063ba
 80057a0:	080063cb 	.word	0x080063cb

080057a4 <__ssputs_r>:
 80057a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	461f      	mov	r7, r3
 80057aa:	688e      	ldr	r6, [r1, #8]
 80057ac:	4682      	mov	sl, r0
 80057ae:	42be      	cmp	r6, r7
 80057b0:	460c      	mov	r4, r1
 80057b2:	4690      	mov	r8, r2
 80057b4:	680b      	ldr	r3, [r1, #0]
 80057b6:	d82d      	bhi.n	8005814 <__ssputs_r+0x70>
 80057b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057c0:	d026      	beq.n	8005810 <__ssputs_r+0x6c>
 80057c2:	6965      	ldr	r5, [r4, #20]
 80057c4:	6909      	ldr	r1, [r1, #16]
 80057c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057ca:	eba3 0901 	sub.w	r9, r3, r1
 80057ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057d2:	1c7b      	adds	r3, r7, #1
 80057d4:	444b      	add	r3, r9
 80057d6:	106d      	asrs	r5, r5, #1
 80057d8:	429d      	cmp	r5, r3
 80057da:	bf38      	it	cc
 80057dc:	461d      	movcc	r5, r3
 80057de:	0553      	lsls	r3, r2, #21
 80057e0:	d527      	bpl.n	8005832 <__ssputs_r+0x8e>
 80057e2:	4629      	mov	r1, r5
 80057e4:	f7ff fbd2 	bl	8004f8c <_malloc_r>
 80057e8:	4606      	mov	r6, r0
 80057ea:	b360      	cbz	r0, 8005846 <__ssputs_r+0xa2>
 80057ec:	464a      	mov	r2, r9
 80057ee:	6921      	ldr	r1, [r4, #16]
 80057f0:	f000 fa02 	bl	8005bf8 <memcpy>
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80057fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fe:	81a3      	strh	r3, [r4, #12]
 8005800:	6126      	str	r6, [r4, #16]
 8005802:	444e      	add	r6, r9
 8005804:	6026      	str	r6, [r4, #0]
 8005806:	463e      	mov	r6, r7
 8005808:	6165      	str	r5, [r4, #20]
 800580a:	eba5 0509 	sub.w	r5, r5, r9
 800580e:	60a5      	str	r5, [r4, #8]
 8005810:	42be      	cmp	r6, r7
 8005812:	d900      	bls.n	8005816 <__ssputs_r+0x72>
 8005814:	463e      	mov	r6, r7
 8005816:	4632      	mov	r2, r6
 8005818:	4641      	mov	r1, r8
 800581a:	6820      	ldr	r0, [r4, #0]
 800581c:	f000 f9c2 	bl	8005ba4 <memmove>
 8005820:	2000      	movs	r0, #0
 8005822:	68a3      	ldr	r3, [r4, #8]
 8005824:	1b9b      	subs	r3, r3, r6
 8005826:	60a3      	str	r3, [r4, #8]
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	4433      	add	r3, r6
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005832:	462a      	mov	r2, r5
 8005834:	f000 fa32 	bl	8005c9c <_realloc_r>
 8005838:	4606      	mov	r6, r0
 800583a:	2800      	cmp	r0, #0
 800583c:	d1e0      	bne.n	8005800 <__ssputs_r+0x5c>
 800583e:	4650      	mov	r0, sl
 8005840:	6921      	ldr	r1, [r4, #16]
 8005842:	f7ff fb31 	bl	8004ea8 <_free_r>
 8005846:	230c      	movs	r3, #12
 8005848:	f8ca 3000 	str.w	r3, [sl]
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	f04f 30ff 	mov.w	r0, #4294967295
 8005852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005856:	81a3      	strh	r3, [r4, #12]
 8005858:	e7e9      	b.n	800582e <__ssputs_r+0x8a>
	...

0800585c <_svfiprintf_r>:
 800585c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005860:	4698      	mov	r8, r3
 8005862:	898b      	ldrh	r3, [r1, #12]
 8005864:	4607      	mov	r7, r0
 8005866:	061b      	lsls	r3, r3, #24
 8005868:	460d      	mov	r5, r1
 800586a:	4614      	mov	r4, r2
 800586c:	b09d      	sub	sp, #116	@ 0x74
 800586e:	d510      	bpl.n	8005892 <_svfiprintf_r+0x36>
 8005870:	690b      	ldr	r3, [r1, #16]
 8005872:	b973      	cbnz	r3, 8005892 <_svfiprintf_r+0x36>
 8005874:	2140      	movs	r1, #64	@ 0x40
 8005876:	f7ff fb89 	bl	8004f8c <_malloc_r>
 800587a:	6028      	str	r0, [r5, #0]
 800587c:	6128      	str	r0, [r5, #16]
 800587e:	b930      	cbnz	r0, 800588e <_svfiprintf_r+0x32>
 8005880:	230c      	movs	r3, #12
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	b01d      	add	sp, #116	@ 0x74
 800588a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588e:	2340      	movs	r3, #64	@ 0x40
 8005890:	616b      	str	r3, [r5, #20]
 8005892:	2300      	movs	r3, #0
 8005894:	9309      	str	r3, [sp, #36]	@ 0x24
 8005896:	2320      	movs	r3, #32
 8005898:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800589c:	2330      	movs	r3, #48	@ 0x30
 800589e:	f04f 0901 	mov.w	r9, #1
 80058a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80058a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005a40 <_svfiprintf_r+0x1e4>
 80058aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058ae:	4623      	mov	r3, r4
 80058b0:	469a      	mov	sl, r3
 80058b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058b6:	b10a      	cbz	r2, 80058bc <_svfiprintf_r+0x60>
 80058b8:	2a25      	cmp	r2, #37	@ 0x25
 80058ba:	d1f9      	bne.n	80058b0 <_svfiprintf_r+0x54>
 80058bc:	ebba 0b04 	subs.w	fp, sl, r4
 80058c0:	d00b      	beq.n	80058da <_svfiprintf_r+0x7e>
 80058c2:	465b      	mov	r3, fp
 80058c4:	4622      	mov	r2, r4
 80058c6:	4629      	mov	r1, r5
 80058c8:	4638      	mov	r0, r7
 80058ca:	f7ff ff6b 	bl	80057a4 <__ssputs_r>
 80058ce:	3001      	adds	r0, #1
 80058d0:	f000 80a7 	beq.w	8005a22 <_svfiprintf_r+0x1c6>
 80058d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058d6:	445a      	add	r2, fp
 80058d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80058da:	f89a 3000 	ldrb.w	r3, [sl]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 809f 	beq.w	8005a22 <_svfiprintf_r+0x1c6>
 80058e4:	2300      	movs	r3, #0
 80058e6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058ee:	f10a 0a01 	add.w	sl, sl, #1
 80058f2:	9304      	str	r3, [sp, #16]
 80058f4:	9307      	str	r3, [sp, #28]
 80058f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80058fc:	4654      	mov	r4, sl
 80058fe:	2205      	movs	r2, #5
 8005900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005904:	484e      	ldr	r0, [pc, #312]	@ (8005a40 <_svfiprintf_r+0x1e4>)
 8005906:	f7fe fc70 	bl	80041ea <memchr>
 800590a:	9a04      	ldr	r2, [sp, #16]
 800590c:	b9d8      	cbnz	r0, 8005946 <_svfiprintf_r+0xea>
 800590e:	06d0      	lsls	r0, r2, #27
 8005910:	bf44      	itt	mi
 8005912:	2320      	movmi	r3, #32
 8005914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005918:	0711      	lsls	r1, r2, #28
 800591a:	bf44      	itt	mi
 800591c:	232b      	movmi	r3, #43	@ 0x2b
 800591e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005922:	f89a 3000 	ldrb.w	r3, [sl]
 8005926:	2b2a      	cmp	r3, #42	@ 0x2a
 8005928:	d015      	beq.n	8005956 <_svfiprintf_r+0xfa>
 800592a:	4654      	mov	r4, sl
 800592c:	2000      	movs	r0, #0
 800592e:	f04f 0c0a 	mov.w	ip, #10
 8005932:	9a07      	ldr	r2, [sp, #28]
 8005934:	4621      	mov	r1, r4
 8005936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800593a:	3b30      	subs	r3, #48	@ 0x30
 800593c:	2b09      	cmp	r3, #9
 800593e:	d94b      	bls.n	80059d8 <_svfiprintf_r+0x17c>
 8005940:	b1b0      	cbz	r0, 8005970 <_svfiprintf_r+0x114>
 8005942:	9207      	str	r2, [sp, #28]
 8005944:	e014      	b.n	8005970 <_svfiprintf_r+0x114>
 8005946:	eba0 0308 	sub.w	r3, r0, r8
 800594a:	fa09 f303 	lsl.w	r3, r9, r3
 800594e:	4313      	orrs	r3, r2
 8005950:	46a2      	mov	sl, r4
 8005952:	9304      	str	r3, [sp, #16]
 8005954:	e7d2      	b.n	80058fc <_svfiprintf_r+0xa0>
 8005956:	9b03      	ldr	r3, [sp, #12]
 8005958:	1d19      	adds	r1, r3, #4
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	9103      	str	r1, [sp, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	bfbb      	ittet	lt
 8005962:	425b      	neglt	r3, r3
 8005964:	f042 0202 	orrlt.w	r2, r2, #2
 8005968:	9307      	strge	r3, [sp, #28]
 800596a:	9307      	strlt	r3, [sp, #28]
 800596c:	bfb8      	it	lt
 800596e:	9204      	strlt	r2, [sp, #16]
 8005970:	7823      	ldrb	r3, [r4, #0]
 8005972:	2b2e      	cmp	r3, #46	@ 0x2e
 8005974:	d10a      	bne.n	800598c <_svfiprintf_r+0x130>
 8005976:	7863      	ldrb	r3, [r4, #1]
 8005978:	2b2a      	cmp	r3, #42	@ 0x2a
 800597a:	d132      	bne.n	80059e2 <_svfiprintf_r+0x186>
 800597c:	9b03      	ldr	r3, [sp, #12]
 800597e:	3402      	adds	r4, #2
 8005980:	1d1a      	adds	r2, r3, #4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	9203      	str	r2, [sp, #12]
 8005986:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800598a:	9305      	str	r3, [sp, #20]
 800598c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005a44 <_svfiprintf_r+0x1e8>
 8005990:	2203      	movs	r2, #3
 8005992:	4650      	mov	r0, sl
 8005994:	7821      	ldrb	r1, [r4, #0]
 8005996:	f7fe fc28 	bl	80041ea <memchr>
 800599a:	b138      	cbz	r0, 80059ac <_svfiprintf_r+0x150>
 800599c:	2240      	movs	r2, #64	@ 0x40
 800599e:	9b04      	ldr	r3, [sp, #16]
 80059a0:	eba0 000a 	sub.w	r0, r0, sl
 80059a4:	4082      	lsls	r2, r0
 80059a6:	4313      	orrs	r3, r2
 80059a8:	3401      	adds	r4, #1
 80059aa:	9304      	str	r3, [sp, #16]
 80059ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059b0:	2206      	movs	r2, #6
 80059b2:	4825      	ldr	r0, [pc, #148]	@ (8005a48 <_svfiprintf_r+0x1ec>)
 80059b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059b8:	f7fe fc17 	bl	80041ea <memchr>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d036      	beq.n	8005a2e <_svfiprintf_r+0x1d2>
 80059c0:	4b22      	ldr	r3, [pc, #136]	@ (8005a4c <_svfiprintf_r+0x1f0>)
 80059c2:	bb1b      	cbnz	r3, 8005a0c <_svfiprintf_r+0x1b0>
 80059c4:	9b03      	ldr	r3, [sp, #12]
 80059c6:	3307      	adds	r3, #7
 80059c8:	f023 0307 	bic.w	r3, r3, #7
 80059cc:	3308      	adds	r3, #8
 80059ce:	9303      	str	r3, [sp, #12]
 80059d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059d2:	4433      	add	r3, r6
 80059d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059d6:	e76a      	b.n	80058ae <_svfiprintf_r+0x52>
 80059d8:	460c      	mov	r4, r1
 80059da:	2001      	movs	r0, #1
 80059dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80059e0:	e7a8      	b.n	8005934 <_svfiprintf_r+0xd8>
 80059e2:	2300      	movs	r3, #0
 80059e4:	f04f 0c0a 	mov.w	ip, #10
 80059e8:	4619      	mov	r1, r3
 80059ea:	3401      	adds	r4, #1
 80059ec:	9305      	str	r3, [sp, #20]
 80059ee:	4620      	mov	r0, r4
 80059f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059f4:	3a30      	subs	r2, #48	@ 0x30
 80059f6:	2a09      	cmp	r2, #9
 80059f8:	d903      	bls.n	8005a02 <_svfiprintf_r+0x1a6>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0c6      	beq.n	800598c <_svfiprintf_r+0x130>
 80059fe:	9105      	str	r1, [sp, #20]
 8005a00:	e7c4      	b.n	800598c <_svfiprintf_r+0x130>
 8005a02:	4604      	mov	r4, r0
 8005a04:	2301      	movs	r3, #1
 8005a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a0a:	e7f0      	b.n	80059ee <_svfiprintf_r+0x192>
 8005a0c:	ab03      	add	r3, sp, #12
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	462a      	mov	r2, r5
 8005a12:	4638      	mov	r0, r7
 8005a14:	4b0e      	ldr	r3, [pc, #56]	@ (8005a50 <_svfiprintf_r+0x1f4>)
 8005a16:	a904      	add	r1, sp, #16
 8005a18:	f7fd fe84 	bl	8003724 <_printf_float>
 8005a1c:	1c42      	adds	r2, r0, #1
 8005a1e:	4606      	mov	r6, r0
 8005a20:	d1d6      	bne.n	80059d0 <_svfiprintf_r+0x174>
 8005a22:	89ab      	ldrh	r3, [r5, #12]
 8005a24:	065b      	lsls	r3, r3, #25
 8005a26:	f53f af2d 	bmi.w	8005884 <_svfiprintf_r+0x28>
 8005a2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a2c:	e72c      	b.n	8005888 <_svfiprintf_r+0x2c>
 8005a2e:	ab03      	add	r3, sp, #12
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	462a      	mov	r2, r5
 8005a34:	4638      	mov	r0, r7
 8005a36:	4b06      	ldr	r3, [pc, #24]	@ (8005a50 <_svfiprintf_r+0x1f4>)
 8005a38:	a904      	add	r1, sp, #16
 8005a3a:	f7fe f911 	bl	8003c60 <_printf_i>
 8005a3e:	e7ed      	b.n	8005a1c <_svfiprintf_r+0x1c0>
 8005a40:	08006520 	.word	0x08006520
 8005a44:	08006526 	.word	0x08006526
 8005a48:	0800652a 	.word	0x0800652a
 8005a4c:	08003725 	.word	0x08003725
 8005a50:	080057a5 	.word	0x080057a5

08005a54 <__sflush_r>:
 8005a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	0716      	lsls	r6, r2, #28
 8005a5c:	4605      	mov	r5, r0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	d454      	bmi.n	8005b0c <__sflush_r+0xb8>
 8005a62:	684b      	ldr	r3, [r1, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	dc02      	bgt.n	8005a6e <__sflush_r+0x1a>
 8005a68:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	dd48      	ble.n	8005b00 <__sflush_r+0xac>
 8005a6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a70:	2e00      	cmp	r6, #0
 8005a72:	d045      	beq.n	8005b00 <__sflush_r+0xac>
 8005a74:	2300      	movs	r3, #0
 8005a76:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a7a:	682f      	ldr	r7, [r5, #0]
 8005a7c:	6a21      	ldr	r1, [r4, #32]
 8005a7e:	602b      	str	r3, [r5, #0]
 8005a80:	d030      	beq.n	8005ae4 <__sflush_r+0x90>
 8005a82:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	0759      	lsls	r1, r3, #29
 8005a88:	d505      	bpl.n	8005a96 <__sflush_r+0x42>
 8005a8a:	6863      	ldr	r3, [r4, #4]
 8005a8c:	1ad2      	subs	r2, r2, r3
 8005a8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a90:	b10b      	cbz	r3, 8005a96 <__sflush_r+0x42>
 8005a92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a94:	1ad2      	subs	r2, r2, r3
 8005a96:	2300      	movs	r3, #0
 8005a98:	4628      	mov	r0, r5
 8005a9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a9c:	6a21      	ldr	r1, [r4, #32]
 8005a9e:	47b0      	blx	r6
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	d106      	bne.n	8005ab4 <__sflush_r+0x60>
 8005aa6:	6829      	ldr	r1, [r5, #0]
 8005aa8:	291d      	cmp	r1, #29
 8005aaa:	d82b      	bhi.n	8005b04 <__sflush_r+0xb0>
 8005aac:	4a28      	ldr	r2, [pc, #160]	@ (8005b50 <__sflush_r+0xfc>)
 8005aae:	410a      	asrs	r2, r1
 8005ab0:	07d6      	lsls	r6, r2, #31
 8005ab2:	d427      	bmi.n	8005b04 <__sflush_r+0xb0>
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	6062      	str	r2, [r4, #4]
 8005ab8:	6922      	ldr	r2, [r4, #16]
 8005aba:	04d9      	lsls	r1, r3, #19
 8005abc:	6022      	str	r2, [r4, #0]
 8005abe:	d504      	bpl.n	8005aca <__sflush_r+0x76>
 8005ac0:	1c42      	adds	r2, r0, #1
 8005ac2:	d101      	bne.n	8005ac8 <__sflush_r+0x74>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b903      	cbnz	r3, 8005aca <__sflush_r+0x76>
 8005ac8:	6560      	str	r0, [r4, #84]	@ 0x54
 8005aca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005acc:	602f      	str	r7, [r5, #0]
 8005ace:	b1b9      	cbz	r1, 8005b00 <__sflush_r+0xac>
 8005ad0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ad4:	4299      	cmp	r1, r3
 8005ad6:	d002      	beq.n	8005ade <__sflush_r+0x8a>
 8005ad8:	4628      	mov	r0, r5
 8005ada:	f7ff f9e5 	bl	8004ea8 <_free_r>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ae2:	e00d      	b.n	8005b00 <__sflush_r+0xac>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	47b0      	blx	r6
 8005aea:	4602      	mov	r2, r0
 8005aec:	1c50      	adds	r0, r2, #1
 8005aee:	d1c9      	bne.n	8005a84 <__sflush_r+0x30>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0c6      	beq.n	8005a84 <__sflush_r+0x30>
 8005af6:	2b1d      	cmp	r3, #29
 8005af8:	d001      	beq.n	8005afe <__sflush_r+0xaa>
 8005afa:	2b16      	cmp	r3, #22
 8005afc:	d11d      	bne.n	8005b3a <__sflush_r+0xe6>
 8005afe:	602f      	str	r7, [r5, #0]
 8005b00:	2000      	movs	r0, #0
 8005b02:	e021      	b.n	8005b48 <__sflush_r+0xf4>
 8005b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b08:	b21b      	sxth	r3, r3
 8005b0a:	e01a      	b.n	8005b42 <__sflush_r+0xee>
 8005b0c:	690f      	ldr	r7, [r1, #16]
 8005b0e:	2f00      	cmp	r7, #0
 8005b10:	d0f6      	beq.n	8005b00 <__sflush_r+0xac>
 8005b12:	0793      	lsls	r3, r2, #30
 8005b14:	bf18      	it	ne
 8005b16:	2300      	movne	r3, #0
 8005b18:	680e      	ldr	r6, [r1, #0]
 8005b1a:	bf08      	it	eq
 8005b1c:	694b      	ldreq	r3, [r1, #20]
 8005b1e:	1bf6      	subs	r6, r6, r7
 8005b20:	600f      	str	r7, [r1, #0]
 8005b22:	608b      	str	r3, [r1, #8]
 8005b24:	2e00      	cmp	r6, #0
 8005b26:	ddeb      	ble.n	8005b00 <__sflush_r+0xac>
 8005b28:	4633      	mov	r3, r6
 8005b2a:	463a      	mov	r2, r7
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	6a21      	ldr	r1, [r4, #32]
 8005b30:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005b34:	47e0      	blx	ip
 8005b36:	2800      	cmp	r0, #0
 8005b38:	dc07      	bgt.n	8005b4a <__sflush_r+0xf6>
 8005b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b42:	f04f 30ff 	mov.w	r0, #4294967295
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b4a:	4407      	add	r7, r0
 8005b4c:	1a36      	subs	r6, r6, r0
 8005b4e:	e7e9      	b.n	8005b24 <__sflush_r+0xd0>
 8005b50:	dfbffffe 	.word	0xdfbffffe

08005b54 <_fflush_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	690b      	ldr	r3, [r1, #16]
 8005b58:	4605      	mov	r5, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	b913      	cbnz	r3, 8005b64 <_fflush_r+0x10>
 8005b5e:	2500      	movs	r5, #0
 8005b60:	4628      	mov	r0, r5
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	b118      	cbz	r0, 8005b6e <_fflush_r+0x1a>
 8005b66:	6a03      	ldr	r3, [r0, #32]
 8005b68:	b90b      	cbnz	r3, 8005b6e <_fflush_r+0x1a>
 8005b6a:	f7fe fa25 	bl	8003fb8 <__sinit>
 8005b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f3      	beq.n	8005b5e <_fflush_r+0xa>
 8005b76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b78:	07d0      	lsls	r0, r2, #31
 8005b7a:	d404      	bmi.n	8005b86 <_fflush_r+0x32>
 8005b7c:	0599      	lsls	r1, r3, #22
 8005b7e:	d402      	bmi.n	8005b86 <_fflush_r+0x32>
 8005b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b82:	f7fe fb30 	bl	80041e6 <__retarget_lock_acquire_recursive>
 8005b86:	4628      	mov	r0, r5
 8005b88:	4621      	mov	r1, r4
 8005b8a:	f7ff ff63 	bl	8005a54 <__sflush_r>
 8005b8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b90:	4605      	mov	r5, r0
 8005b92:	07da      	lsls	r2, r3, #31
 8005b94:	d4e4      	bmi.n	8005b60 <_fflush_r+0xc>
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	059b      	lsls	r3, r3, #22
 8005b9a:	d4e1      	bmi.n	8005b60 <_fflush_r+0xc>
 8005b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b9e:	f7fe fb23 	bl	80041e8 <__retarget_lock_release_recursive>
 8005ba2:	e7dd      	b.n	8005b60 <_fflush_r+0xc>

08005ba4 <memmove>:
 8005ba4:	4288      	cmp	r0, r1
 8005ba6:	b510      	push	{r4, lr}
 8005ba8:	eb01 0402 	add.w	r4, r1, r2
 8005bac:	d902      	bls.n	8005bb4 <memmove+0x10>
 8005bae:	4284      	cmp	r4, r0
 8005bb0:	4623      	mov	r3, r4
 8005bb2:	d807      	bhi.n	8005bc4 <memmove+0x20>
 8005bb4:	1e43      	subs	r3, r0, #1
 8005bb6:	42a1      	cmp	r1, r4
 8005bb8:	d008      	beq.n	8005bcc <memmove+0x28>
 8005bba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bc2:	e7f8      	b.n	8005bb6 <memmove+0x12>
 8005bc4:	4601      	mov	r1, r0
 8005bc6:	4402      	add	r2, r0
 8005bc8:	428a      	cmp	r2, r1
 8005bca:	d100      	bne.n	8005bce <memmove+0x2a>
 8005bcc:	bd10      	pop	{r4, pc}
 8005bce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bd6:	e7f7      	b.n	8005bc8 <memmove+0x24>

08005bd8 <_sbrk_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	2300      	movs	r3, #0
 8005bdc:	4d05      	ldr	r5, [pc, #20]	@ (8005bf4 <_sbrk_r+0x1c>)
 8005bde:	4604      	mov	r4, r0
 8005be0:	4608      	mov	r0, r1
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	f7fb fb16 	bl	8001214 <_sbrk>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_sbrk_r+0x1a>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_sbrk_r+0x1a>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	20000498 	.word	0x20000498

08005bf8 <memcpy>:
 8005bf8:	440a      	add	r2, r1
 8005bfa:	4291      	cmp	r1, r2
 8005bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c00:	d100      	bne.n	8005c04 <memcpy+0xc>
 8005c02:	4770      	bx	lr
 8005c04:	b510      	push	{r4, lr}
 8005c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c0a:	4291      	cmp	r1, r2
 8005c0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c10:	d1f9      	bne.n	8005c06 <memcpy+0xe>
 8005c12:	bd10      	pop	{r4, pc}

08005c14 <__assert_func>:
 8005c14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c16:	4614      	mov	r4, r2
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4b09      	ldr	r3, [pc, #36]	@ (8005c40 <__assert_func+0x2c>)
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68d8      	ldr	r0, [r3, #12]
 8005c22:	b954      	cbnz	r4, 8005c3a <__assert_func+0x26>
 8005c24:	4b07      	ldr	r3, [pc, #28]	@ (8005c44 <__assert_func+0x30>)
 8005c26:	461c      	mov	r4, r3
 8005c28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c2c:	9100      	str	r1, [sp, #0]
 8005c2e:	462b      	mov	r3, r5
 8005c30:	4905      	ldr	r1, [pc, #20]	@ (8005c48 <__assert_func+0x34>)
 8005c32:	f000 f86f 	bl	8005d14 <fiprintf>
 8005c36:	f000 f87f 	bl	8005d38 <abort>
 8005c3a:	4b04      	ldr	r3, [pc, #16]	@ (8005c4c <__assert_func+0x38>)
 8005c3c:	e7f4      	b.n	8005c28 <__assert_func+0x14>
 8005c3e:	bf00      	nop
 8005c40:	20000018 	.word	0x20000018
 8005c44:	08006576 	.word	0x08006576
 8005c48:	08006548 	.word	0x08006548
 8005c4c:	0800653b 	.word	0x0800653b

08005c50 <_calloc_r>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	fba1 5402 	umull	r5, r4, r1, r2
 8005c56:	b93c      	cbnz	r4, 8005c68 <_calloc_r+0x18>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f7ff f997 	bl	8004f8c <_malloc_r>
 8005c5e:	4606      	mov	r6, r0
 8005c60:	b928      	cbnz	r0, 8005c6e <_calloc_r+0x1e>
 8005c62:	2600      	movs	r6, #0
 8005c64:	4630      	mov	r0, r6
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
 8005c68:	220c      	movs	r2, #12
 8005c6a:	6002      	str	r2, [r0, #0]
 8005c6c:	e7f9      	b.n	8005c62 <_calloc_r+0x12>
 8005c6e:	462a      	mov	r2, r5
 8005c70:	4621      	mov	r1, r4
 8005c72:	f7fe fa3a 	bl	80040ea <memset>
 8005c76:	e7f5      	b.n	8005c64 <_calloc_r+0x14>

08005c78 <__ascii_mbtowc>:
 8005c78:	b082      	sub	sp, #8
 8005c7a:	b901      	cbnz	r1, 8005c7e <__ascii_mbtowc+0x6>
 8005c7c:	a901      	add	r1, sp, #4
 8005c7e:	b142      	cbz	r2, 8005c92 <__ascii_mbtowc+0x1a>
 8005c80:	b14b      	cbz	r3, 8005c96 <__ascii_mbtowc+0x1e>
 8005c82:	7813      	ldrb	r3, [r2, #0]
 8005c84:	600b      	str	r3, [r1, #0]
 8005c86:	7812      	ldrb	r2, [r2, #0]
 8005c88:	1e10      	subs	r0, r2, #0
 8005c8a:	bf18      	it	ne
 8005c8c:	2001      	movne	r0, #1
 8005c8e:	b002      	add	sp, #8
 8005c90:	4770      	bx	lr
 8005c92:	4610      	mov	r0, r2
 8005c94:	e7fb      	b.n	8005c8e <__ascii_mbtowc+0x16>
 8005c96:	f06f 0001 	mvn.w	r0, #1
 8005c9a:	e7f8      	b.n	8005c8e <__ascii_mbtowc+0x16>

08005c9c <_realloc_r>:
 8005c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	4615      	mov	r5, r2
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	b921      	cbnz	r1, 8005cb2 <_realloc_r+0x16>
 8005ca8:	4611      	mov	r1, r2
 8005caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cae:	f7ff b96d 	b.w	8004f8c <_malloc_r>
 8005cb2:	b92a      	cbnz	r2, 8005cc0 <_realloc_r+0x24>
 8005cb4:	f7ff f8f8 	bl	8004ea8 <_free_r>
 8005cb8:	2400      	movs	r4, #0
 8005cba:	4620      	mov	r0, r4
 8005cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc0:	f000 f841 	bl	8005d46 <_malloc_usable_size_r>
 8005cc4:	4285      	cmp	r5, r0
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	d802      	bhi.n	8005cd0 <_realloc_r+0x34>
 8005cca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005cce:	d8f4      	bhi.n	8005cba <_realloc_r+0x1e>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	f7ff f95a 	bl	8004f8c <_malloc_r>
 8005cd8:	4607      	mov	r7, r0
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d0ec      	beq.n	8005cb8 <_realloc_r+0x1c>
 8005cde:	42b5      	cmp	r5, r6
 8005ce0:	462a      	mov	r2, r5
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	bf28      	it	cs
 8005ce6:	4632      	movcs	r2, r6
 8005ce8:	f7ff ff86 	bl	8005bf8 <memcpy>
 8005cec:	4621      	mov	r1, r4
 8005cee:	4640      	mov	r0, r8
 8005cf0:	f7ff f8da 	bl	8004ea8 <_free_r>
 8005cf4:	463c      	mov	r4, r7
 8005cf6:	e7e0      	b.n	8005cba <_realloc_r+0x1e>

08005cf8 <__ascii_wctomb>:
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	4608      	mov	r0, r1
 8005cfc:	b141      	cbz	r1, 8005d10 <__ascii_wctomb+0x18>
 8005cfe:	2aff      	cmp	r2, #255	@ 0xff
 8005d00:	d904      	bls.n	8005d0c <__ascii_wctomb+0x14>
 8005d02:	228a      	movs	r2, #138	@ 0x8a
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	4770      	bx	lr
 8005d0c:	2001      	movs	r0, #1
 8005d0e:	700a      	strb	r2, [r1, #0]
 8005d10:	4770      	bx	lr
	...

08005d14 <fiprintf>:
 8005d14:	b40e      	push	{r1, r2, r3}
 8005d16:	b503      	push	{r0, r1, lr}
 8005d18:	4601      	mov	r1, r0
 8005d1a:	ab03      	add	r3, sp, #12
 8005d1c:	4805      	ldr	r0, [pc, #20]	@ (8005d34 <fiprintf+0x20>)
 8005d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d22:	6800      	ldr	r0, [r0, #0]
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	f000 f83d 	bl	8005da4 <_vfiprintf_r>
 8005d2a:	b002      	add	sp, #8
 8005d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d30:	b003      	add	sp, #12
 8005d32:	4770      	bx	lr
 8005d34:	20000018 	.word	0x20000018

08005d38 <abort>:
 8005d38:	2006      	movs	r0, #6
 8005d3a:	b508      	push	{r3, lr}
 8005d3c:	f000 fa06 	bl	800614c <raise>
 8005d40:	2001      	movs	r0, #1
 8005d42:	f7fb f9f2 	bl	800112a <_exit>

08005d46 <_malloc_usable_size_r>:
 8005d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d4a:	1f18      	subs	r0, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bfbc      	itt	lt
 8005d50:	580b      	ldrlt	r3, [r1, r0]
 8005d52:	18c0      	addlt	r0, r0, r3
 8005d54:	4770      	bx	lr

08005d56 <__sfputc_r>:
 8005d56:	6893      	ldr	r3, [r2, #8]
 8005d58:	b410      	push	{r4}
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	6093      	str	r3, [r2, #8]
 8005d60:	da07      	bge.n	8005d72 <__sfputc_r+0x1c>
 8005d62:	6994      	ldr	r4, [r2, #24]
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	db01      	blt.n	8005d6c <__sfputc_r+0x16>
 8005d68:	290a      	cmp	r1, #10
 8005d6a:	d102      	bne.n	8005d72 <__sfputc_r+0x1c>
 8005d6c:	bc10      	pop	{r4}
 8005d6e:	f000 b931 	b.w	8005fd4 <__swbuf_r>
 8005d72:	6813      	ldr	r3, [r2, #0]
 8005d74:	1c58      	adds	r0, r3, #1
 8005d76:	6010      	str	r0, [r2, #0]
 8005d78:	7019      	strb	r1, [r3, #0]
 8005d7a:	4608      	mov	r0, r1
 8005d7c:	bc10      	pop	{r4}
 8005d7e:	4770      	bx	lr

08005d80 <__sfputs_r>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	4606      	mov	r6, r0
 8005d84:	460f      	mov	r7, r1
 8005d86:	4614      	mov	r4, r2
 8005d88:	18d5      	adds	r5, r2, r3
 8005d8a:	42ac      	cmp	r4, r5
 8005d8c:	d101      	bne.n	8005d92 <__sfputs_r+0x12>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	e007      	b.n	8005da2 <__sfputs_r+0x22>
 8005d92:	463a      	mov	r2, r7
 8005d94:	4630      	mov	r0, r6
 8005d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9a:	f7ff ffdc 	bl	8005d56 <__sfputc_r>
 8005d9e:	1c43      	adds	r3, r0, #1
 8005da0:	d1f3      	bne.n	8005d8a <__sfputs_r+0xa>
 8005da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005da4 <_vfiprintf_r>:
 8005da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da8:	460d      	mov	r5, r1
 8005daa:	4614      	mov	r4, r2
 8005dac:	4698      	mov	r8, r3
 8005dae:	4606      	mov	r6, r0
 8005db0:	b09d      	sub	sp, #116	@ 0x74
 8005db2:	b118      	cbz	r0, 8005dbc <_vfiprintf_r+0x18>
 8005db4:	6a03      	ldr	r3, [r0, #32]
 8005db6:	b90b      	cbnz	r3, 8005dbc <_vfiprintf_r+0x18>
 8005db8:	f7fe f8fe 	bl	8003fb8 <__sinit>
 8005dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dbe:	07d9      	lsls	r1, r3, #31
 8005dc0:	d405      	bmi.n	8005dce <_vfiprintf_r+0x2a>
 8005dc2:	89ab      	ldrh	r3, [r5, #12]
 8005dc4:	059a      	lsls	r2, r3, #22
 8005dc6:	d402      	bmi.n	8005dce <_vfiprintf_r+0x2a>
 8005dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dca:	f7fe fa0c 	bl	80041e6 <__retarget_lock_acquire_recursive>
 8005dce:	89ab      	ldrh	r3, [r5, #12]
 8005dd0:	071b      	lsls	r3, r3, #28
 8005dd2:	d501      	bpl.n	8005dd8 <_vfiprintf_r+0x34>
 8005dd4:	692b      	ldr	r3, [r5, #16]
 8005dd6:	b99b      	cbnz	r3, 8005e00 <_vfiprintf_r+0x5c>
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4630      	mov	r0, r6
 8005ddc:	f000 f938 	bl	8006050 <__swsetup_r>
 8005de0:	b170      	cbz	r0, 8005e00 <_vfiprintf_r+0x5c>
 8005de2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005de4:	07dc      	lsls	r4, r3, #31
 8005de6:	d504      	bpl.n	8005df2 <_vfiprintf_r+0x4e>
 8005de8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dec:	b01d      	add	sp, #116	@ 0x74
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	89ab      	ldrh	r3, [r5, #12]
 8005df4:	0598      	lsls	r0, r3, #22
 8005df6:	d4f7      	bmi.n	8005de8 <_vfiprintf_r+0x44>
 8005df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dfa:	f7fe f9f5 	bl	80041e8 <__retarget_lock_release_recursive>
 8005dfe:	e7f3      	b.n	8005de8 <_vfiprintf_r+0x44>
 8005e00:	2300      	movs	r3, #0
 8005e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e04:	2320      	movs	r3, #32
 8005e06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e0a:	2330      	movs	r3, #48	@ 0x30
 8005e0c:	f04f 0901 	mov.w	r9, #1
 8005e10:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e14:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005fc0 <_vfiprintf_r+0x21c>
 8005e18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e1c:	4623      	mov	r3, r4
 8005e1e:	469a      	mov	sl, r3
 8005e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e24:	b10a      	cbz	r2, 8005e2a <_vfiprintf_r+0x86>
 8005e26:	2a25      	cmp	r2, #37	@ 0x25
 8005e28:	d1f9      	bne.n	8005e1e <_vfiprintf_r+0x7a>
 8005e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e2e:	d00b      	beq.n	8005e48 <_vfiprintf_r+0xa4>
 8005e30:	465b      	mov	r3, fp
 8005e32:	4622      	mov	r2, r4
 8005e34:	4629      	mov	r1, r5
 8005e36:	4630      	mov	r0, r6
 8005e38:	f7ff ffa2 	bl	8005d80 <__sfputs_r>
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	f000 80a7 	beq.w	8005f90 <_vfiprintf_r+0x1ec>
 8005e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e44:	445a      	add	r2, fp
 8005e46:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e48:	f89a 3000 	ldrb.w	r3, [sl]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 809f 	beq.w	8005f90 <_vfiprintf_r+0x1ec>
 8005e52:	2300      	movs	r3, #0
 8005e54:	f04f 32ff 	mov.w	r2, #4294967295
 8005e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e5c:	f10a 0a01 	add.w	sl, sl, #1
 8005e60:	9304      	str	r3, [sp, #16]
 8005e62:	9307      	str	r3, [sp, #28]
 8005e64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e68:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e6a:	4654      	mov	r4, sl
 8005e6c:	2205      	movs	r2, #5
 8005e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e72:	4853      	ldr	r0, [pc, #332]	@ (8005fc0 <_vfiprintf_r+0x21c>)
 8005e74:	f7fe f9b9 	bl	80041ea <memchr>
 8005e78:	9a04      	ldr	r2, [sp, #16]
 8005e7a:	b9d8      	cbnz	r0, 8005eb4 <_vfiprintf_r+0x110>
 8005e7c:	06d1      	lsls	r1, r2, #27
 8005e7e:	bf44      	itt	mi
 8005e80:	2320      	movmi	r3, #32
 8005e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e86:	0713      	lsls	r3, r2, #28
 8005e88:	bf44      	itt	mi
 8005e8a:	232b      	movmi	r3, #43	@ 0x2b
 8005e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e90:	f89a 3000 	ldrb.w	r3, [sl]
 8005e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e96:	d015      	beq.n	8005ec4 <_vfiprintf_r+0x120>
 8005e98:	4654      	mov	r4, sl
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	f04f 0c0a 	mov.w	ip, #10
 8005ea0:	9a07      	ldr	r2, [sp, #28]
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ea8:	3b30      	subs	r3, #48	@ 0x30
 8005eaa:	2b09      	cmp	r3, #9
 8005eac:	d94b      	bls.n	8005f46 <_vfiprintf_r+0x1a2>
 8005eae:	b1b0      	cbz	r0, 8005ede <_vfiprintf_r+0x13a>
 8005eb0:	9207      	str	r2, [sp, #28]
 8005eb2:	e014      	b.n	8005ede <_vfiprintf_r+0x13a>
 8005eb4:	eba0 0308 	sub.w	r3, r0, r8
 8005eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	46a2      	mov	sl, r4
 8005ec0:	9304      	str	r3, [sp, #16]
 8005ec2:	e7d2      	b.n	8005e6a <_vfiprintf_r+0xc6>
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	1d19      	adds	r1, r3, #4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	9103      	str	r1, [sp, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bfbb      	ittet	lt
 8005ed0:	425b      	neglt	r3, r3
 8005ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ed6:	9307      	strge	r3, [sp, #28]
 8005ed8:	9307      	strlt	r3, [sp, #28]
 8005eda:	bfb8      	it	lt
 8005edc:	9204      	strlt	r2, [sp, #16]
 8005ede:	7823      	ldrb	r3, [r4, #0]
 8005ee0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ee2:	d10a      	bne.n	8005efa <_vfiprintf_r+0x156>
 8005ee4:	7863      	ldrb	r3, [r4, #1]
 8005ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ee8:	d132      	bne.n	8005f50 <_vfiprintf_r+0x1ac>
 8005eea:	9b03      	ldr	r3, [sp, #12]
 8005eec:	3402      	adds	r4, #2
 8005eee:	1d1a      	adds	r2, r3, #4
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	9203      	str	r2, [sp, #12]
 8005ef4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ef8:	9305      	str	r3, [sp, #20]
 8005efa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005fc4 <_vfiprintf_r+0x220>
 8005efe:	2203      	movs	r2, #3
 8005f00:	4650      	mov	r0, sl
 8005f02:	7821      	ldrb	r1, [r4, #0]
 8005f04:	f7fe f971 	bl	80041ea <memchr>
 8005f08:	b138      	cbz	r0, 8005f1a <_vfiprintf_r+0x176>
 8005f0a:	2240      	movs	r2, #64	@ 0x40
 8005f0c:	9b04      	ldr	r3, [sp, #16]
 8005f0e:	eba0 000a 	sub.w	r0, r0, sl
 8005f12:	4082      	lsls	r2, r0
 8005f14:	4313      	orrs	r3, r2
 8005f16:	3401      	adds	r4, #1
 8005f18:	9304      	str	r3, [sp, #16]
 8005f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1e:	2206      	movs	r2, #6
 8005f20:	4829      	ldr	r0, [pc, #164]	@ (8005fc8 <_vfiprintf_r+0x224>)
 8005f22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f26:	f7fe f960 	bl	80041ea <memchr>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	d03f      	beq.n	8005fae <_vfiprintf_r+0x20a>
 8005f2e:	4b27      	ldr	r3, [pc, #156]	@ (8005fcc <_vfiprintf_r+0x228>)
 8005f30:	bb1b      	cbnz	r3, 8005f7a <_vfiprintf_r+0x1d6>
 8005f32:	9b03      	ldr	r3, [sp, #12]
 8005f34:	3307      	adds	r3, #7
 8005f36:	f023 0307 	bic.w	r3, r3, #7
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	9303      	str	r3, [sp, #12]
 8005f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f40:	443b      	add	r3, r7
 8005f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f44:	e76a      	b.n	8005e1c <_vfiprintf_r+0x78>
 8005f46:	460c      	mov	r4, r1
 8005f48:	2001      	movs	r0, #1
 8005f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f4e:	e7a8      	b.n	8005ea2 <_vfiprintf_r+0xfe>
 8005f50:	2300      	movs	r3, #0
 8005f52:	f04f 0c0a 	mov.w	ip, #10
 8005f56:	4619      	mov	r1, r3
 8005f58:	3401      	adds	r4, #1
 8005f5a:	9305      	str	r3, [sp, #20]
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f62:	3a30      	subs	r2, #48	@ 0x30
 8005f64:	2a09      	cmp	r2, #9
 8005f66:	d903      	bls.n	8005f70 <_vfiprintf_r+0x1cc>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0c6      	beq.n	8005efa <_vfiprintf_r+0x156>
 8005f6c:	9105      	str	r1, [sp, #20]
 8005f6e:	e7c4      	b.n	8005efa <_vfiprintf_r+0x156>
 8005f70:	4604      	mov	r4, r0
 8005f72:	2301      	movs	r3, #1
 8005f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f78:	e7f0      	b.n	8005f5c <_vfiprintf_r+0x1b8>
 8005f7a:	ab03      	add	r3, sp, #12
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	462a      	mov	r2, r5
 8005f80:	4630      	mov	r0, r6
 8005f82:	4b13      	ldr	r3, [pc, #76]	@ (8005fd0 <_vfiprintf_r+0x22c>)
 8005f84:	a904      	add	r1, sp, #16
 8005f86:	f7fd fbcd 	bl	8003724 <_printf_float>
 8005f8a:	4607      	mov	r7, r0
 8005f8c:	1c78      	adds	r0, r7, #1
 8005f8e:	d1d6      	bne.n	8005f3e <_vfiprintf_r+0x19a>
 8005f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f92:	07d9      	lsls	r1, r3, #31
 8005f94:	d405      	bmi.n	8005fa2 <_vfiprintf_r+0x1fe>
 8005f96:	89ab      	ldrh	r3, [r5, #12]
 8005f98:	059a      	lsls	r2, r3, #22
 8005f9a:	d402      	bmi.n	8005fa2 <_vfiprintf_r+0x1fe>
 8005f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f9e:	f7fe f923 	bl	80041e8 <__retarget_lock_release_recursive>
 8005fa2:	89ab      	ldrh	r3, [r5, #12]
 8005fa4:	065b      	lsls	r3, r3, #25
 8005fa6:	f53f af1f 	bmi.w	8005de8 <_vfiprintf_r+0x44>
 8005faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fac:	e71e      	b.n	8005dec <_vfiprintf_r+0x48>
 8005fae:	ab03      	add	r3, sp, #12
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	462a      	mov	r2, r5
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	4b06      	ldr	r3, [pc, #24]	@ (8005fd0 <_vfiprintf_r+0x22c>)
 8005fb8:	a904      	add	r1, sp, #16
 8005fba:	f7fd fe51 	bl	8003c60 <_printf_i>
 8005fbe:	e7e4      	b.n	8005f8a <_vfiprintf_r+0x1e6>
 8005fc0:	08006520 	.word	0x08006520
 8005fc4:	08006526 	.word	0x08006526
 8005fc8:	0800652a 	.word	0x0800652a
 8005fcc:	08003725 	.word	0x08003725
 8005fd0:	08005d81 	.word	0x08005d81

08005fd4 <__swbuf_r>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	460e      	mov	r6, r1
 8005fd8:	4614      	mov	r4, r2
 8005fda:	4605      	mov	r5, r0
 8005fdc:	b118      	cbz	r0, 8005fe6 <__swbuf_r+0x12>
 8005fde:	6a03      	ldr	r3, [r0, #32]
 8005fe0:	b90b      	cbnz	r3, 8005fe6 <__swbuf_r+0x12>
 8005fe2:	f7fd ffe9 	bl	8003fb8 <__sinit>
 8005fe6:	69a3      	ldr	r3, [r4, #24]
 8005fe8:	60a3      	str	r3, [r4, #8]
 8005fea:	89a3      	ldrh	r3, [r4, #12]
 8005fec:	071a      	lsls	r2, r3, #28
 8005fee:	d501      	bpl.n	8005ff4 <__swbuf_r+0x20>
 8005ff0:	6923      	ldr	r3, [r4, #16]
 8005ff2:	b943      	cbnz	r3, 8006006 <__swbuf_r+0x32>
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f000 f82a 	bl	8006050 <__swsetup_r>
 8005ffc:	b118      	cbz	r0, 8006006 <__swbuf_r+0x32>
 8005ffe:	f04f 37ff 	mov.w	r7, #4294967295
 8006002:	4638      	mov	r0, r7
 8006004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	6922      	ldr	r2, [r4, #16]
 800600a:	b2f6      	uxtb	r6, r6
 800600c:	1a98      	subs	r0, r3, r2
 800600e:	6963      	ldr	r3, [r4, #20]
 8006010:	4637      	mov	r7, r6
 8006012:	4283      	cmp	r3, r0
 8006014:	dc05      	bgt.n	8006022 <__swbuf_r+0x4e>
 8006016:	4621      	mov	r1, r4
 8006018:	4628      	mov	r0, r5
 800601a:	f7ff fd9b 	bl	8005b54 <_fflush_r>
 800601e:	2800      	cmp	r0, #0
 8006020:	d1ed      	bne.n	8005ffe <__swbuf_r+0x2a>
 8006022:	68a3      	ldr	r3, [r4, #8]
 8006024:	3b01      	subs	r3, #1
 8006026:	60a3      	str	r3, [r4, #8]
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	6022      	str	r2, [r4, #0]
 800602e:	701e      	strb	r6, [r3, #0]
 8006030:	6962      	ldr	r2, [r4, #20]
 8006032:	1c43      	adds	r3, r0, #1
 8006034:	429a      	cmp	r2, r3
 8006036:	d004      	beq.n	8006042 <__swbuf_r+0x6e>
 8006038:	89a3      	ldrh	r3, [r4, #12]
 800603a:	07db      	lsls	r3, r3, #31
 800603c:	d5e1      	bpl.n	8006002 <__swbuf_r+0x2e>
 800603e:	2e0a      	cmp	r6, #10
 8006040:	d1df      	bne.n	8006002 <__swbuf_r+0x2e>
 8006042:	4621      	mov	r1, r4
 8006044:	4628      	mov	r0, r5
 8006046:	f7ff fd85 	bl	8005b54 <_fflush_r>
 800604a:	2800      	cmp	r0, #0
 800604c:	d0d9      	beq.n	8006002 <__swbuf_r+0x2e>
 800604e:	e7d6      	b.n	8005ffe <__swbuf_r+0x2a>

08006050 <__swsetup_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4b29      	ldr	r3, [pc, #164]	@ (80060f8 <__swsetup_r+0xa8>)
 8006054:	4605      	mov	r5, r0
 8006056:	6818      	ldr	r0, [r3, #0]
 8006058:	460c      	mov	r4, r1
 800605a:	b118      	cbz	r0, 8006064 <__swsetup_r+0x14>
 800605c:	6a03      	ldr	r3, [r0, #32]
 800605e:	b90b      	cbnz	r3, 8006064 <__swsetup_r+0x14>
 8006060:	f7fd ffaa 	bl	8003fb8 <__sinit>
 8006064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006068:	0719      	lsls	r1, r3, #28
 800606a:	d422      	bmi.n	80060b2 <__swsetup_r+0x62>
 800606c:	06da      	lsls	r2, r3, #27
 800606e:	d407      	bmi.n	8006080 <__swsetup_r+0x30>
 8006070:	2209      	movs	r2, #9
 8006072:	602a      	str	r2, [r5, #0]
 8006074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006078:	f04f 30ff 	mov.w	r0, #4294967295
 800607c:	81a3      	strh	r3, [r4, #12]
 800607e:	e033      	b.n	80060e8 <__swsetup_r+0x98>
 8006080:	0758      	lsls	r0, r3, #29
 8006082:	d512      	bpl.n	80060aa <__swsetup_r+0x5a>
 8006084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006086:	b141      	cbz	r1, 800609a <__swsetup_r+0x4a>
 8006088:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800608c:	4299      	cmp	r1, r3
 800608e:	d002      	beq.n	8006096 <__swsetup_r+0x46>
 8006090:	4628      	mov	r0, r5
 8006092:	f7fe ff09 	bl	8004ea8 <_free_r>
 8006096:	2300      	movs	r3, #0
 8006098:	6363      	str	r3, [r4, #52]	@ 0x34
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80060a0:	81a3      	strh	r3, [r4, #12]
 80060a2:	2300      	movs	r3, #0
 80060a4:	6063      	str	r3, [r4, #4]
 80060a6:	6923      	ldr	r3, [r4, #16]
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	f043 0308 	orr.w	r3, r3, #8
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	b94b      	cbnz	r3, 80060ca <__swsetup_r+0x7a>
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80060bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060c0:	d003      	beq.n	80060ca <__swsetup_r+0x7a>
 80060c2:	4621      	mov	r1, r4
 80060c4:	4628      	mov	r0, r5
 80060c6:	f000 f882 	bl	80061ce <__smakebuf_r>
 80060ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ce:	f013 0201 	ands.w	r2, r3, #1
 80060d2:	d00a      	beq.n	80060ea <__swsetup_r+0x9a>
 80060d4:	2200      	movs	r2, #0
 80060d6:	60a2      	str	r2, [r4, #8]
 80060d8:	6962      	ldr	r2, [r4, #20]
 80060da:	4252      	negs	r2, r2
 80060dc:	61a2      	str	r2, [r4, #24]
 80060de:	6922      	ldr	r2, [r4, #16]
 80060e0:	b942      	cbnz	r2, 80060f4 <__swsetup_r+0xa4>
 80060e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060e6:	d1c5      	bne.n	8006074 <__swsetup_r+0x24>
 80060e8:	bd38      	pop	{r3, r4, r5, pc}
 80060ea:	0799      	lsls	r1, r3, #30
 80060ec:	bf58      	it	pl
 80060ee:	6962      	ldrpl	r2, [r4, #20]
 80060f0:	60a2      	str	r2, [r4, #8]
 80060f2:	e7f4      	b.n	80060de <__swsetup_r+0x8e>
 80060f4:	2000      	movs	r0, #0
 80060f6:	e7f7      	b.n	80060e8 <__swsetup_r+0x98>
 80060f8:	20000018 	.word	0x20000018

080060fc <_raise_r>:
 80060fc:	291f      	cmp	r1, #31
 80060fe:	b538      	push	{r3, r4, r5, lr}
 8006100:	4605      	mov	r5, r0
 8006102:	460c      	mov	r4, r1
 8006104:	d904      	bls.n	8006110 <_raise_r+0x14>
 8006106:	2316      	movs	r3, #22
 8006108:	6003      	str	r3, [r0, #0]
 800610a:	f04f 30ff 	mov.w	r0, #4294967295
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006112:	b112      	cbz	r2, 800611a <_raise_r+0x1e>
 8006114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006118:	b94b      	cbnz	r3, 800612e <_raise_r+0x32>
 800611a:	4628      	mov	r0, r5
 800611c:	f000 f830 	bl	8006180 <_getpid_r>
 8006120:	4622      	mov	r2, r4
 8006122:	4601      	mov	r1, r0
 8006124:	4628      	mov	r0, r5
 8006126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800612a:	f000 b817 	b.w	800615c <_kill_r>
 800612e:	2b01      	cmp	r3, #1
 8006130:	d00a      	beq.n	8006148 <_raise_r+0x4c>
 8006132:	1c59      	adds	r1, r3, #1
 8006134:	d103      	bne.n	800613e <_raise_r+0x42>
 8006136:	2316      	movs	r3, #22
 8006138:	6003      	str	r3, [r0, #0]
 800613a:	2001      	movs	r0, #1
 800613c:	e7e7      	b.n	800610e <_raise_r+0x12>
 800613e:	2100      	movs	r1, #0
 8006140:	4620      	mov	r0, r4
 8006142:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006146:	4798      	blx	r3
 8006148:	2000      	movs	r0, #0
 800614a:	e7e0      	b.n	800610e <_raise_r+0x12>

0800614c <raise>:
 800614c:	4b02      	ldr	r3, [pc, #8]	@ (8006158 <raise+0xc>)
 800614e:	4601      	mov	r1, r0
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	f7ff bfd3 	b.w	80060fc <_raise_r>
 8006156:	bf00      	nop
 8006158:	20000018 	.word	0x20000018

0800615c <_kill_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	2300      	movs	r3, #0
 8006160:	4d06      	ldr	r5, [pc, #24]	@ (800617c <_kill_r+0x20>)
 8006162:	4604      	mov	r4, r0
 8006164:	4608      	mov	r0, r1
 8006166:	4611      	mov	r1, r2
 8006168:	602b      	str	r3, [r5, #0]
 800616a:	f7fa ffce 	bl	800110a <_kill>
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	d102      	bne.n	8006178 <_kill_r+0x1c>
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	b103      	cbz	r3, 8006178 <_kill_r+0x1c>
 8006176:	6023      	str	r3, [r4, #0]
 8006178:	bd38      	pop	{r3, r4, r5, pc}
 800617a:	bf00      	nop
 800617c:	20000498 	.word	0x20000498

08006180 <_getpid_r>:
 8006180:	f7fa bfbc 	b.w	80010fc <_getpid>

08006184 <__swhatbuf_r>:
 8006184:	b570      	push	{r4, r5, r6, lr}
 8006186:	460c      	mov	r4, r1
 8006188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800618c:	4615      	mov	r5, r2
 800618e:	2900      	cmp	r1, #0
 8006190:	461e      	mov	r6, r3
 8006192:	b096      	sub	sp, #88	@ 0x58
 8006194:	da0c      	bge.n	80061b0 <__swhatbuf_r+0x2c>
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	2100      	movs	r1, #0
 800619a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800619e:	bf14      	ite	ne
 80061a0:	2340      	movne	r3, #64	@ 0x40
 80061a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80061a6:	2000      	movs	r0, #0
 80061a8:	6031      	str	r1, [r6, #0]
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	b016      	add	sp, #88	@ 0x58
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	466a      	mov	r2, sp
 80061b2:	f000 f849 	bl	8006248 <_fstat_r>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	dbed      	blt.n	8006196 <__swhatbuf_r+0x12>
 80061ba:	9901      	ldr	r1, [sp, #4]
 80061bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80061c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80061c4:	4259      	negs	r1, r3
 80061c6:	4159      	adcs	r1, r3
 80061c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061cc:	e7eb      	b.n	80061a6 <__swhatbuf_r+0x22>

080061ce <__smakebuf_r>:
 80061ce:	898b      	ldrh	r3, [r1, #12]
 80061d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061d2:	079d      	lsls	r5, r3, #30
 80061d4:	4606      	mov	r6, r0
 80061d6:	460c      	mov	r4, r1
 80061d8:	d507      	bpl.n	80061ea <__smakebuf_r+0x1c>
 80061da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80061de:	6023      	str	r3, [r4, #0]
 80061e0:	6123      	str	r3, [r4, #16]
 80061e2:	2301      	movs	r3, #1
 80061e4:	6163      	str	r3, [r4, #20]
 80061e6:	b003      	add	sp, #12
 80061e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ea:	466a      	mov	r2, sp
 80061ec:	ab01      	add	r3, sp, #4
 80061ee:	f7ff ffc9 	bl	8006184 <__swhatbuf_r>
 80061f2:	9f00      	ldr	r7, [sp, #0]
 80061f4:	4605      	mov	r5, r0
 80061f6:	4639      	mov	r1, r7
 80061f8:	4630      	mov	r0, r6
 80061fa:	f7fe fec7 	bl	8004f8c <_malloc_r>
 80061fe:	b948      	cbnz	r0, 8006214 <__smakebuf_r+0x46>
 8006200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006204:	059a      	lsls	r2, r3, #22
 8006206:	d4ee      	bmi.n	80061e6 <__smakebuf_r+0x18>
 8006208:	f023 0303 	bic.w	r3, r3, #3
 800620c:	f043 0302 	orr.w	r3, r3, #2
 8006210:	81a3      	strh	r3, [r4, #12]
 8006212:	e7e2      	b.n	80061da <__smakebuf_r+0xc>
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800621a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	9b01      	ldr	r3, [sp, #4]
 8006222:	6020      	str	r0, [r4, #0]
 8006224:	b15b      	cbz	r3, 800623e <__smakebuf_r+0x70>
 8006226:	4630      	mov	r0, r6
 8006228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800622c:	f000 f81e 	bl	800626c <_isatty_r>
 8006230:	b128      	cbz	r0, 800623e <__smakebuf_r+0x70>
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	f023 0303 	bic.w	r3, r3, #3
 8006238:	f043 0301 	orr.w	r3, r3, #1
 800623c:	81a3      	strh	r3, [r4, #12]
 800623e:	89a3      	ldrh	r3, [r4, #12]
 8006240:	431d      	orrs	r5, r3
 8006242:	81a5      	strh	r5, [r4, #12]
 8006244:	e7cf      	b.n	80061e6 <__smakebuf_r+0x18>
	...

08006248 <_fstat_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	2300      	movs	r3, #0
 800624c:	4d06      	ldr	r5, [pc, #24]	@ (8006268 <_fstat_r+0x20>)
 800624e:	4604      	mov	r4, r0
 8006250:	4608      	mov	r0, r1
 8006252:	4611      	mov	r1, r2
 8006254:	602b      	str	r3, [r5, #0]
 8006256:	f7fa ffb7 	bl	80011c8 <_fstat>
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	d102      	bne.n	8006264 <_fstat_r+0x1c>
 800625e:	682b      	ldr	r3, [r5, #0]
 8006260:	b103      	cbz	r3, 8006264 <_fstat_r+0x1c>
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	bd38      	pop	{r3, r4, r5, pc}
 8006266:	bf00      	nop
 8006268:	20000498 	.word	0x20000498

0800626c <_isatty_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	2300      	movs	r3, #0
 8006270:	4d05      	ldr	r5, [pc, #20]	@ (8006288 <_isatty_r+0x1c>)
 8006272:	4604      	mov	r4, r0
 8006274:	4608      	mov	r0, r1
 8006276:	602b      	str	r3, [r5, #0]
 8006278:	f7fa ffb5 	bl	80011e6 <_isatty>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d102      	bne.n	8006286 <_isatty_r+0x1a>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	b103      	cbz	r3, 8006286 <_isatty_r+0x1a>
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	20000498 	.word	0x20000498

0800628c <_init>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	bf00      	nop
 8006290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006292:	bc08      	pop	{r3}
 8006294:	469e      	mov	lr, r3
 8006296:	4770      	bx	lr

08006298 <_fini>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	bf00      	nop
 800629c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629e:	bc08      	pop	{r3}
 80062a0:	469e      	mov	lr, r3
 80062a2:	4770      	bx	lr
